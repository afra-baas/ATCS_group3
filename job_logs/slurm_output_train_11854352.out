Found cached dataset amazon_reviews_multi (/home/lcur1101/.cache/huggingface/datasets/amazon_reviews_multi/en/1.0.0/724e94f4b0c6c405ce7e476a6c5ef4f87db30799ad49f765094cf9770e0f7609)
****Start Time: 2023-06-02_00-09-22
Using MARC dataset for en
  0%|          | 0/3 [00:00<?, ?it/s]100%|██████████| 3/3 [00:00<00:00, 30.33it/s]
loading model Duration: 0:00:01.379087
Average length of review_body for rows with 1 star: 170.985525
Average length of review_body for rows with 5 star: 151.0092
len of lowest cat:  38553
len of pos_reviews, neg_reviews:  38553 38553
len dataset  77106
len dataset  200
create dataloader Duration: 0:03:10.143794
Loading model bigscience/bloom-7b1
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:06<00:06,  6.41s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:09<00:00,  4.25s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:09<00:00,  4.57s/it]
Model bigscience/bloom-7b1 loaded
Available device is cuda
Model device: cuda:0
possible_answers: ['A', 'B']
answer  {'input_ids': [36], 'attention_mask': [1]}
id:[36]
answer  {'input_ids': [37], 'attention_mask': [1]}
id:[37]
summ of probs approach
load model Duration: 0:04:34.826981
prompt_type active has 10 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([87, 2])
answers_probs just softmax dim 0: tensor([[0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115]], device='cuda:0')
tensor([[0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0008, 0.0013],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0008],
        [0.0006, 0.0010],
        [0.0005, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0577, 0.0675],
        [0.0609, 0.0639],
        [0.0593, 0.0656],
        [0.0626, 0.0622],
        [0.0608, 0.0641],
        [0.0670, 0.0581],
        [0.0611, 0.0637],
        [0.0662, 0.0588],
        [0.0582, 0.0670],
        [0.0633, 0.0615],
        [0.0575, 0.0678],
        [0.0654, 0.0596],
        [0.0635, 0.0613],
        [0.0688, 0.0566],
        [0.0645, 0.0604],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.397092
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0012],
        [0.0007, 0.0010],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0007, 0.0011],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0008, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0007, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0604],
        [0.0643, 0.0606],
        [0.0633, 0.0616],
        [0.0629, 0.0619],
        [0.0665, 0.0586],
        [0.0631, 0.0617],
        [0.0637, 0.0611],
        [0.0606, 0.0643],
        [0.0571, 0.0682],
        [0.0592, 0.0658],
        [0.0623, 0.0625],
        [0.0696, 0.0560],
        [0.0635, 0.0614],
        [0.0574, 0.0679],
        [0.0594, 0.0656],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.517513
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0007, 0.0009],
        [0.0003, 0.0003],
        [0.0008, 0.0014],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0006, 0.0015],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0007, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0586],
        [0.0596, 0.0653],
        [0.0663, 0.0587],
        [0.0663, 0.0587],
        [0.0615, 0.0633],
        [0.0657, 0.0593],
        [0.0600, 0.0649],
        [0.0631, 0.0617],
        [0.0659, 0.0591],
        [0.0570, 0.0683],
        [0.0579, 0.0672],
        [0.0559, 0.0696],
        [0.0657, 0.0593],
        [0.0654, 0.0595],
        [0.0629, 0.0619],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.403580
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0625],
        [0.0607, 0.0643],
        [0.0685, 0.0569],
        [0.0603, 0.0647],
        [0.0598, 0.0653],
        [0.0611, 0.0638],
        [0.0608, 0.0642],
        [0.0611, 0.0638],
        [0.0639, 0.0610],
        [0.0621, 0.0628],
        [0.0620, 0.0629],
        [0.0640, 0.0609],
        [0.0621, 0.0628],
        [0.0658, 0.0593],
        [0.0629, 0.0620],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.321730
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0004, 0.0004],
        [0.0007, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0642],
        [0.0610, 0.0640],
        [0.0625, 0.0624],
        [0.0636, 0.0614],
        [0.0606, 0.0643],
        [0.0609, 0.0641],
        [0.0654, 0.0596],
        [0.0609, 0.0641],
        [0.0619, 0.0630],
        [0.0618, 0.0631],
        [0.0637, 0.0612],
        [0.0673, 0.0579],
        [0.0648, 0.0602],
        [0.0622, 0.0627],
        [0.0571, 0.0683],
        [0.0657, 0.0594]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.431144
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0592, 0.0658],
        [0.0632, 0.0617],
        [0.0604, 0.0645],
        [0.0593, 0.0657],
        [0.0615, 0.0634],
        [0.0645, 0.0604],
        [0.0674, 0.0578],
        [0.0609, 0.0640],
        [0.0615, 0.0634],
        [0.0552, 0.0706],
        [0.0629, 0.0619],
        [0.0610, 0.0639],
        [0.0674, 0.0578],
        [0.0632, 0.0617],
        [0.0669, 0.0583],
        [0.0657, 0.0593]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.326595
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0007],
        [0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0006, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0002],
        [0.0004, 0.0004],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0644],
        [0.0647, 0.0602],
        [0.0583, 0.0668],
        [0.0642, 0.0606],
        [0.0588, 0.0662],
        [0.0628, 0.0621],
        [0.0598, 0.0651],
        [0.0610, 0.0638],
        [0.0642, 0.0606],
        [0.0597, 0.0653],
        [0.0598, 0.0651],
        [0.0661, 0.0589],
        [0.0590, 0.0660],
        [0.0715, 0.0545],
        [0.0679, 0.0573],
        [0.0617, 0.0631]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.380570
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0005, 0.0007],
        [0.0005, 0.0005],
        [0.0008, 0.0013],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0005, 0.0006],
        [0.0012, 0.0013],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0004],
        [0.0005, 0.0007],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0616],
        [0.0629, 0.0619],
        [0.0688, 0.0566],
        [0.0614, 0.0634],
        [0.0573, 0.0680],
        [0.0576, 0.0675],
        [0.0657, 0.0593],
        [0.0688, 0.0566],
        [0.0609, 0.0639],
        [0.0614, 0.0634],
        [0.0553, 0.0704],
        [0.0613, 0.0635],
        [0.0608, 0.0640],
        [0.0684, 0.0569],
        [0.0652, 0.0597],
        [0.0613, 0.0635]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.324626
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0005, 0.0006],
        [0.0005, 0.0010],
        [0.0003, 0.0003],
        [0.0005, 0.0009],
        [0.0006, 0.0011],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0006, 0.0007],
        [0.0005, 0.0007],
        [0.0005, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0656, 0.0593],
        [0.0630, 0.0618],
        [0.0617, 0.0631],
        [0.0575, 0.0676],
        [0.0681, 0.0571],
        [0.0587, 0.0663],
        [0.0668, 0.0583],
        [0.0614, 0.0634],
        [0.0608, 0.0640],
        [0.0617, 0.0631],
        [0.0613, 0.0635],
        [0.0684, 0.0569],
        [0.0645, 0.0603],
        [0.0673, 0.0578],
        [0.0566, 0.0687],
        [0.0566, 0.0687]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.352266
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0004],
        [0.0003, 0.0009],
        [0.0005, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0632],
        [0.0658, 0.0591],
        [0.0696, 0.0559],
        [0.0559, 0.0696],
        [0.0658, 0.0591],
        [0.0666, 0.0584],
        [0.0581, 0.0670],
        [0.0580, 0.0671],
        [0.0693, 0.0561],
        [0.0644, 0.0604],
        [0.0626, 0.0621],
        [0.0597, 0.0652],
        [0.0591, 0.0658],
        [0.0625, 0.0622],
        [0.0607, 0.0641],
        [0.0603, 0.0645]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.389211
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.0683e-04, 2.8729e-04],
        [2.0158e-04, 3.6502e-04],
        [4.8542e-04, 6.2847e-04],
        [5.0735e-04, 7.7963e-04],
        [3.8242e-04, 6.5088e-04],
        [2.8610e-04, 4.0674e-04],
        [3.9387e-04, 4.3583e-04],
        [1.8847e-04, 3.7169e-04],
        [3.5548e-04, 7.3528e-04],
        [4.0746e-04, 7.8535e-04],
        [3.7408e-04, 9.4795e-04],
        [4.1723e-04, 7.9775e-04],
        [9.5248e-05, 3.7670e-04],
        [4.8590e-04, 8.4591e-04],
        [2.4962e-04, 5.6696e-04],
        [2.0921e-04, 3.8195e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0663, 0.0587],
        [0.0623, 0.0625],
        [0.0675, 0.0577],
        [0.0647, 0.0601],
        [0.0632, 0.0616],
        [0.0659, 0.0590],
        [0.0701, 0.0555],
        [0.0611, 0.0637],
        [0.0604, 0.0644],
        [0.0614, 0.0634],
        [0.0579, 0.0672],
        [0.0615, 0.0633],
        [0.0534, 0.0729],
        [0.0628, 0.0619],
        [0.0592, 0.0657],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.246843
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0618, 0.0631],
        [0.0593, 0.0658],
        [0.0698, 0.0558],
        [0.0599, 0.0651],
        [0.0620, 0.0629],
        [0.0628, 0.0621],
        [0.0614, 0.0635],
        [0.0622, 0.0627],
        [0.0638, 0.0611],
        [0.0628, 0.0621],
        [0.0660, 0.0591],
        [0.0646, 0.0603],
        [0.0601, 0.0649],
        [0.0624, 0.0625],
        [0.0575, 0.0677]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.343029
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0006, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1292, 0.1208],
        [0.1231, 0.1267],
        [0.1218, 0.1281],
        [0.1189, 0.1313],
        [0.1340, 0.1165],
        [0.1212, 0.1288],
        [0.1236, 0.1263],
        [0.1282, 0.1217]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.153005
acc:  0.48
Time taken to execute the en SA task with prompt type active, variation 0 and batchsize 16: 0:00:04.611600
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([95, 2])
answers_probs just softmax dim 0: tensor([[0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105]], device='cuda:0')
tensor([[0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105],
        [0.0105, 0.0105]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0007, 0.0008],
        [0.0005, 0.0005],
        [0.0005, 0.0007],
        [0.0007, 0.0009],
        [0.0004, 0.0005],
        [0.0006, 0.0006],
        [0.0004, 0.0004],
        [0.0007, 0.0006],
        [0.0003, 0.0003],
        [0.0005, 0.0007],
        [0.0007, 0.0006],
        [0.0006, 0.0007],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0597],
        [0.0579, 0.0674],
        [0.0584, 0.0668],
        [0.0626, 0.0623],
        [0.0634, 0.0615],
        [0.0613, 0.0637],
        [0.0615, 0.0634],
        [0.0633, 0.0616],
        [0.0637, 0.0612],
        [0.0623, 0.0626],
        [0.0669, 0.0583],
        [0.0625, 0.0624],
        [0.0608, 0.0642],
        [0.0669, 0.0583],
        [0.0609, 0.0640],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.349455
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0006, 0.0009],
        [0.0008, 0.0010],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0011, 0.0012],
        [0.0005, 0.0006],
        [0.0007, 0.0008],
        [0.0004, 0.0004],
        [0.0008, 0.0007],
        [0.0005, 0.0005],
        [0.0003, 0.0003],
        [0.0003, 0.0002],
        [0.0003, 0.0005],
        [0.0006, 0.0014],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0620, 0.0628],
        [0.0587, 0.0663],
        [0.0618, 0.0630],
        [0.0604, 0.0645],
        [0.0630, 0.0618],
        [0.0642, 0.0606],
        [0.0632, 0.0616],
        [0.0621, 0.0626],
        [0.0664, 0.0586],
        [0.0672, 0.0579],
        [0.0639, 0.0609],
        [0.0635, 0.0613],
        [0.0709, 0.0549],
        [0.0595, 0.0654],
        [0.0546, 0.0713],
        [0.0586, 0.0664]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.409064
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0004],
        [0.0007, 0.0008],
        [0.0007, 0.0009],
        [0.0008, 0.0008],
        [0.0008, 0.0009],
        [0.0003, 0.0003],
        [0.0005, 0.0005],
        [0.0004, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0679, 0.0573],
        [0.0555, 0.0702],
        [0.0605, 0.0644],
        [0.0627, 0.0621],
        [0.0639, 0.0609],
        [0.0605, 0.0644],
        [0.0643, 0.0605],
        [0.0626, 0.0622],
        [0.0620, 0.0628],
        [0.0662, 0.0588],
        [0.0642, 0.0606],
        [0.0666, 0.0584],
        [0.0657, 0.0592],
        [0.0637, 0.0611],
        [0.0591, 0.0658],
        [0.0544, 0.0715]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.381934
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0006, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0002, 0.0003],
        [0.0006, 0.0007],
        [0.0006, 0.0006],
        [0.0005, 0.0005],
        [0.0006, 0.0008],
        [0.0004, 0.0004],
        [0.0007, 0.0007],
        [0.0005, 0.0005],
        [0.0005, 0.0006],
        [0.0009, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0662],
        [0.0601, 0.0650],
        [0.0630, 0.0619],
        [0.0595, 0.0656],
        [0.0623, 0.0626],
        [0.0628, 0.0621],
        [0.0608, 0.0642],
        [0.0628, 0.0621],
        [0.0637, 0.0613],
        [0.0648, 0.0602],
        [0.0610, 0.0640],
        [0.0632, 0.0618],
        [0.0648, 0.0602],
        [0.0637, 0.0613],
        [0.0627, 0.0623],
        [0.0661, 0.0591]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.408006
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0009, 0.0010],
        [0.0004, 0.0006],
        [0.0006, 0.0007],
        [0.0008, 0.0007],
        [0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0004, 0.0004],
        [0.0006, 0.0006],
        [0.0005, 0.0009],
        [0.0007, 0.0008],
        [0.0006, 0.0007],
        [0.0009, 0.0009],
        [0.0005, 0.0007],
        [0.0003, 0.0003],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0632],
        [0.0632, 0.0617],
        [0.0597, 0.0654],
        [0.0650, 0.0601],
        [0.0668, 0.0584],
        [0.0613, 0.0636],
        [0.0606, 0.0644],
        [0.0641, 0.0609],
        [0.0647, 0.0603],
        [0.0583, 0.0670],
        [0.0627, 0.0622],
        [0.0632, 0.0617],
        [0.0648, 0.0602],
        [0.0599, 0.0651],
        [0.0645, 0.0605],
        [0.0596, 0.0655]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.404278
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0005, 0.0005],
        [0.0008, 0.0009],
        [0.0013, 0.0011],
        [0.0008, 0.0010],
        [0.0004, 0.0005],
        [0.0005, 0.0007],
        [0.0009, 0.0009],
        [0.0005, 0.0006],
        [0.0004, 0.0004],
        [0.0004, 0.0005],
        [0.0007, 0.0008],
        [0.0008, 0.0007],
        [0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0007, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0591],
        [0.0636, 0.0613],
        [0.0613, 0.0636],
        [0.0663, 0.0589],
        [0.0614, 0.0635],
        [0.0607, 0.0642],
        [0.0601, 0.0649],
        [0.0645, 0.0605],
        [0.0625, 0.0624],
        [0.0635, 0.0614],
        [0.0596, 0.0655],
        [0.0642, 0.0607],
        [0.0654, 0.0597],
        [0.0579, 0.0673],
        [0.0595, 0.0656],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.434736
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0005, 0.0006],
        [0.0008, 0.0010],
        [0.0006, 0.0007],
        [0.0009, 0.0008],
        [0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0009, 0.0009],
        [0.0009, 0.0011],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0007, 0.0008],
        [0.0008, 0.0008],
        [0.0007, 0.0009],
        [0.0004, 0.0005],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0633],
        [0.0612, 0.0638],
        [0.0615, 0.0635],
        [0.0615, 0.0635],
        [0.0657, 0.0594],
        [0.0607, 0.0643],
        [0.0614, 0.0636],
        [0.0660, 0.0592],
        [0.0627, 0.0622],
        [0.0632, 0.0618],
        [0.0630, 0.0620],
        [0.0613, 0.0637],
        [0.0657, 0.0594],
        [0.0621, 0.0629],
        [0.0611, 0.0638],
        [0.0613, 0.0637]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.351659
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0006],
        [0.0006, 0.0004],
        [0.0007, 0.0006],
        [0.0004, 0.0004],
        [0.0005, 0.0004],
        [0.0003, 0.0004],
        [0.0007, 0.0007],
        [0.0006, 0.0008],
        [0.0007, 0.0008],
        [0.0006, 0.0006],
        [0.0005, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0007, 0.0011],
        [0.0007, 0.0012],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0604],
        [0.0692, 0.0561],
        [0.0666, 0.0583],
        [0.0629, 0.0617],
        [0.0683, 0.0569],
        [0.0617, 0.0629],
        [0.0639, 0.0608],
        [0.0596, 0.0651],
        [0.0612, 0.0634],
        [0.0662, 0.0587],
        [0.0667, 0.0582],
        [0.0505, 0.0770],
        [0.0586, 0.0662],
        [0.0585, 0.0664],
        [0.0581, 0.0669],
        [0.0637, 0.0610]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.322850
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0005, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0005, 0.0008],
        [0.0005, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0003],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0006, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0666, 0.0586],
        [0.0655, 0.0595],
        [0.0603, 0.0646],
        [0.0624, 0.0625],
        [0.0598, 0.0653],
        [0.0630, 0.0619],
        [0.0591, 0.0660],
        [0.0633, 0.0616],
        [0.0638, 0.0612],
        [0.0616, 0.0633],
        [0.0678, 0.0576],
        [0.0599, 0.0651],
        [0.0622, 0.0627],
        [0.0645, 0.0604],
        [0.0611, 0.0638],
        [0.0592, 0.0659]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.379732
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0005, 0.0004],
        [0.0007, 0.0009],
        [0.0004, 0.0005],
        [0.0008, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0005],
        [0.0006, 0.0006],
        [0.0006, 0.0005],
        [0.0006, 0.0006],
        [0.0005, 0.0007],
        [0.0007, 0.0009],
        [0.0004, 0.0005],
        [0.0006, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0646],
        [0.0678, 0.0575],
        [0.0602, 0.0648],
        [0.0611, 0.0638],
        [0.0643, 0.0607],
        [0.0608, 0.0642],
        [0.0639, 0.0610],
        [0.0642, 0.0608],
        [0.0656, 0.0595],
        [0.0636, 0.0614],
        [0.0590, 0.0662],
        [0.0608, 0.0642],
        [0.0614, 0.0636],
        [0.0643, 0.0607],
        [0.0614, 0.0636],
        [0.0613, 0.0637]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.389088
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0005, 0.0006],
        [0.0007, 0.0007],
        [0.0007, 0.0008],
        [0.0007, 0.0009],
        [0.0005, 0.0004],
        [0.0006, 0.0007],
        [0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0009, 0.0010],
        [0.0005, 0.0007],
        [0.0007, 0.0007],
        [0.0005, 0.0007],
        [0.0010, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0611],
        [0.0625, 0.0624],
        [0.0648, 0.0601],
        [0.0622, 0.0627],
        [0.0615, 0.0634],
        [0.0666, 0.0585],
        [0.0628, 0.0621],
        [0.0599, 0.0651],
        [0.0599, 0.0651],
        [0.0594, 0.0656],
        [0.0590, 0.0661],
        [0.0632, 0.0617],
        [0.0607, 0.0642],
        [0.0660, 0.0591],
        [0.0599, 0.0651],
        [0.0675, 0.0577]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.517081
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0005, 0.0005],
        [0.0010, 0.0014],
        [0.0006, 0.0005],
        [0.0003, 0.0003],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0008, 0.0010],
        [0.0011, 0.0012],
        [0.0006, 0.0007],
        [0.0007, 0.0007],
        [0.0004, 0.0007],
        [0.0008, 0.0010],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0597, 0.0653],
        [0.0671, 0.0580],
        [0.0598, 0.0652],
        [0.0687, 0.0567],
        [0.0605, 0.0645],
        [0.0630, 0.0619],
        [0.0628, 0.0620],
        [0.0563, 0.0693],
        [0.0622, 0.0626],
        [0.0643, 0.0606],
        [0.0633, 0.0615],
        [0.0651, 0.0599],
        [0.0583, 0.0668],
        [0.0619, 0.0630],
        [0.0627, 0.0621]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.348070
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0009, 0.0013],
        [0.0013, 0.0015],
        [0.0006, 0.0011],
        [0.0006, 0.0007],
        [0.0005, 0.0008],
        [0.0006, 0.0007],
        [0.0004, 0.0004],
        [0.0006, 0.0006]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1251],
        [0.1251, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1190, 0.1310],
        [0.1274, 0.1223],
        [0.1143, 0.1364],
        [0.1281, 0.1216],
        [0.1203, 0.1296],
        [0.1289, 0.1209],
        [0.1289, 0.1209],
        [0.1330, 0.1172]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.215930
acc:  0.415
Time taken to execute the en SA task with prompt type active, variation 1 and batchsize 16: 0:00:04.934835
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([100, 2])
answers_probs just softmax dim 0: tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0002, 0.0002],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0005, 0.0009],
        [0.0003, 0.0010],
        [0.0005, 0.0006],
        [0.0002, 0.0004],
        [0.0001, 0.0002],
        [0.0002, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0001, 0.0001]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0609],
        [0.0663, 0.0587],
        [0.0620, 0.0627],
        [0.0616, 0.0631],
        [0.0583, 0.0666],
        [0.0643, 0.0605],
        [0.0577, 0.0674],
        [0.0692, 0.0562],
        [0.0613, 0.0634],
        [0.0700, 0.0555],
        [0.0564, 0.0690],
        [0.0569, 0.0683],
        [0.0612, 0.0635],
        [0.0597, 0.0651],
        [0.0611, 0.0636],
        [0.0701, 0.0555]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.420738
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0008, 0.0018],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0001, 0.0003],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0592, 0.0658],
        [0.0662, 0.0589],
        [0.0620, 0.0629],
        [0.0629, 0.0619],
        [0.0614, 0.0634],
        [0.0673, 0.0579],
        [0.0619, 0.0630],
        [0.0630, 0.0618],
        [0.0623, 0.0626],
        [0.0635, 0.0613],
        [0.0643, 0.0606],
        [0.0605, 0.0644],
        [0.0596, 0.0654],
        [0.0576, 0.0677],
        [0.0687, 0.0567]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.426333
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0012],
        [0.0004, 0.0011],
        [0.0002, 0.0002],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0010],
        [0.0003, 0.0009],
        [0.0003, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0587, 0.0662],
        [0.0584, 0.0665],
        [0.0571, 0.0680],
        [0.0593, 0.0655],
        [0.0693, 0.0560],
        [0.0697, 0.0557],
        [0.0612, 0.0634],
        [0.0675, 0.0575],
        [0.0630, 0.0616],
        [0.0629, 0.0617],
        [0.0690, 0.0563],
        [0.0571, 0.0680],
        [0.0587, 0.0662],
        [0.0581, 0.0669],
        [0.0595, 0.0653],
        [0.0706, 0.0550]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.343680
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0013],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0012],
        [0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0010],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0005, 0.0010],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0578, 0.0672],
        [0.0658, 0.0591],
        [0.0581, 0.0669],
        [0.0651, 0.0598],
        [0.0633, 0.0615],
        [0.0613, 0.0635],
        [0.0610, 0.0638],
        [0.0620, 0.0627],
        [0.0584, 0.0666],
        [0.0688, 0.0566],
        [0.0613, 0.0635],
        [0.0571, 0.0681],
        [0.0733, 0.0531],
        [0.0582, 0.0668],
        [0.0625, 0.0622],
        [0.0661, 0.0588]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.460655
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0001, 0.0002],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0009],
        [0.0006, 0.0015],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0001, 0.0002],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0688, 0.0565],
        [0.0617, 0.0630],
        [0.0591, 0.0658],
        [0.0668, 0.0583],
        [0.0642, 0.0605],
        [0.0668, 0.0583],
        [0.0598, 0.0650],
        [0.0580, 0.0670],
        [0.0594, 0.0654],
        [0.0618, 0.0629],
        [0.0607, 0.0641],
        [0.0673, 0.0578],
        [0.0579, 0.0672],
        [0.0584, 0.0665],
        [0.0711, 0.0547],
        [0.0581, 0.0669]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.410787
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0014],
        [0.0007, 0.0014],
        [0.0002, 0.0003],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0001, 0.0001],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0002, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0624],
        [0.0600, 0.0649],
        [0.0638, 0.0610],
        [0.0691, 0.0563],
        [0.0625, 0.0623],
        [0.0633, 0.0615],
        [0.0596, 0.0653],
        [0.0624, 0.0624],
        [0.0574, 0.0678],
        [0.0731, 0.0533],
        [0.0605, 0.0643],
        [0.0612, 0.0636],
        [0.0615, 0.0633],
        [0.0623, 0.0625],
        [0.0584, 0.0667],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.388965
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0001, 0.0002],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0008],
        [0.0001, 0.0002],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0653],
        [0.0668, 0.0583],
        [0.0628, 0.0620],
        [0.0640, 0.0608],
        [0.0640, 0.0608],
        [0.0613, 0.0635],
        [0.0607, 0.0642],
        [0.0658, 0.0592],
        [0.0630, 0.0619],
        [0.0602, 0.0648],
        [0.0670, 0.0581],
        [0.0649, 0.0601],
        [0.0574, 0.0679],
        [0.0556, 0.0701],
        [0.0648, 0.0601],
        [0.0620, 0.0629]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.327373
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0001, 0.0001],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0007, 0.0015],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0583],
        [0.0592, 0.0657],
        [0.0645, 0.0603],
        [0.0598, 0.0651],
        [0.0704, 0.0553],
        [0.0599, 0.0649],
        [0.0722, 0.0539],
        [0.0615, 0.0633],
        [0.0607, 0.0641],
        [0.0643, 0.0605],
        [0.0599, 0.0650],
        [0.0583, 0.0668],
        [0.0570, 0.0683],
        [0.0649, 0.0600],
        [0.0613, 0.0635],
        [0.0598, 0.0651]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.393003
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0003, 0.0008],
        [0.0002, 0.0008],
        [0.0004, 0.0013],
        [0.0005, 0.0012],
        [0.0004, 0.0005],
        [0.0005, 0.0012],
        [0.0006, 0.0013],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0576, 0.0676],
        [0.0602, 0.0646],
        [0.0620, 0.0627],
        [0.0684, 0.0569],
        [0.0630, 0.0617],
        [0.0606, 0.0642],
        [0.0556, 0.0700],
        [0.0581, 0.0669],
        [0.0604, 0.0644],
        [0.0706, 0.0551],
        [0.0616, 0.0631],
        [0.0621, 0.0626],
        [0.0599, 0.0649],
        [0.0643, 0.0605],
        [0.0680, 0.0572],
        [0.0675, 0.0576]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.303889
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0005, 0.0012],
        [0.0002, 0.0003],
        [0.0003, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0010],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0004, 0.0011],
        [0.0001, 0.0002],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0002, 0.0007],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0710, 0.0546],
        [0.0618, 0.0627],
        [0.0675, 0.0574],
        [0.0586, 0.0661],
        [0.0659, 0.0588],
        [0.0730, 0.0531],
        [0.0711, 0.0545],
        [0.0543, 0.0714],
        [0.0568, 0.0681],
        [0.0660, 0.0587],
        [0.0587, 0.0659],
        [0.0626, 0.0619],
        [0.0610, 0.0635],
        [0.0559, 0.0692],
        [0.0549, 0.0706],
        [0.0609, 0.0636]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.351870
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0007, 0.0012],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0012],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0621],
        [0.0599, 0.0651],
        [0.0619, 0.0630],
        [0.0679, 0.0574],
        [0.0625, 0.0624],
        [0.0650, 0.0600],
        [0.0600, 0.0650],
        [0.0613, 0.0636],
        [0.0603, 0.0647],
        [0.0566, 0.0688],
        [0.0624, 0.0625],
        [0.0613, 0.0636],
        [0.0648, 0.0602],
        [0.0653, 0.0597],
        [0.0643, 0.0606],
        [0.0636, 0.0613]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.325816
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0018],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0004, 0.0012],
        [0.0001, 0.0002],
        [0.0005, 0.0010],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0652],
        [0.0573, 0.0680],
        [0.0636, 0.0612],
        [0.0612, 0.0637],
        [0.0683, 0.0571],
        [0.0662, 0.0588],
        [0.0566, 0.0689],
        [0.0649, 0.0600],
        [0.0621, 0.0627],
        [0.0648, 0.0601],
        [0.0616, 0.0633],
        [0.0638, 0.0611],
        [0.0597, 0.0653],
        [0.0642, 0.0607],
        [0.0647, 0.0602],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.344390
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0006, 0.0011],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0010],
        [0.0005, 0.0013],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1335, 0.1169],
        [0.1267, 0.1231],
        [0.1259, 0.1239],
        [0.1278, 0.1220],
        [0.1276, 0.1223],
        [0.1169, 0.1335],
        [0.1212, 0.1287],
        [0.1204, 0.1295]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.280351
acc:  0.51
Time taken to execute the en SA task with prompt type active, variation 2 and batchsize 16: 0:00:04.801718
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0005]], device='cuda:0') torch.Size([107, 2])
answers_probs just softmax dim 0: tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0014, 0.0018],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0003, 0.0008],
        [0.0007, 0.0010],
        [0.0006, 0.0022],
        [0.0006, 0.0013],
        [0.0004, 0.0011],
        [0.0007, 0.0014],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0010, 0.0015],
        [0.0002, 0.0004],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0626, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0697, 0.0559],
        [0.0579, 0.0672],
        [0.0620, 0.0628],
        [0.0637, 0.0611],
        [0.0626, 0.0622],
        [0.0611, 0.0637],
        [0.0697, 0.0559],
        [0.0562, 0.0692],
        [0.0618, 0.0629],
        [0.0603, 0.0645],
        [0.0625, 0.0623],
        [0.0597, 0.0652],
        [0.0590, 0.0660],
        [0.0685, 0.0568],
        [0.0622, 0.0626],
        [0.0631, 0.0617]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.402054
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0005, 0.0013],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0011],
        [0.0005, 0.0015],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0016],
        [0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0013],
        [0.0003, 0.0008],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0712, 0.0548],
        [0.0620, 0.0629],
        [0.0604, 0.0645],
        [0.0646, 0.0603],
        [0.0614, 0.0635],
        [0.0592, 0.0658],
        [0.0621, 0.0627],
        [0.0674, 0.0578],
        [0.0584, 0.0667],
        [0.0626, 0.0623],
        [0.0634, 0.0615],
        [0.0605, 0.0644],
        [0.0655, 0.0595],
        [0.0589, 0.0662],
        [0.0602, 0.0647],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.521314
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0012],
        [0.0002, 0.0005],
        [0.0005, 0.0012],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0014],
        [0.0003, 0.0006],
        [0.0006, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0007, 0.0011],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0624],
        [0.0598, 0.0653],
        [0.0613, 0.0636],
        [0.0581, 0.0671],
        [0.0606, 0.0644],
        [0.0611, 0.0638],
        [0.0610, 0.0639],
        [0.0645, 0.0604],
        [0.0616, 0.0633],
        [0.0641, 0.0608],
        [0.0653, 0.0597],
        [0.0650, 0.0600],
        [0.0616, 0.0633],
        [0.0641, 0.0609],
        [0.0674, 0.0579],
        [0.0618, 0.0631]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.388704
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0004, 0.0011],
        [0.0005, 0.0009],
        [0.0007, 0.0011],
        [0.0005, 0.0008],
        [0.0007, 0.0016],
        [0.0005, 0.0015],
        [0.0003, 0.0008],
        [0.0008, 0.0019],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0001, 0.0004],
        [0.0006, 0.0011],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0608],
        [0.0600, 0.0649],
        [0.0654, 0.0596],
        [0.0677, 0.0576],
        [0.0662, 0.0589],
        [0.0621, 0.0628],
        [0.0592, 0.0658],
        [0.0601, 0.0648],
        [0.0625, 0.0624],
        [0.0613, 0.0636],
        [0.0629, 0.0620],
        [0.0586, 0.0665],
        [0.0658, 0.0592],
        [0.0575, 0.0678],
        [0.0657, 0.0593],
        [0.0610, 0.0639]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.318091
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0009, 0.0013],
        [0.0004, 0.0009],
        [0.0007, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0014],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0005, 0.0011],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0004],
        [0.0002, 0.0007],
        [0.0005, 0.0017],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0621, 0.0626],
        [0.0676, 0.0576],
        [0.0626, 0.0622],
        [0.0690, 0.0564],
        [0.0618, 0.0629],
        [0.0589, 0.0660],
        [0.0621, 0.0626],
        [0.0616, 0.0631],
        [0.0628, 0.0620],
        [0.0609, 0.0639],
        [0.0584, 0.0666],
        [0.0616, 0.0631],
        [0.0732, 0.0531],
        [0.0572, 0.0680],
        [0.0573, 0.0679],
        [0.0628, 0.0620]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.347872
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0007, 0.0013],
        [0.0005, 0.0011],
        [0.0007, 0.0016],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0004, 0.0012],
        [0.0007, 0.0021],
        [0.0005, 0.0008],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0616],
        [0.0618, 0.0632],
        [0.0593, 0.0658],
        [0.0660, 0.0591],
        [0.0617, 0.0633],
        [0.0620, 0.0630],
        [0.0625, 0.0624],
        [0.0630, 0.0619],
        [0.0624, 0.0625],
        [0.0607, 0.0643],
        [0.0630, 0.0619],
        [0.0611, 0.0639],
        [0.0600, 0.0650],
        [0.0605, 0.0645],
        [0.0673, 0.0580],
        [0.0655, 0.0595]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.413069
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0001, 0.0003],
        [0.0004, 0.0009],
        [0.0001, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0011, 0.0021],
        [0.0006, 0.0017],
        [0.0002, 0.0007],
        [0.0005, 0.0012],
        [0.0004, 0.0010],
        [0.0004, 0.0010],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0005, 0.0007],
        [0.0003, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0662, 0.0589],
        [0.0621, 0.0628],
        [0.0624, 0.0625],
        [0.0589, 0.0662],
        [0.0615, 0.0634],
        [0.0642, 0.0607],
        [0.0653, 0.0597],
        [0.0613, 0.0636],
        [0.0602, 0.0648],
        [0.0614, 0.0635],
        [0.0623, 0.0626],
        [0.0624, 0.0625],
        [0.0604, 0.0646],
        [0.0622, 0.0627],
        [0.0714, 0.0546],
        [0.0581, 0.0671]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.414299
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0013],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0012],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0003, 0.0009],
        [0.0006, 0.0014],
        [0.0004, 0.0009],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0011],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0664, 0.0588],
        [0.0600, 0.0650],
        [0.0612, 0.0637],
        [0.0634, 0.0615],
        [0.0648, 0.0602],
        [0.0609, 0.0641],
        [0.0612, 0.0637],
        [0.0638, 0.0611],
        [0.0603, 0.0647],
        [0.0640, 0.0610],
        [0.0649, 0.0601],
        [0.0604, 0.0646],
        [0.0634, 0.0615],
        [0.0585, 0.0666],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.461121
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0013],
        [0.0007, 0.0016],
        [0.0002, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0012],
        [0.0003, 0.0009],
        [0.0003, 0.0009],
        [0.0005, 0.0017],
        [0.0004, 0.0008],
        [0.0004, 0.0011],
        [0.0006, 0.0010],
        [0.0003, 0.0007],
        [0.0008, 0.0011],
        [0.0002, 0.0006],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0616],
        [0.0626, 0.0622],
        [0.0635, 0.0614],
        [0.0609, 0.0639],
        [0.0641, 0.0607],
        [0.0580, 0.0671],
        [0.0609, 0.0639],
        [0.0576, 0.0677],
        [0.0570, 0.0683],
        [0.0634, 0.0615],
        [0.0610, 0.0638],
        [0.0676, 0.0577],
        [0.0628, 0.0620],
        [0.0703, 0.0554],
        [0.0620, 0.0628],
        [0.0649, 0.0600]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.396433
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0019],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0006, 0.0011],
        [0.0007, 0.0016],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0011],
        [0.0004, 0.0010],
        [0.0009, 0.0017],
        [0.0003, 0.0007],
        [0.0004, 0.0012],
        [0.0003, 0.0010],
        [0.0008, 0.0017],
        [0.0004, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0647],
        [0.0660, 0.0591],
        [0.0610, 0.0640],
        [0.0667, 0.0585],
        [0.0629, 0.0620],
        [0.0646, 0.0604],
        [0.0624, 0.0626],
        [0.0646, 0.0604],
        [0.0622, 0.0628],
        [0.0613, 0.0637],
        [0.0643, 0.0607],
        [0.0628, 0.0622],
        [0.0596, 0.0655],
        [0.0598, 0.0653],
        [0.0637, 0.0612],
        [0.0581, 0.0672]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.280459
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0002, 0.0006],
        [0.0007, 0.0015],
        [0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0007, 0.0015],
        [0.0004, 0.0007],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0616],
        [0.0651, 0.0599],
        [0.0651, 0.0599],
        [0.0614, 0.0636],
        [0.0621, 0.0628],
        [0.0625, 0.0624],
        [0.0635, 0.0614],
        [0.0564, 0.0692],
        [0.0620, 0.0629],
        [0.0647, 0.0603],
        [0.0655, 0.0595],
        [0.0597, 0.0653],
        [0.0591, 0.0660],
        [0.0631, 0.0618],
        [0.0636, 0.0613],
        [0.0629, 0.0620]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.277264
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0008, 0.0019],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0010],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0012],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0610],
        [0.0624, 0.0625],
        [0.0586, 0.0666],
        [0.0644, 0.0606],
        [0.0623, 0.0626],
        [0.0621, 0.0628],
        [0.0598, 0.0653],
        [0.0635, 0.0614],
        [0.0625, 0.0624],
        [0.0623, 0.0626],
        [0.0618, 0.0631],
        [0.0659, 0.0592],
        [0.0630, 0.0619],
        [0.0672, 0.0581],
        [0.0596, 0.0655],
        [0.0608, 0.0641]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.428972
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0001, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1237, 0.1262],
        [0.1283, 0.1217],
        [0.1242, 0.1257],
        [0.1232, 0.1268],
        [0.1298, 0.1203],
        [0.1244, 0.1255],
        [0.1254, 0.1246],
        [0.1209, 0.1291]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.173500
acc:  0.505
Time taken to execute the en SA task with prompt type active, variation 3 and batchsize 16: 0:00:04.847465
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([99, 2])
answers_probs just softmax dim 0: tensor([[0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101]], device='cuda:0')
tensor([[0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101],
        [0.0101, 0.0101]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0001],
        [0.0004, 0.0008],
        [0.0001, 0.0002],
        [0.0004, 0.0013],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0003, 0.0011],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0001, 0.0002],
        [0.0004, 0.0010],
        [0.0003, 0.0012],
        [0.0002, 0.0007],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0756, 0.0514],
        [0.0628, 0.0619],
        [0.0665, 0.0584],
        [0.0581, 0.0668],
        [0.0581, 0.0668],
        [0.0634, 0.0613],
        [0.0594, 0.0654],
        [0.0591, 0.0657],
        [0.0662, 0.0586],
        [0.0617, 0.0629],
        [0.0614, 0.0633],
        [0.0705, 0.0551],
        [0.0613, 0.0633],
        [0.0574, 0.0676],
        [0.0568, 0.0684],
        [0.0615, 0.0631]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.314559
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.1160e-04, 5.2786e-04],
        [4.1986e-04, 1.1778e-03],
        [3.1090e-04, 3.9601e-04],
        [2.7299e-04, 4.8661e-04],
        [3.9530e-04, 1.1530e-03],
        [5.1975e-04, 1.0338e-03],
        [2.3317e-04, 5.7268e-04],
        [7.5817e-05, 8.2970e-05],
        [3.6907e-04, 3.7789e-04],
        [3.0923e-04, 5.4264e-04],
        [1.4460e-04, 5.4598e-04],
        [2.4378e-04, 6.3229e-04],
        [2.0289e-04, 4.8685e-04],
        [2.8658e-04, 4.9925e-04],
        [2.5439e-04, 7.4196e-04],
        [2.1958e-04, 6.5041e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0648],
        [0.0585, 0.0664],
        [0.0698, 0.0556],
        [0.0644, 0.0603],
        [0.0580, 0.0669],
        [0.0628, 0.0618],
        [0.0600, 0.0646],
        [0.0725, 0.0535],
        [0.0737, 0.0527],
        [0.0646, 0.0600],
        [0.0554, 0.0700],
        [0.0594, 0.0653],
        [0.0603, 0.0643],
        [0.0647, 0.0599],
        [0.0580, 0.0669],
        [0.0579, 0.0671]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.526827
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0003, 0.0011],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0006, 0.0009],
        [0.0004, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0001, 0.0004],
        [0.0002, 0.0009],
        [0.0003, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0568, 0.0683],
        [0.0582, 0.0668],
        [0.0616, 0.0630],
        [0.0645, 0.0602],
        [0.0631, 0.0616],
        [0.0581, 0.0668],
        [0.0704, 0.0551],
        [0.0644, 0.0603],
        [0.0597, 0.0650],
        [0.0682, 0.0569],
        [0.0739, 0.0525],
        [0.0649, 0.0598],
        [0.0615, 0.0631],
        [0.0612, 0.0634],
        [0.0555, 0.0699],
        [0.0579, 0.0670]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.397772
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0001, 0.0002],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0001, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0001, 0.0002],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0651],
        [0.0725, 0.0536],
        [0.0674, 0.0577],
        [0.0589, 0.0660],
        [0.0570, 0.0682],
        [0.0569, 0.0683],
        [0.0574, 0.0677],
        [0.0603, 0.0645],
        [0.0622, 0.0625],
        [0.0591, 0.0657],
        [0.0648, 0.0600],
        [0.0644, 0.0603],
        [0.0637, 0.0610],
        [0.0665, 0.0585],
        [0.0607, 0.0640],
        [0.0684, 0.0568]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.439129
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0001, 0.0002],
        [0.0002, 0.0002],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0001, 0.0002],
        [0.0004, 0.0011],
        [0.0002, 0.0003],
        [0.0001, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0566, 0.0686],
        [0.0613, 0.0634],
        [0.0559, 0.0695],
        [0.0626, 0.0621],
        [0.0672, 0.0578],
        [0.0715, 0.0543],
        [0.0580, 0.0670],
        [0.0610, 0.0637],
        [0.0654, 0.0594],
        [0.0602, 0.0645],
        [0.0699, 0.0556],
        [0.0561, 0.0692],
        [0.0662, 0.0587],
        [0.0652, 0.0596],
        [0.0590, 0.0659],
        [0.0638, 0.0609]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.325182
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0002, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0001, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0001, 0.0004],
        [0.0004, 0.0009],
        [0.0006, 0.0014],
        [0.0003, 0.0010],
        [0.0002, 0.0004],
        [0.0001, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0656],
        [0.0599, 0.0651],
        [0.0636, 0.0613],
        [0.0653, 0.0597],
        [0.0614, 0.0635],
        [0.0579, 0.0673],
        [0.0620, 0.0629],
        [0.0700, 0.0556],
        [0.0607, 0.0642],
        [0.0639, 0.0610],
        [0.0627, 0.0622],
        [0.0599, 0.0651],
        [0.0679, 0.0574],
        [0.0600, 0.0650],
        [0.0625, 0.0624],
        [0.0630, 0.0619]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.384900
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0003],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0009, 0.0023],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0004, 0.0005],
        [0.0009, 0.0019],
        [0.0003, 0.0010],
        [0.0001, 0.0002],
        [0.0002, 0.0008],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0603],
        [0.0589, 0.0659],
        [0.0571, 0.0680],
        [0.0590, 0.0658],
        [0.0598, 0.0650],
        [0.0627, 0.0620],
        [0.0680, 0.0571],
        [0.0653, 0.0595],
        [0.0656, 0.0592],
        [0.0612, 0.0635],
        [0.0688, 0.0565],
        [0.0622, 0.0624],
        [0.0573, 0.0678],
        [0.0665, 0.0584],
        [0.0534, 0.0728],
        [0.0697, 0.0557]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.306073
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0002, 0.0011],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0713, 0.0546],
        [0.0570, 0.0683],
        [0.0609, 0.0639],
        [0.0665, 0.0585],
        [0.0625, 0.0623],
        [0.0671, 0.0580],
        [0.0629, 0.0619],
        [0.0627, 0.0621],
        [0.0643, 0.0605],
        [0.0603, 0.0645],
        [0.0614, 0.0634],
        [0.0606, 0.0642],
        [0.0645, 0.0603],
        [0.0622, 0.0626],
        [0.0556, 0.0700],
        [0.0602, 0.0646]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.430183
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0001, 0.0001],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0583, 0.0667],
        [0.0665, 0.0585],
        [0.0590, 0.0660],
        [0.0633, 0.0615],
        [0.0589, 0.0661],
        [0.0705, 0.0552],
        [0.0615, 0.0633],
        [0.0725, 0.0536],
        [0.0606, 0.0642],
        [0.0627, 0.0620],
        [0.0593, 0.0656],
        [0.0638, 0.0610],
        [0.0584, 0.0666],
        [0.0591, 0.0658],
        [0.0622, 0.0625],
        [0.0634, 0.0614]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.346941
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0003, 0.0009],
        [0.0002, 0.0007],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0001, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0009],
        [0.0003, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0002, 0.0003],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0611],
        [0.0607, 0.0640],
        [0.0577, 0.0673],
        [0.0581, 0.0669],
        [0.0583, 0.0666],
        [0.0569, 0.0682],
        [0.0598, 0.0650],
        [0.0660, 0.0589],
        [0.0682, 0.0570],
        [0.0706, 0.0551],
        [0.0598, 0.0650],
        [0.0593, 0.0655],
        [0.0645, 0.0602],
        [0.0581, 0.0669],
        [0.0672, 0.0578],
        [0.0711, 0.0547]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.346754
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0016],
        [0.0001, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0004, 0.0015],
        [0.0004, 0.0010],
        [0.0002, 0.0002],
        [0.0002, 0.0004],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0568, 0.0685],
        [0.0587, 0.0662],
        [0.0621, 0.0627],
        [0.0663, 0.0586],
        [0.0607, 0.0641],
        [0.0662, 0.0587],
        [0.0649, 0.0599],
        [0.0583, 0.0667],
        [0.0600, 0.0648],
        [0.0628, 0.0619],
        [0.0632, 0.0615],
        [0.0577, 0.0674],
        [0.0587, 0.0662],
        [0.0729, 0.0533],
        [0.0628, 0.0619],
        [0.0678, 0.0574]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.317131
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0003, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0008],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0001, 0.0006],
        [0.0005, 0.0013],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0679, 0.0573],
        [0.0605, 0.0643],
        [0.0617, 0.0630],
        [0.0620, 0.0628],
        [0.0663, 0.0586],
        [0.0574, 0.0678],
        [0.0622, 0.0625],
        [0.0641, 0.0607],
        [0.0601, 0.0647],
        [0.0661, 0.0589],
        [0.0558, 0.0697],
        [0.0601, 0.0647],
        [0.0600, 0.0648],
        [0.0603, 0.0645],
        [0.0624, 0.0623],
        [0.0730, 0.0533]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.307559
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[1.6809e-04, 3.1018e-04],
        [5.6410e-04, 1.4076e-03],
        [2.3973e-04, 4.3392e-04],
        [7.0393e-05, 1.2159e-04],
        [3.3689e-04, 1.0138e-03],
        [1.0782e-04, 1.9753e-04],
        [6.0129e-04, 7.8392e-04],
        [1.5903e-04, 3.4189e-04]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1264, 0.1233],
        [0.1184, 0.1316],
        [0.1269, 0.1228],
        [0.1283, 0.1215],
        [0.1141, 0.1366],
        [0.1266, 0.1231],
        [0.1372, 0.1135],
        [0.1221, 0.1276]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.218774
acc:  0.49
Time taken to execute the en SA task with prompt type active, variation 4 and batchsize 16: 0:00:04.686226
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([114, 2])
answers_probs just softmax dim 0: tensor([[0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088]], device='cuda:0')
tensor([[0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0006, 0.0014],
        [0.0010, 0.0015],
        [0.0004, 0.0010],
        [0.0006, 0.0012],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0663, 0.0588],
        [0.0614, 0.0636],
        [0.0597, 0.0653],
        [0.0630, 0.0620],
        [0.0636, 0.0613],
        [0.0636, 0.0613],
        [0.0581, 0.0672],
        [0.0648, 0.0602],
        [0.0623, 0.0626],
        [0.0617, 0.0633],
        [0.0662, 0.0589],
        [0.0592, 0.0659],
        [0.0629, 0.0620],
        [0.0630, 0.0620],
        [0.0600, 0.0650],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.528200
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0007, 0.0011],
        [0.0004, 0.0012],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0011, 0.0017],
        [0.0003, 0.0007],
        [0.0008, 0.0012],
        [0.0003, 0.0009],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0615],
        [0.0636, 0.0613],
        [0.0617, 0.0632],
        [0.0608, 0.0641],
        [0.0594, 0.0656],
        [0.0649, 0.0601],
        [0.0616, 0.0633],
        [0.0640, 0.0609],
        [0.0576, 0.0676],
        [0.0636, 0.0613],
        [0.0670, 0.0582],
        [0.0651, 0.0599],
        [0.0592, 0.0659],
        [0.0676, 0.0577],
        [0.0580, 0.0672],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.324214
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0009, 0.0011],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0608, 0.0642],
        [0.0602, 0.0648],
        [0.0622, 0.0627],
        [0.0618, 0.0631],
        [0.0593, 0.0658],
        [0.0697, 0.0559],
        [0.0588, 0.0663],
        [0.0655, 0.0595],
        [0.0630, 0.0619],
        [0.0614, 0.0636],
        [0.0644, 0.0605],
        [0.0621, 0.0628],
        [0.0625, 0.0624],
        [0.0634, 0.0615],
        [0.0613, 0.0637]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.428488
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0005, 0.0010],
        [0.0007, 0.0011],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0008, 0.0011],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0662],
        [0.0638, 0.0611],
        [0.0603, 0.0647],
        [0.0637, 0.0612],
        [0.0627, 0.0622],
        [0.0620, 0.0628],
        [0.0649, 0.0601],
        [0.0589, 0.0662],
        [0.0614, 0.0635],
        [0.0598, 0.0652],
        [0.0671, 0.0581],
        [0.0618, 0.0631],
        [0.0613, 0.0636],
        [0.0595, 0.0656],
        [0.0642, 0.0607],
        [0.0698, 0.0559]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.395958
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0010],
        [0.0002, 0.0004],
        [0.0004, 0.0011],
        [0.0006, 0.0012],
        [0.0003, 0.0008],
        [0.0006, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0006, 0.0018],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0637],
        [0.0614, 0.0635],
        [0.0629, 0.0620],
        [0.0602, 0.0648],
        [0.0636, 0.0613],
        [0.0622, 0.0627],
        [0.0583, 0.0669],
        [0.0628, 0.0621],
        [0.0607, 0.0642],
        [0.0690, 0.0565],
        [0.0625, 0.0623],
        [0.0627, 0.0622],
        [0.0649, 0.0601],
        [0.0635, 0.0614],
        [0.0580, 0.0673],
        [0.0661, 0.0590]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.318987
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0003],
        [0.0005, 0.0009],
        [0.0008, 0.0014],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0009, 0.0016],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0006, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0633],
        [0.0717, 0.0544],
        [0.0622, 0.0626],
        [0.0629, 0.0620],
        [0.0590, 0.0660],
        [0.0624, 0.0624],
        [0.0632, 0.0616],
        [0.0645, 0.0604],
        [0.0618, 0.0631],
        [0.0628, 0.0621],
        [0.0639, 0.0610],
        [0.0596, 0.0654],
        [0.0560, 0.0696],
        [0.0666, 0.0585],
        [0.0599, 0.0650],
        [0.0621, 0.0627]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.353839
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0014],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0002, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0609, 0.0640],
        [0.0627, 0.0622],
        [0.0636, 0.0613],
        [0.0647, 0.0603],
        [0.0642, 0.0608],
        [0.0590, 0.0661],
        [0.0651, 0.0599],
        [0.0570, 0.0684],
        [0.0651, 0.0599],
        [0.0631, 0.0619],
        [0.0606, 0.0643],
        [0.0656, 0.0594],
        [0.0597, 0.0653],
        [0.0633, 0.0616],
        [0.0611, 0.0638],
        [0.0642, 0.0608]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.464577
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0007, 0.0016],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0657],
        [0.0619, 0.0630],
        [0.0607, 0.0643],
        [0.0634, 0.0616],
        [0.0583, 0.0669],
        [0.0648, 0.0602],
        [0.0662, 0.0589],
        [0.0616, 0.0633],
        [0.0645, 0.0605],
        [0.0628, 0.0621],
        [0.0603, 0.0647],
        [0.0646, 0.0604],
        [0.0618, 0.0631],
        [0.0604, 0.0646],
        [0.0659, 0.0592],
        [0.0632, 0.0617]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.352627
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0005],
        [0.0005, 0.0015],
        [0.0006, 0.0009],
        [0.0002, 0.0005],
        [0.0006, 0.0011],
        [0.0004, 0.0005],
        [0.0005, 0.0009],
        [0.0007, 0.0014],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0663],
        [0.0599, 0.0650],
        [0.0612, 0.0637],
        [0.0628, 0.0620],
        [0.0648, 0.0601],
        [0.0628, 0.0620],
        [0.0623, 0.0626],
        [0.0676, 0.0576],
        [0.0564, 0.0691],
        [0.0660, 0.0590],
        [0.0572, 0.0680],
        [0.0614, 0.0635],
        [0.0684, 0.0569],
        [0.0627, 0.0621],
        [0.0620, 0.0628],
        [0.0656, 0.0594]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.355084
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0013, 0.0017],
        [0.0002, 0.0005],
        [0.0004, 0.0012],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0008, 0.0017],
        [0.0006, 0.0013],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0626, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0626],
        [0.0635, 0.0614],
        [0.0628, 0.0621],
        [0.0593, 0.0657],
        [0.0610, 0.0639],
        [0.0684, 0.0570],
        [0.0623, 0.0626],
        [0.0565, 0.0690],
        [0.0641, 0.0609],
        [0.0628, 0.0621],
        [0.0615, 0.0634],
        [0.0616, 0.0633],
        [0.0615, 0.0634],
        [0.0640, 0.0610],
        [0.0636, 0.0613],
        [0.0647, 0.0603]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.412331
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0011],
        [0.0004, 0.0007],
        [0.0002, 0.0007],
        [0.0004, 0.0013],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0006, 0.0019],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0609, 0.0640],
        [0.0640, 0.0609],
        [0.0646, 0.0603],
        [0.0615, 0.0634],
        [0.0662, 0.0589],
        [0.0592, 0.0658],
        [0.0577, 0.0676],
        [0.0659, 0.0591],
        [0.0648, 0.0601],
        [0.0612, 0.0637],
        [0.0611, 0.0637],
        [0.0572, 0.0682],
        [0.0652, 0.0598],
        [0.0626, 0.0623],
        [0.0607, 0.0643],
        [0.0673, 0.0579]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.344959
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0007, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0007, 0.0016],
        [0.0007, 0.0009],
        [0.0005, 0.0011],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0006, 0.0009],
        [0.0002, 0.0005],
        [0.0006, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0597, 0.0653],
        [0.0683, 0.0571],
        [0.0685, 0.0569],
        [0.0629, 0.0620],
        [0.0588, 0.0663],
        [0.0602, 0.0648],
        [0.0663, 0.0587],
        [0.0605, 0.0644],
        [0.0614, 0.0634],
        [0.0608, 0.0641],
        [0.0646, 0.0603],
        [0.0605, 0.0644],
        [0.0630, 0.0619],
        [0.0595, 0.0655],
        [0.0607, 0.0642]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.247290
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0012],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1220, 0.1280],
        [0.1290, 0.1211],
        [0.1273, 0.1226],
        [0.1264, 0.1235],
        [0.1186, 0.1317],
        [0.1260, 0.1240],
        [0.1283, 0.1217],
        [0.1224, 0.1275]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.215855
acc:  0.525
Time taken to execute the en SA task with prompt type active, variation 5 and batchsize 16: 0:00:04.765893
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([109, 2])
answers_probs just softmax dim 0: tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0001, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0010],
        [0.0006, 0.0013],
        [0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0006, 0.0011],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0634],
        [0.0632, 0.0616],
        [0.0627, 0.0622],
        [0.0598, 0.0652],
        [0.0638, 0.0611],
        [0.0662, 0.0588],
        [0.0627, 0.0622],
        [0.0665, 0.0586],
        [0.0656, 0.0594],
        [0.0632, 0.0616],
        [0.0561, 0.0695],
        [0.0611, 0.0638],
        [0.0587, 0.0664],
        [0.0640, 0.0609],
        [0.0650, 0.0599],
        [0.0597, 0.0653]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.324899
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0001, 0.0003],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0001, 0.0003],
        [0.0003, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0587, 0.0664],
        [0.0614, 0.0635],
        [0.0649, 0.0600],
        [0.0631, 0.0617],
        [0.0642, 0.0607],
        [0.0615, 0.0634],
        [0.0698, 0.0558],
        [0.0630, 0.0618],
        [0.0605, 0.0644],
        [0.0607, 0.0642],
        [0.0659, 0.0592],
        [0.0619, 0.0630],
        [0.0627, 0.0621],
        [0.0661, 0.0589],
        [0.0590, 0.0660],
        [0.0567, 0.0688]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.349452
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0004],
        [0.0001, 0.0003],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0003],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0001, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0587, 0.0663],
        [0.0613, 0.0635],
        [0.0654, 0.0595],
        [0.0595, 0.0654],
        [0.0630, 0.0618],
        [0.0723, 0.0539],
        [0.0625, 0.0623],
        [0.0612, 0.0636],
        [0.0608, 0.0641],
        [0.0581, 0.0670],
        [0.0571, 0.0682],
        [0.0603, 0.0646],
        [0.0645, 0.0604],
        [0.0619, 0.0629],
        [0.0681, 0.0572],
        [0.0654, 0.0595]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.417174
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[3.7622e-04, 7.6008e-04],
        [2.0814e-04, 4.4417e-04],
        [1.3947e-04, 4.7541e-04],
        [2.5010e-04, 6.9046e-04],
        [3.3951e-04, 6.9094e-04],
        [2.8467e-04, 6.3610e-04],
        [2.7895e-04, 6.7425e-04],
        [9.3281e-05, 1.7977e-04],
        [2.6345e-04, 5.8460e-04],
        [2.0111e-04, 2.7490e-04],
        [2.5463e-04, 4.8327e-04],
        [4.1437e-04, 1.3485e-03],
        [4.4703e-04, 7.6056e-04],
        [2.5177e-04, 5.2071e-04],
        [2.8801e-04, 4.9782e-04],
        [1.9968e-04, 4.7135e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0616],
        [0.0625, 0.0624],
        [0.0570, 0.0684],
        [0.0593, 0.0658],
        [0.0631, 0.0617],
        [0.0619, 0.0630],
        [0.0609, 0.0640],
        [0.0639, 0.0610],
        [0.0620, 0.0629],
        [0.0693, 0.0562],
        [0.0641, 0.0608],
        [0.0575, 0.0678],
        [0.0658, 0.0593],
        [0.0629, 0.0619],
        [0.0655, 0.0595],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.351234
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.4772e-04, 6.0844e-04],
        [1.4389e-04, 2.9993e-04],
        [8.3029e-05, 1.8060e-04],
        [2.1517e-04, 4.0817e-04],
        [2.3949e-04, 6.6662e-04],
        [3.1090e-04, 8.5831e-04],
        [1.2457e-04, 2.1017e-04],
        [3.1829e-04, 8.6498e-04],
        [9.2936e-04, 1.5316e-03],
        [2.1493e-04, 5.2786e-04],
        [5.9938e-04, 1.2989e-03],
        [3.8075e-04, 9.7227e-04],
        [2.3687e-04, 7.4720e-04],
        [2.2888e-04, 4.5514e-04],
        [3.0398e-04, 6.2370e-04],
        [3.1281e-04, 6.4707e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0637],
        [0.0634, 0.0615],
        [0.0629, 0.0621],
        [0.0648, 0.0602],
        [0.0597, 0.0653],
        [0.0598, 0.0652],
        [0.0666, 0.0586],
        [0.0600, 0.0650],
        [0.0669, 0.0583],
        [0.0613, 0.0637],
        [0.0629, 0.0620],
        [0.0608, 0.0642],
        [0.0584, 0.0668],
        [0.0641, 0.0609],
        [0.0637, 0.0613],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.462003
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0012],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0005, 0.0011],
        [0.0001, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0610, 0.0638],
        [0.0627, 0.0621],
        [0.0586, 0.0664],
        [0.0628, 0.0620],
        [0.0578, 0.0674],
        [0.0696, 0.0560],
        [0.0619, 0.0629],
        [0.0606, 0.0643],
        [0.0679, 0.0574],
        [0.0604, 0.0645],
        [0.0571, 0.0682],
        [0.0632, 0.0616],
        [0.0669, 0.0583],
        [0.0648, 0.0601],
        [0.0627, 0.0621],
        [0.0620, 0.0628]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.353861
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0002, 0.0007],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0005, 0.0007],
        [0.0001, 0.0003],
        [0.0002, 0.0003],
        [0.0001, 0.0002],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0629],
        [0.0573, 0.0680],
        [0.0610, 0.0639],
        [0.0570, 0.0684],
        [0.0616, 0.0633],
        [0.0648, 0.0602],
        [0.0616, 0.0633],
        [0.0681, 0.0572],
        [0.0608, 0.0641],
        [0.0615, 0.0634],
        [0.0622, 0.0627],
        [0.0667, 0.0584],
        [0.0637, 0.0612],
        [0.0657, 0.0593],
        [0.0619, 0.0629],
        [0.0640, 0.0609]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.545591
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0012],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0599],
        [0.0617, 0.0633],
        [0.0595, 0.0655],
        [0.0660, 0.0591],
        [0.0632, 0.0617],
        [0.0647, 0.0603],
        [0.0617, 0.0632],
        [0.0589, 0.0662],
        [0.0621, 0.0629],
        [0.0661, 0.0590],
        [0.0592, 0.0659],
        [0.0640, 0.0610],
        [0.0623, 0.0627],
        [0.0613, 0.0636],
        [0.0625, 0.0625],
        [0.0617, 0.0632]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.327137
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.4891e-04, 4.6158e-04],
        [3.4595e-04, 7.2098e-04],
        [8.7559e-05, 2.8586e-04],
        [1.5211e-04, 2.7752e-04],
        [3.8910e-04, 6.1703e-04],
        [2.3115e-04, 5.5885e-04],
        [3.1018e-04, 7.9203e-04],
        [3.6025e-04, 5.6696e-04],
        [2.6417e-04, 5.5504e-04],
        [2.5582e-04, 6.6900e-04],
        [2.5678e-04, 5.8317e-04],
        [1.3530e-04, 2.9325e-04],
        [1.9884e-04, 5.4026e-04],
        [2.6059e-04, 4.4680e-04],
        [2.7180e-04, 5.3215e-04],
        [3.1877e-04, 7.0190e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0644, 0.0606],
        [0.0627, 0.0622],
        [0.0573, 0.0680],
        [0.0646, 0.0604],
        [0.0668, 0.0584],
        [0.0608, 0.0642],
        [0.0601, 0.0649],
        [0.0669, 0.0583],
        [0.0626, 0.0623],
        [0.0598, 0.0652],
        [0.0616, 0.0633],
        [0.0622, 0.0627],
        [0.0593, 0.0657],
        [0.0655, 0.0595],
        [0.0636, 0.0613],
        [0.0620, 0.0629]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.346236
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0621],
        [0.0620, 0.0629],
        [0.0630, 0.0619],
        [0.0703, 0.0555],
        [0.0602, 0.0648],
        [0.0640, 0.0610],
        [0.0593, 0.0657],
        [0.0616, 0.0633],
        [0.0624, 0.0625],
        [0.0626, 0.0623],
        [0.0624, 0.0625],
        [0.0620, 0.0629],
        [0.0614, 0.0636],
        [0.0636, 0.0613],
        [0.0641, 0.0609],
        [0.0583, 0.0669]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.412109
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0005, 0.0013],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0011],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0001, 0.0003],
        [0.0003, 0.0006],
        [0.0001, 0.0003],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0593],
        [0.0611, 0.0638],
        [0.0643, 0.0606],
        [0.0621, 0.0628],
        [0.0620, 0.0629],
        [0.0630, 0.0619],
        [0.0637, 0.0612],
        [0.0605, 0.0644],
        [0.0678, 0.0575],
        [0.0570, 0.0684],
        [0.0627, 0.0622],
        [0.0628, 0.0621],
        [0.0615, 0.0634],
        [0.0616, 0.0633],
        [0.0591, 0.0660],
        [0.0650, 0.0600]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.433065
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0006, 0.0013],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0613, 0.0636],
        [0.0590, 0.0661],
        [0.0617, 0.0632],
        [0.0635, 0.0614],
        [0.0635, 0.0614],
        [0.0615, 0.0634],
        [0.0603, 0.0647],
        [0.0608, 0.0641],
        [0.0603, 0.0647],
        [0.0659, 0.0591],
        [0.0683, 0.0571],
        [0.0601, 0.0649],
        [0.0621, 0.0628],
        [0.0615, 0.0634],
        [0.0683, 0.0571]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.395409
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0015],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0001, 0.0003]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1300, 0.1201],
        [0.1237, 0.1262],
        [0.1293, 0.1207],
        [0.1278, 0.1221],
        [0.1168, 0.1336],
        [0.1274, 0.1225],
        [0.1190, 0.1312],
        [0.1261, 0.1237]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.151246
acc:  0.545
Time taken to execute the en SA task with prompt type active, variation 6 and batchsize 16: 0:00:04.893049
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_6']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([156, 2])
answers_probs just softmax dim 0: tensor([[0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064]], device='cuda:0')
tensor([[0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064],
        [0.0064, 0.0064]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 7 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0567, 0.0687],
        [0.0614, 0.0636],
        [0.0620, 0.0629],
        [0.0637, 0.0612],
        [0.0598, 0.0652],
        [0.0656, 0.0594],
        [0.0649, 0.0601],
        [0.0584, 0.0668],
        [0.0619, 0.0630],
        [0.0634, 0.0616],
        [0.0645, 0.0604],
        [0.0655, 0.0595],
        [0.0645, 0.0604],
        [0.0635, 0.0614],
        [0.0631, 0.0618],
        [0.0611, 0.0638]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.401662
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0008, 0.0019],
        [0.0005, 0.0013],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0005],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0644],
        [0.0594, 0.0655],
        [0.0600, 0.0648],
        [0.0578, 0.0674],
        [0.0579, 0.0672],
        [0.0632, 0.0616],
        [0.0646, 0.0602],
        [0.0607, 0.0641],
        [0.0702, 0.0555],
        [0.0616, 0.0632],
        [0.0626, 0.0622],
        [0.0702, 0.0555],
        [0.0585, 0.0665],
        [0.0606, 0.0642],
        [0.0689, 0.0564],
        [0.0634, 0.0614]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.417796
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0004, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0008],
        [0.0006, 0.0010],
        [0.0001, 0.0003],
        [0.0006, 0.0010],
        [0.0003, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0663],
        [0.0658, 0.0592],
        [0.0652, 0.0598],
        [0.0592, 0.0658],
        [0.0642, 0.0608],
        [0.0613, 0.0636],
        [0.0645, 0.0604],
        [0.0631, 0.0618],
        [0.0595, 0.0655],
        [0.0688, 0.0567],
        [0.0600, 0.0649],
        [0.0638, 0.0611],
        [0.0631, 0.0618],
        [0.0629, 0.0620],
        [0.0576, 0.0677],
        [0.0621, 0.0627]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.419769
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0006, 0.0011],
        [0.0005, 0.0007],
        [0.0006, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0632],
        [0.0603, 0.0646],
        [0.0621, 0.0628],
        [0.0661, 0.0590],
        [0.0568, 0.0687],
        [0.0603, 0.0646],
        [0.0641, 0.0608],
        [0.0646, 0.0603],
        [0.0600, 0.0650],
        [0.0600, 0.0650],
        [0.0669, 0.0583],
        [0.0637, 0.0612],
        [0.0666, 0.0585],
        [0.0657, 0.0593],
        [0.0604, 0.0645],
        [0.0607, 0.0643]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.579437
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0008, 0.0009],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0656],
        [0.0585, 0.0666],
        [0.0626, 0.0622],
        [0.0610, 0.0639],
        [0.0683, 0.0570],
        [0.0640, 0.0609],
        [0.0587, 0.0664],
        [0.0613, 0.0636],
        [0.0644, 0.0605],
        [0.0624, 0.0625],
        [0.0606, 0.0643],
        [0.0622, 0.0627],
        [0.0683, 0.0571],
        [0.0605, 0.0644],
        [0.0624, 0.0625],
        [0.0652, 0.0597]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.483730
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0003, 0.0005],
        [0.0007, 0.0011],
        [0.0007, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0007, 0.0009],
        [0.0004, 0.0006],
        [0.0007, 0.0009],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0621, 0.0629],
        [0.0612, 0.0638],
        [0.0631, 0.0618],
        [0.0637, 0.0613],
        [0.0642, 0.0608],
        [0.0599, 0.0652],
        [0.0651, 0.0599],
        [0.0658, 0.0593],
        [0.0664, 0.0588],
        [0.0613, 0.0637],
        [0.0644, 0.0606],
        [0.0604, 0.0646],
        [0.0615, 0.0634],
        [0.0588, 0.0664],
        [0.0622, 0.0627],
        [0.0601, 0.0649]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.399527
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0006, 0.0010],
        [0.0002, 0.0003],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0011, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0595, 0.0655],
        [0.0598, 0.0652],
        [0.0654, 0.0596],
        [0.0608, 0.0641],
        [0.0579, 0.0674],
        [0.0620, 0.0629],
        [0.0663, 0.0588],
        [0.0643, 0.0606],
        [0.0609, 0.0640],
        [0.0625, 0.0624],
        [0.0651, 0.0599],
        [0.0620, 0.0629],
        [0.0611, 0.0638],
        [0.0600, 0.0650],
        [0.0652, 0.0598],
        [0.0671, 0.0581]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.395564
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0014],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0007, 0.0013],
        [0.0007, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0655],
        [0.0686, 0.0568],
        [0.0596, 0.0653],
        [0.0610, 0.0638],
        [0.0628, 0.0620],
        [0.0581, 0.0670],
        [0.0613, 0.0635],
        [0.0584, 0.0666],
        [0.0617, 0.0631],
        [0.0705, 0.0552],
        [0.0597, 0.0652],
        [0.0649, 0.0600],
        [0.0642, 0.0606],
        [0.0588, 0.0662],
        [0.0692, 0.0562],
        [0.0618, 0.0630]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.434947
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0005, 0.0007],
        [0.0005, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0003],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0646],
        [0.0622, 0.0627],
        [0.0642, 0.0607],
        [0.0613, 0.0636],
        [0.0604, 0.0645],
        [0.0615, 0.0634],
        [0.0582, 0.0670],
        [0.0635, 0.0614],
        [0.0631, 0.0618],
        [0.0642, 0.0607],
        [0.0659, 0.0591],
        [0.0604, 0.0645],
        [0.0692, 0.0563],
        [0.0647, 0.0603],
        [0.0620, 0.0629],
        [0.0588, 0.0663]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.439433
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0006, 0.0010],
        [0.0004, 0.0008],
        [0.0006, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0648],
        [0.0588, 0.0663],
        [0.0632, 0.0617],
        [0.0610, 0.0639],
        [0.0644, 0.0606],
        [0.0615, 0.0635],
        [0.0705, 0.0553],
        [0.0625, 0.0625],
        [0.0630, 0.0619],
        [0.0618, 0.0631],
        [0.0639, 0.0610],
        [0.0623, 0.0626],
        [0.0609, 0.0640],
        [0.0606, 0.0644],
        [0.0623, 0.0626],
        [0.0630, 0.0619]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.464593
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0007, 0.0010],
        [0.0004, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0007, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0007],
        [0.0006, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0630],
        [0.0654, 0.0596],
        [0.0648, 0.0602],
        [0.0639, 0.0611],
        [0.0627, 0.0622],
        [0.0589, 0.0662],
        [0.0618, 0.0631],
        [0.0661, 0.0590],
        [0.0593, 0.0658],
        [0.0619, 0.0630],
        [0.0656, 0.0595],
        [0.0592, 0.0659],
        [0.0634, 0.0615],
        [0.0585, 0.0666],
        [0.0654, 0.0596],
        [0.0612, 0.0638]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.436036
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0588],
        [0.0593, 0.0657],
        [0.0608, 0.0641],
        [0.0633, 0.0616],
        [0.0651, 0.0599],
        [0.0663, 0.0588],
        [0.0588, 0.0664],
        [0.0638, 0.0611],
        [0.0603, 0.0647],
        [0.0660, 0.0591],
        [0.0613, 0.0636],
        [0.0591, 0.0660],
        [0.0636, 0.0613],
        [0.0598, 0.0652],
        [0.0617, 0.0632],
        [0.0644, 0.0605]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.484585
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1298, 0.1203],
        [0.1229, 0.1271],
        [0.1201, 0.1300],
        [0.1235, 0.1264],
        [0.1258, 0.1241],
        [0.1256, 0.1244],
        [0.1281, 0.1219],
        [0.1242, 0.1258]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.245592
acc:  0.55
Time taken to execute the en SA task with prompt type active, variation 7 and batchsize 16: 0:00:05.625843
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_7']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([127, 2])
answers_probs just softmax dim 0: tensor([[0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079]], device='cuda:0')
tensor([[0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 8 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0008, 0.0013],
        [0.0004, 0.0013],
        [0.0005, 0.0013],
        [0.0007, 0.0012],
        [0.0007, 0.0012],
        [0.0006, 0.0014],
        [0.0004, 0.0008],
        [0.0006, 0.0014],
        [0.0004, 0.0007],
        [0.0004, 0.0014],
        [0.0005, 0.0012],
        [0.0007, 0.0014],
        [0.0004, 0.0006],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0621],
        [0.0604, 0.0645],
        [0.0669, 0.0583],
        [0.0566, 0.0689],
        [0.0598, 0.0651],
        [0.0646, 0.0603],
        [0.0656, 0.0594],
        [0.0619, 0.0630],
        [0.0631, 0.0618],
        [0.0622, 0.0626],
        [0.0643, 0.0606],
        [0.0566, 0.0688],
        [0.0611, 0.0638],
        [0.0630, 0.0619],
        [0.0683, 0.0571],
        [0.0630, 0.0619]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.425507
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0006, 0.0012],
        [0.0007, 0.0014],
        [0.0008, 0.0016],
        [0.0004, 0.0011],
        [0.0006, 0.0010],
        [0.0006, 0.0011],
        [0.0005, 0.0013],
        [0.0004, 0.0010],
        [0.0006, 0.0012],
        [0.0005, 0.0011],
        [0.0008, 0.0019],
        [0.0005, 0.0010],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0562, 0.0692],
        [0.0693, 0.0562],
        [0.0659, 0.0591],
        [0.0619, 0.0629],
        [0.0626, 0.0622],
        [0.0614, 0.0634],
        [0.0570, 0.0683],
        [0.0652, 0.0598],
        [0.0639, 0.0610],
        [0.0592, 0.0658],
        [0.0595, 0.0654],
        [0.0632, 0.0616],
        [0.0617, 0.0631],
        [0.0603, 0.0646],
        [0.0633, 0.0615],
        [0.0694, 0.0561]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.393263
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0004, 0.0009],
        [0.0006, 0.0014],
        [0.0004, 0.0010],
        [0.0005, 0.0010],
        [0.0004, 0.0010],
        [0.0005, 0.0013],
        [0.0008, 0.0016],
        [0.0004, 0.0012],
        [0.0008, 0.0015],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0011],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0611],
        [0.0613, 0.0637],
        [0.0633, 0.0616],
        [0.0626, 0.0624],
        [0.0619, 0.0631],
        [0.0625, 0.0625],
        [0.0638, 0.0612],
        [0.0617, 0.0633],
        [0.0601, 0.0649],
        [0.0639, 0.0611],
        [0.0599, 0.0652],
        [0.0656, 0.0595],
        [0.0662, 0.0590],
        [0.0603, 0.0647],
        [0.0620, 0.0630],
        [0.0612, 0.0638]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.246819
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0011],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0007, 0.0013],
        [0.0005, 0.0013],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0010],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0637],
        [0.0649, 0.0601],
        [0.0643, 0.0607],
        [0.0666, 0.0586],
        [0.0588, 0.0664],
        [0.0620, 0.0630],
        [0.0602, 0.0648],
        [0.0644, 0.0606],
        [0.0605, 0.0645],
        [0.0637, 0.0612],
        [0.0606, 0.0644],
        [0.0624, 0.0625],
        [0.0633, 0.0617],
        [0.0628, 0.0621],
        [0.0645, 0.0605],
        [0.0599, 0.0652]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.439768
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0014],
        [0.0007, 0.0021],
        [0.0004, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0005, 0.0010],
        [0.0006, 0.0018],
        [0.0007, 0.0012],
        [0.0007, 0.0011],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0631],
        [0.0588, 0.0663],
        [0.0654, 0.0596],
        [0.0619, 0.0629],
        [0.0616, 0.0632],
        [0.0677, 0.0576],
        [0.0595, 0.0655],
        [0.0621, 0.0627],
        [0.0639, 0.0610],
        [0.0589, 0.0661],
        [0.0665, 0.0586],
        [0.0664, 0.0587],
        [0.0630, 0.0619],
        [0.0571, 0.0682],
        [0.0654, 0.0596],
        [0.0600, 0.0650]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.410692
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0006, 0.0012],
        [0.0005, 0.0011],
        [0.0005, 0.0011],
        [0.0004, 0.0011],
        [0.0004, 0.0005],
        [0.0004, 0.0009],
        [0.0005, 0.0011],
        [0.0005, 0.0011],
        [0.0008, 0.0016],
        [0.0005, 0.0012],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0647, 0.0603],
        [0.0628, 0.0621],
        [0.0629, 0.0620],
        [0.0612, 0.0638],
        [0.0587, 0.0665],
        [0.0678, 0.0576],
        [0.0598, 0.0652],
        [0.0620, 0.0630],
        [0.0616, 0.0634],
        [0.0635, 0.0615],
        [0.0616, 0.0634],
        [0.0642, 0.0608],
        [0.0647, 0.0603],
        [0.0629, 0.0620],
        [0.0613, 0.0637],
        [0.0604, 0.0646]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.437467
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0007, 0.0016],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0005, 0.0012],
        [0.0004, 0.0006],
        [0.0005, 0.0015],
        [0.0006, 0.0016],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0005, 0.0009],
        [0.0006, 0.0018]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0669, 0.0582],
        [0.0676, 0.0576],
        [0.0649, 0.0600],
        [0.0600, 0.0649],
        [0.0591, 0.0659],
        [0.0600, 0.0649],
        [0.0594, 0.0655],
        [0.0685, 0.0568],
        [0.0583, 0.0668],
        [0.0602, 0.0647],
        [0.0594, 0.0655],
        [0.0628, 0.0620],
        [0.0647, 0.0602],
        [0.0680, 0.0573],
        [0.0623, 0.0625],
        [0.0579, 0.0672]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.410306
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0006, 0.0012],
        [0.0004, 0.0007],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0007, 0.0010],
        [0.0006, 0.0014],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0011],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0632, 0.0617],
        [0.0649, 0.0601],
        [0.0601, 0.0649],
        [0.0644, 0.0606],
        [0.0630, 0.0619],
        [0.0627, 0.0622],
        [0.0678, 0.0576],
        [0.0612, 0.0637],
        [0.0613, 0.0636],
        [0.0657, 0.0594],
        [0.0602, 0.0648],
        [0.0617, 0.0632],
        [0.0610, 0.0639],
        [0.0576, 0.0677],
        [0.0639, 0.0610]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.321892
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0006, 0.0011],
        [0.0005, 0.0008],
        [0.0006, 0.0010],
        [0.0002, 0.0005],
        [0.0009, 0.0018],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0007, 0.0014],
        [0.0003, 0.0008],
        [0.0008, 0.0014],
        [0.0003, 0.0009],
        [0.0002, 0.0006],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0607, 0.0642],
        [0.0614, 0.0635],
        [0.0649, 0.0601],
        [0.0627, 0.0622],
        [0.0658, 0.0592],
        [0.0656, 0.0595],
        [0.0584, 0.0668],
        [0.0628, 0.0621],
        [0.0603, 0.0646],
        [0.0675, 0.0577],
        [0.0622, 0.0627],
        [0.0582, 0.0670],
        [0.0643, 0.0607],
        [0.0596, 0.0654],
        [0.0593, 0.0658],
        [0.0663, 0.0588]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.320612
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0012, 0.0015],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0005, 0.0012],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0014],
        [0.0006, 0.0011],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0017],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0701, 0.0555],
        [0.0616, 0.0631],
        [0.0624, 0.0624],
        [0.0623, 0.0625],
        [0.0605, 0.0644],
        [0.0641, 0.0607],
        [0.0669, 0.0582],
        [0.0563, 0.0692],
        [0.0639, 0.0609],
        [0.0685, 0.0568],
        [0.0649, 0.0599],
        [0.0600, 0.0649],
        [0.0570, 0.0683],
        [0.0633, 0.0614],
        [0.0607, 0.0642],
        [0.0576, 0.0676]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.479580
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0008],
        [0.0006, 0.0011],
        [0.0002, 0.0006],
        [0.0005, 0.0008],
        [0.0008, 0.0016],
        [0.0003, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0009],
        [0.0005, 0.0008],
        [0.0007, 0.0014],
        [0.0004, 0.0007],
        [0.0007, 0.0017],
        [0.0004, 0.0010],
        [0.0005, 0.0014],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0617],
        [0.0610, 0.0640],
        [0.0636, 0.0614],
        [0.0604, 0.0646],
        [0.0653, 0.0597],
        [0.0629, 0.0620],
        [0.0630, 0.0619],
        [0.0623, 0.0626],
        [0.0616, 0.0634],
        [0.0669, 0.0583],
        [0.0633, 0.0617],
        [0.0639, 0.0610],
        [0.0604, 0.0646],
        [0.0613, 0.0637],
        [0.0578, 0.0676],
        [0.0633, 0.0617]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.546462
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0009],
        [0.0004, 0.0009],
        [0.0009, 0.0019],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0003, 0.0009],
        [0.0005, 0.0009],
        [0.0006, 0.0014],
        [0.0008, 0.0015],
        [0.0007, 0.0016],
        [0.0003, 0.0006],
        [0.0005, 0.0012],
        [0.0008, 0.0015],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0566, 0.0690],
        [0.0620, 0.0629],
        [0.0628, 0.0621],
        [0.0626, 0.0623],
        [0.0657, 0.0594],
        [0.0608, 0.0642],
        [0.0614, 0.0635],
        [0.0595, 0.0656],
        [0.0665, 0.0586],
        [0.0615, 0.0634],
        [0.0655, 0.0595],
        [0.0623, 0.0625],
        [0.0618, 0.0631],
        [0.0607, 0.0643],
        [0.0644, 0.0606],
        [0.0659, 0.0592]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.397966
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0007, 0.0010],
        [0.0004, 0.0010],
        [0.0006, 0.0012],
        [0.0004, 0.0009],
        [0.0004, 0.0011],
        [0.0006, 0.0009],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1241, 0.1258],
        [0.1335, 0.1168],
        [0.1232, 0.1266],
        [0.1230, 0.1268],
        [0.1228, 0.1270],
        [0.1192, 0.1309],
        [0.1325, 0.1177],
        [0.1216, 0.1283]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.173404
acc:  0.52
Time taken to execute the en SA task with prompt type active, variation 8 and batchsize 16: 0:00:05.026555
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_8']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([124, 2])
answers_probs just softmax dim 0: tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA active 9 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0013],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0002, 0.0003],
        [0.0001, 0.0003],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0010],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0670, 0.0581],
        [0.0590, 0.0659],
        [0.0573, 0.0680],
        [0.0672, 0.0579],
        [0.0625, 0.0622],
        [0.0615, 0.0633],
        [0.0604, 0.0644],
        [0.0600, 0.0648],
        [0.0648, 0.0601],
        [0.0604, 0.0644],
        [0.0677, 0.0574],
        [0.0632, 0.0616],
        [0.0628, 0.0619],
        [0.0538, 0.0723],
        [0.0647, 0.0602],
        [0.0677, 0.0574]], device='cuda:0')
 Batch: 0 of active classification Duration: 0:00:00.557971
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0004, 0.0005],
        [0.0006, 0.0016],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0660],
        [0.0578, 0.0672],
        [0.0658, 0.0591],
        [0.0606, 0.0641],
        [0.0602, 0.0645],
        [0.0639, 0.0608],
        [0.0665, 0.0584],
        [0.0582, 0.0668],
        [0.0687, 0.0566],
        [0.0593, 0.0655],
        [0.0645, 0.0603],
        [0.0587, 0.0662],
        [0.0607, 0.0640],
        [0.0753, 0.0516],
        [0.0605, 0.0642],
        [0.0602, 0.0645]], device='cuda:0')
 Batch: 1 of active classification Duration: 0:00:00.403702
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0001, 0.0004],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0632],
        [0.0570, 0.0683],
        [0.0675, 0.0576],
        [0.0619, 0.0629],
        [0.0649, 0.0600],
        [0.0603, 0.0646],
        [0.0592, 0.0657],
        [0.0669, 0.0582],
        [0.0670, 0.0581],
        [0.0627, 0.0621],
        [0.0584, 0.0666],
        [0.0633, 0.0615],
        [0.0702, 0.0555],
        [0.0596, 0.0653],
        [0.0609, 0.0640],
        [0.0587, 0.0663]], device='cuda:0')
 Batch: 2 of active classification Duration: 0:00:00.285254
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0001, 0.0004],
        [0.0001, 0.0002],
        [0.0003, 0.0005],
        [0.0005, 0.0005],
        [0.0004, 0.0011],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0622],
        [0.0597, 0.0652],
        [0.0628, 0.0619],
        [0.0563, 0.0691],
        [0.0588, 0.0661],
        [0.0706, 0.0551],
        [0.0644, 0.0604],
        [0.0718, 0.0541],
        [0.0579, 0.0672],
        [0.0599, 0.0650],
        [0.0635, 0.0613],
        [0.0601, 0.0647],
        [0.0640, 0.0608],
        [0.0598, 0.0651],
        [0.0612, 0.0636],
        [0.0666, 0.0584]], device='cuda:0')
 Batch: 3 of active classification Duration: 0:00:00.417868
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0003, 0.0011],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0011],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0643],
        [0.0702, 0.0555],
        [0.0632, 0.0616],
        [0.0632, 0.0616],
        [0.0622, 0.0627],
        [0.0593, 0.0657],
        [0.0580, 0.0672],
        [0.0602, 0.0647],
        [0.0659, 0.0591],
        [0.0623, 0.0626],
        [0.0628, 0.0621],
        [0.0635, 0.0614],
        [0.0662, 0.0589],
        [0.0625, 0.0624],
        [0.0586, 0.0665],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 4 of active classification Duration: 0:00:00.357013
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0012],
        [0.0001, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0615],
        [0.0622, 0.0626],
        [0.0591, 0.0659],
        [0.0670, 0.0582],
        [0.0619, 0.0629],
        [0.0613, 0.0635],
        [0.0645, 0.0604],
        [0.0652, 0.0598],
        [0.0636, 0.0613],
        [0.0599, 0.0651],
        [0.0675, 0.0577],
        [0.0565, 0.0690],
        [0.0607, 0.0643],
        [0.0625, 0.0623],
        [0.0658, 0.0593],
        [0.0589, 0.0662]], device='cuda:0')
 Batch: 5 of active classification Duration: 0:00:00.304329
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0006, 0.0012],
        [0.0002, 0.0004],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0007, 0.0015],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0669, 0.0581],
        [0.0643, 0.0605],
        [0.0597, 0.0651],
        [0.0647, 0.0601],
        [0.0646, 0.0602],
        [0.0578, 0.0673],
        [0.0582, 0.0668],
        [0.0606, 0.0642],
        [0.0603, 0.0645],
        [0.0753, 0.0517],
        [0.0606, 0.0642],
        [0.0601, 0.0647],
        [0.0614, 0.0633],
        [0.0583, 0.0667],
        [0.0630, 0.0618],
        [0.0642, 0.0606]], device='cuda:0')
 Batch: 6 of active classification Duration: 0:00:00.327835
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0006, 0.0009],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0006, 0.0020],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0624],
        [0.0689, 0.0565],
        [0.0593, 0.0657],
        [0.0591, 0.0659],
        [0.0711, 0.0548],
        [0.0630, 0.0619],
        [0.0651, 0.0598],
        [0.0639, 0.0609],
        [0.0606, 0.0643],
        [0.0639, 0.0609],
        [0.0604, 0.0645],
        [0.0574, 0.0678],
        [0.0607, 0.0642],
        [0.0626, 0.0622],
        [0.0609, 0.0640],
        [0.0606, 0.0643]], device='cuda:0')
 Batch: 7 of active classification Duration: 0:00:00.438480
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0001, 0.0003],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0598, 0.0651],
        [0.0664, 0.0587],
        [0.0616, 0.0633],
        [0.0679, 0.0574],
        [0.0625, 0.0623],
        [0.0582, 0.0669],
        [0.0620, 0.0629],
        [0.0600, 0.0649],
        [0.0656, 0.0593],
        [0.0607, 0.0642],
        [0.0624, 0.0624],
        [0.0580, 0.0671],
        [0.0630, 0.0618],
        [0.0584, 0.0667],
        [0.0698, 0.0558]], device='cuda:0')
 Batch: 8 of active classification Duration: 0:00:00.411932
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0006, 0.0015],
        [0.0002, 0.0005],
        [0.0002, 0.0002],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0610, 0.0638],
        [0.0638, 0.0611],
        [0.0652, 0.0598],
        [0.0651, 0.0598],
        [0.0655, 0.0595],
        [0.0613, 0.0635],
        [0.0568, 0.0685],
        [0.0612, 0.0636],
        [0.0651, 0.0598],
        [0.0593, 0.0657],
        [0.0601, 0.0648],
        [0.0602, 0.0647],
        [0.0597, 0.0653],
        [0.0593, 0.0657],
        [0.0698, 0.0558],
        [0.0665, 0.0586]], device='cuda:0')
 Batch: 9 of active classification Duration: 0:00:00.435093
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0002, 0.0002],
        [0.0001, 0.0002],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0013],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0632],
        [0.0617, 0.0630],
        [0.0626, 0.0621],
        [0.0742, 0.0524],
        [0.0668, 0.0583],
        [0.0581, 0.0670],
        [0.0644, 0.0604],
        [0.0588, 0.0661],
        [0.0592, 0.0657],
        [0.0645, 0.0603],
        [0.0555, 0.0700],
        [0.0625, 0.0623],
        [0.0629, 0.0618],
        [0.0659, 0.0590],
        [0.0602, 0.0646],
        [0.0611, 0.0636]], device='cuda:0')
 Batch: 10 of active classification Duration: 0:00:00.349350
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0008],
        [0.0002, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0580, 0.0671],
        [0.0691, 0.0562],
        [0.0639, 0.0608],
        [0.0583, 0.0666],
        [0.0625, 0.0622],
        [0.0601, 0.0647],
        [0.0685, 0.0568],
        [0.0574, 0.0677],
        [0.0674, 0.0576],
        [0.0611, 0.0636],
        [0.0638, 0.0609],
        [0.0625, 0.0622],
        [0.0594, 0.0654],
        [0.0706, 0.0551],
        [0.0622, 0.0625],
        [0.0551, 0.0705]], device='cuda:0')
 Batch: 11 of active classification Duration: 0:00:00.351464
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0010],
        [0.0008, 0.0017],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1317, 0.1184],
        [0.1272, 0.1226],
        [0.1283, 0.1216],
        [0.1192, 0.1308],
        [0.1289, 0.1210],
        [0.1144, 0.1364],
        [0.1250, 0.1247],
        [0.1252, 0.1245]], device='cuda:0')
 Batch: 12 of active classification Duration: 0:00:00.207227
acc:  0.565
Time taken to execute the en SA task with prompt type active, variation 9 and batchsize 16: 0:00:04.868744
path ['42', 'en', 'bloom-big', 'SA', 'active', 'prompt_id_9']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

prompt_type passive has 10 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([98, 2])
answers_probs just softmax dim 0: tensor([[0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102]], device='cuda:0')
tensor([[0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102],
        [0.0102, 0.0102]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0008],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0006, 0.0012],
        [0.0003, 0.0009],
        [0.0002, 0.0007],
        [0.0003, 0.0011],
        [0.0002, 0.0006],
        [0.0007, 0.0014],
        [0.0004, 0.0007],
        [0.0002, 0.0002],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0611, 0.0635],
        [0.0633, 0.0613],
        [0.0561, 0.0692],
        [0.0596, 0.0651],
        [0.0669, 0.0580],
        [0.0714, 0.0544],
        [0.0591, 0.0657],
        [0.0645, 0.0601],
        [0.0586, 0.0662],
        [0.0590, 0.0658],
        [0.0575, 0.0674],
        [0.0591, 0.0657],
        [0.0629, 0.0616],
        [0.0656, 0.0592],
        [0.0777, 0.0499],
        [0.0578, 0.0671]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.361332
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0002, 0.0007],
        [0.0006, 0.0009],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0007],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0616],
        [0.0622, 0.0626],
        [0.0600, 0.0649],
        [0.0596, 0.0654],
        [0.0705, 0.0552],
        [0.0630, 0.0618],
        [0.0624, 0.0624],
        [0.0639, 0.0610],
        [0.0654, 0.0596],
        [0.0641, 0.0608],
        [0.0630, 0.0618],
        [0.0617, 0.0631],
        [0.0600, 0.0649],
        [0.0645, 0.0604],
        [0.0562, 0.0693],
        [0.0600, 0.0650]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.330605
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0001, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0010],
        [0.0002, 0.0002],
        [0.0003, 0.0010],
        [0.0003, 0.0005],
        [0.0005, 0.0012],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0593],
        [0.0576, 0.0676],
        [0.0660, 0.0590],
        [0.0582, 0.0669],
        [0.0618, 0.0630],
        [0.0632, 0.0616],
        [0.0600, 0.0649],
        [0.0619, 0.0629],
        [0.0607, 0.0642],
        [0.0634, 0.0614],
        [0.0597, 0.0652],
        [0.0694, 0.0561],
        [0.0583, 0.0668],
        [0.0676, 0.0576],
        [0.0620, 0.0628],
        [0.0644, 0.0605]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.445654
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0006, 0.0011],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0610, 0.0640],
        [0.0612, 0.0637],
        [0.0616, 0.0633],
        [0.0622, 0.0627],
        [0.0670, 0.0582],
        [0.0615, 0.0634],
        [0.0645, 0.0605],
        [0.0666, 0.0586],
        [0.0637, 0.0612],
        [0.0606, 0.0644],
        [0.0620, 0.0629],
        [0.0630, 0.0619],
        [0.0621, 0.0628],
        [0.0581, 0.0671],
        [0.0633, 0.0616]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.350605
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0001, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0635],
        [0.0615, 0.0633],
        [0.0653, 0.0597],
        [0.0616, 0.0633],
        [0.0627, 0.0622],
        [0.0679, 0.0574],
        [0.0597, 0.0653],
        [0.0635, 0.0614],
        [0.0595, 0.0655],
        [0.0628, 0.0621],
        [0.0573, 0.0680],
        [0.0665, 0.0586],
        [0.0658, 0.0592],
        [0.0585, 0.0666],
        [0.0659, 0.0591],
        [0.0602, 0.0647]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.396283
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0007, 0.0016],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0607, 0.0642],
        [0.0616, 0.0632],
        [0.0585, 0.0666],
        [0.0650, 0.0600],
        [0.0667, 0.0585],
        [0.0603, 0.0646],
        [0.0670, 0.0581],
        [0.0673, 0.0579],
        [0.0611, 0.0638],
        [0.0601, 0.0649],
        [0.0601, 0.0649],
        [0.0631, 0.0618],
        [0.0651, 0.0599],
        [0.0584, 0.0668],
        [0.0641, 0.0608],
        [0.0608, 0.0641]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.356829
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0013],
        [0.0001, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0006],
        [0.0007, 0.0013],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0647],
        [0.0665, 0.0586],
        [0.0641, 0.0609],
        [0.0641, 0.0609],
        [0.0650, 0.0600],
        [0.0607, 0.0643],
        [0.0608, 0.0641],
        [0.0601, 0.0649],
        [0.0636, 0.0613],
        [0.0587, 0.0664],
        [0.0575, 0.0678],
        [0.0615, 0.0634],
        [0.0673, 0.0580],
        [0.0616, 0.0633],
        [0.0646, 0.0603],
        [0.0636, 0.0613]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.285382
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0005, 0.0011],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0654, 0.0596],
        [0.0635, 0.0614],
        [0.0727, 0.0536],
        [0.0615, 0.0634],
        [0.0588, 0.0663],
        [0.0600, 0.0649],
        [0.0609, 0.0640],
        [0.0628, 0.0620],
        [0.0627, 0.0621],
        [0.0617, 0.0632],
        [0.0660, 0.0590],
        [0.0578, 0.0673],
        [0.0598, 0.0651],
        [0.0628, 0.0620],
        [0.0598, 0.0651]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.355025
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.8835e-04, 4.2772e-04],
        [3.5405e-04, 1.0166e-03],
        [3.4189e-04, 8.1348e-04],
        [3.3545e-04, 7.4434e-04],
        [6.1035e-04, 1.9388e-03],
        [2.3413e-04, 8.3017e-04],
        [3.0613e-04, 6.1369e-04],
        [6.9678e-05, 3.5119e-04],
        [2.3091e-04, 5.7125e-04],
        [4.2224e-04, 9.2220e-04],
        [2.4223e-04, 3.0637e-04],
        [1.7416e-04, 4.9210e-04],
        [3.1996e-04, 8.9025e-04],
        [1.5759e-04, 4.3201e-04],
        [3.4952e-04, 5.3310e-04],
        [2.7704e-04, 5.4646e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0616],
        [0.0602, 0.0646],
        [0.0625, 0.0622],
        [0.0634, 0.0613],
        [0.0591, 0.0658],
        [0.0579, 0.0671],
        [0.0649, 0.0600],
        [0.0549, 0.0709],
        [0.0620, 0.0627],
        [0.0637, 0.0611],
        [0.0723, 0.0538],
        [0.0604, 0.0644],
        [0.0606, 0.0642],
        [0.0608, 0.0640],
        [0.0691, 0.0563],
        [0.0651, 0.0598]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.389681
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0005, 0.0014],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0011],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0659, 0.0591],
        [0.0660, 0.0590],
        [0.0664, 0.0587],
        [0.0577, 0.0675],
        [0.0621, 0.0627],
        [0.0574, 0.0678],
        [0.0601, 0.0648],
        [0.0576, 0.0676],
        [0.0602, 0.0647],
        [0.0617, 0.0632],
        [0.0666, 0.0584],
        [0.0621, 0.0627],
        [0.0610, 0.0639],
        [0.0688, 0.0566],
        [0.0654, 0.0595],
        [0.0611, 0.0638]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.535013
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0010],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0001, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0645],
        [0.0668, 0.0582],
        [0.0597, 0.0652],
        [0.0594, 0.0655],
        [0.0577, 0.0675],
        [0.0703, 0.0554],
        [0.0611, 0.0637],
        [0.0583, 0.0668],
        [0.0634, 0.0614],
        [0.0680, 0.0573],
        [0.0651, 0.0598],
        [0.0577, 0.0675],
        [0.0638, 0.0610],
        [0.0626, 0.0622],
        [0.0636, 0.0612],
        [0.0621, 0.0627]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.315226
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0010],
        [0.0004, 0.0014],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0002, 0.0006],
        [0.0001, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0643],
        [0.0602, 0.0647],
        [0.0713, 0.0546],
        [0.0634, 0.0614],
        [0.0638, 0.0610],
        [0.0634, 0.0615],
        [0.0587, 0.0663],
        [0.0646, 0.0603],
        [0.0648, 0.0601],
        [0.0616, 0.0632],
        [0.0608, 0.0641],
        [0.0629, 0.0619],
        [0.0616, 0.0632],
        [0.0586, 0.0665],
        [0.0664, 0.0587],
        [0.0573, 0.0680]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.395614
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0008, 0.0010],
        [0.0006, 0.0008],
        [0.0002, 0.0008],
        [0.0002, 0.0006],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1225, 0.1271],
        [0.1264, 0.1232],
        [0.1268, 0.1228],
        [0.1378, 0.1130],
        [0.1342, 0.1160],
        [0.1137, 0.1370],
        [0.1182, 0.1317],
        [0.1205, 0.1292]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.175985
acc:  0.425
Time taken to execute the en SA task with prompt type passive, variation 0 and batchsize 16: 0:00:04.715329
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([105, 2])
answers_probs just softmax dim 0: tensor([[0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095]], device='cuda:0')
tensor([[0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.0480e-04, 4.1366e-04],
        [8.5652e-05, 6.6328e-04],
        [2.2173e-04, 5.6601e-04],
        [2.0730e-04, 5.4598e-04],
        [3.5548e-04, 6.5374e-04],
        [4.0627e-04, 1.0538e-03],
        [2.2662e-04, 4.4012e-04],
        [3.5882e-04, 7.9012e-04],
        [4.7636e-04, 7.0953e-04],
        [3.8290e-04, 6.6662e-04],
        [4.1819e-04, 4.6301e-04],
        [2.3735e-04, 7.6628e-04],
        [2.1124e-04, 1.6260e-04],
        [4.0865e-04, 6.8426e-04],
        [4.2415e-04, 1.1711e-03],
        [3.4094e-04, 6.4707e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0621, 0.0623],
        [0.0500, 0.0773],
        [0.0591, 0.0654],
        [0.0588, 0.0658],
        [0.0635, 0.0610],
        [0.0589, 0.0656],
        [0.0627, 0.0617],
        [0.0610, 0.0634],
        [0.0667, 0.0580],
        [0.0643, 0.0602],
        [0.0717, 0.0539],
        [0.0565, 0.0684],
        [0.0785, 0.0493],
        [0.0649, 0.0597],
        [0.0582, 0.0665],
        [0.0630, 0.0614]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.362257
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0005, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0002, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0007, 0.0015],
        [0.0005, 0.0012],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0001, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0616],
        [0.0661, 0.0589],
        [0.0597, 0.0652],
        [0.0589, 0.0661],
        [0.0560, 0.0695],
        [0.0652, 0.0597],
        [0.0653, 0.0596],
        [0.0582, 0.0669],
        [0.0636, 0.0612],
        [0.0623, 0.0625],
        [0.0659, 0.0591],
        [0.0703, 0.0554],
        [0.0601, 0.0647],
        [0.0613, 0.0635],
        [0.0660, 0.0590],
        [0.0580, 0.0671]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.388873
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0007, 0.0014],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0665, 0.0586],
        [0.0601, 0.0649],
        [0.0622, 0.0626],
        [0.0596, 0.0654],
        [0.0636, 0.0613],
        [0.0614, 0.0634],
        [0.0666, 0.0585],
        [0.0703, 0.0554],
        [0.0610, 0.0639],
        [0.0632, 0.0617],
        [0.0619, 0.0629],
        [0.0604, 0.0646],
        [0.0587, 0.0664],
        [0.0622, 0.0626],
        [0.0594, 0.0656],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.324290
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0012],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0621, 0.0627],
        [0.0646, 0.0603],
        [0.0659, 0.0591],
        [0.0678, 0.0574],
        [0.0603, 0.0646],
        [0.0586, 0.0664],
        [0.0631, 0.0617],
        [0.0580, 0.0670],
        [0.0588, 0.0662],
        [0.0667, 0.0583],
        [0.0597, 0.0652],
        [0.0700, 0.0556],
        [0.0636, 0.0611],
        [0.0653, 0.0596],
        [0.0554, 0.0703],
        [0.0603, 0.0646]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.421939
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0012],
        [0.0004, 0.0004],
        [0.0004, 0.0007],
        [0.0007, 0.0015],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0006, 0.0012],
        [0.0006, 0.0014],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0001, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0590],
        [0.0707, 0.0551],
        [0.0641, 0.0607],
        [0.0619, 0.0629],
        [0.0621, 0.0627],
        [0.0609, 0.0640],
        [0.0675, 0.0577],
        [0.0615, 0.0633],
        [0.0629, 0.0619],
        [0.0632, 0.0616],
        [0.0617, 0.0631],
        [0.0562, 0.0693],
        [0.0608, 0.0641],
        [0.0571, 0.0682],
        [0.0647, 0.0602],
        [0.0590, 0.0660]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.531567
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0011],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0017],
        [0.0003, 0.0007],
        [0.0006, 0.0009],
        [0.0002, 0.0008],
        [0.0005, 0.0015],
        [0.0003, 0.0003],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0605, 0.0643],
        [0.0587, 0.0663],
        [0.0595, 0.0654],
        [0.0651, 0.0598],
        [0.0679, 0.0573],
        [0.0619, 0.0629],
        [0.0663, 0.0587],
        [0.0600, 0.0649],
        [0.0662, 0.0588],
        [0.0571, 0.0681],
        [0.0627, 0.0620],
        [0.0669, 0.0581],
        [0.0565, 0.0688],
        [0.0574, 0.0678],
        [0.0703, 0.0553],
        [0.0631, 0.0616]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.358929
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0005, 0.0012],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0650],
        [0.0623, 0.0626],
        [0.0611, 0.0638],
        [0.0634, 0.0615],
        [0.0638, 0.0611],
        [0.0576, 0.0677],
        [0.0648, 0.0602],
        [0.0604, 0.0645],
        [0.0638, 0.0611],
        [0.0595, 0.0656],
        [0.0611, 0.0638],
        [0.0620, 0.0629],
        [0.0631, 0.0618],
        [0.0694, 0.0562],
        [0.0621, 0.0628],
        [0.0656, 0.0594]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.432859
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[4.5586e-04, 7.1144e-04],
        [2.0480e-04, 4.0102e-04],
        [2.8658e-04, 6.7139e-04],
        [3.7360e-04, 7.5483e-04],
        [5.0974e-04, 9.2316e-04],
        [3.3760e-04, 5.5218e-04],
        [1.8585e-04, 4.8184e-04],
        [2.3162e-04, 6.1512e-04],
        [2.6751e-04, 4.5133e-04],
        [2.7013e-04, 4.5586e-04],
        [3.5310e-04, 8.5402e-04],
        [1.8990e-04, 6.2752e-04],
        [2.5916e-04, 5.6601e-04],
        [9.2685e-05, 4.2868e-04],
        [2.9659e-04, 9.7275e-04],
        [4.9448e-04, 5.7793e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0670, 0.0580],
        [0.0636, 0.0612],
        [0.0611, 0.0636],
        [0.0631, 0.0616],
        [0.0647, 0.0601],
        [0.0662, 0.0587],
        [0.0599, 0.0649],
        [0.0596, 0.0652],
        [0.0658, 0.0591],
        [0.0658, 0.0591],
        [0.0607, 0.0640],
        [0.0572, 0.0680],
        [0.0621, 0.0626],
        [0.0541, 0.0718],
        [0.0573, 0.0679],
        [0.0719, 0.0541]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.470119
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0004, 0.0012],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0011],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0596],
        [0.0712, 0.0547],
        [0.0690, 0.0564],
        [0.0626, 0.0622],
        [0.0641, 0.0606],
        [0.0581, 0.0669],
        [0.0605, 0.0643],
        [0.0629, 0.0619],
        [0.0649, 0.0599],
        [0.0584, 0.0666],
        [0.0646, 0.0602],
        [0.0616, 0.0631],
        [0.0543, 0.0716],
        [0.0590, 0.0659],
        [0.0626, 0.0622],
        [0.0609, 0.0639]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.393052
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0011],
        [0.0001, 0.0006],
        [0.0004, 0.0010],
        [0.0006, 0.0009],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0565, 0.0689],
        [0.0553, 0.0703],
        [0.0605, 0.0642],
        [0.0678, 0.0573],
        [0.0571, 0.0681],
        [0.0610, 0.0637],
        [0.0645, 0.0603],
        [0.0675, 0.0576],
        [0.0658, 0.0591],
        [0.0595, 0.0653],
        [0.0591, 0.0658],
        [0.0605, 0.0643],
        [0.0634, 0.0614],
        [0.0687, 0.0566],
        [0.0640, 0.0607],
        [0.0688, 0.0565]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.330317
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0007, 0.0009],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0014],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0001, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0657],
        [0.0709, 0.0549],
        [0.0638, 0.0610],
        [0.0620, 0.0628],
        [0.0669, 0.0582],
        [0.0579, 0.0672],
        [0.0606, 0.0642],
        [0.0660, 0.0589],
        [0.0653, 0.0596],
        [0.0606, 0.0642],
        [0.0606, 0.0642],
        [0.0592, 0.0658],
        [0.0664, 0.0586],
        [0.0568, 0.0685],
        [0.0653, 0.0596],
        [0.0585, 0.0666]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.349771
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0007, 0.0014],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0014],
        [0.0003, 0.0007],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0674, 0.0578],
        [0.0575, 0.0678],
        [0.0622, 0.0627],
        [0.0620, 0.0629],
        [0.0596, 0.0654],
        [0.0633, 0.0616],
        [0.0635, 0.0614],
        [0.0626, 0.0622],
        [0.0638, 0.0611],
        [0.0678, 0.0575],
        [0.0627, 0.0621],
        [0.0589, 0.0662],
        [0.0634, 0.0615],
        [0.0576, 0.0676],
        [0.0627, 0.0621],
        [0.0648, 0.0602]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.352765
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0009, 0.0011],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0002, 0.0006],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1281, 0.1213],
        [0.1463, 0.1062],
        [0.1272, 0.1221],
        [0.1257, 0.1236],
        [0.1184, 0.1313],
        [0.1172, 0.1326],
        [0.1251, 0.1242],
        [0.1120, 0.1388]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.159195
acc:  0.405
Time taken to execute the en SA task with prompt type passive, variation 1 and batchsize 16: 0:00:04.898078
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([110, 2])
answers_probs just softmax dim 0: tensor([[0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091]], device='cuda:0')
tensor([[0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0001, 0.0004],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0675, 0.0577],
        [0.0612, 0.0637],
        [0.0634, 0.0615],
        [0.0587, 0.0664],
        [0.0576, 0.0678],
        [0.0635, 0.0614],
        [0.0623, 0.0626],
        [0.0620, 0.0629],
        [0.0618, 0.0631],
        [0.0641, 0.0609],
        [0.0608, 0.0641],
        [0.0620, 0.0629],
        [0.0624, 0.0625],
        [0.0664, 0.0587],
        [0.0656, 0.0594],
        [0.0606, 0.0643]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.425688
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0002, 0.0003],
        [0.0001, 0.0002],
        [0.0002, 0.0008],
        [0.0004, 0.0012],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0001, 0.0005],
        [0.0001, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0662, 0.0589],
        [0.0625, 0.0624],
        [0.0630, 0.0619],
        [0.0661, 0.0590],
        [0.0687, 0.0568],
        [0.0587, 0.0664],
        [0.0612, 0.0637],
        [0.0596, 0.0655],
        [0.0638, 0.0611],
        [0.0598, 0.0652],
        [0.0591, 0.0659],
        [0.0631, 0.0618],
        [0.0626, 0.0623],
        [0.0642, 0.0607],
        [0.0608, 0.0641],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.419563
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.2674e-04, 6.0225e-04],
        [2.6369e-04, 7.0047e-04],
        [1.2457e-04, 3.2568e-04],
        [1.4758e-04, 4.6921e-04],
        [1.5795e-04, 3.9101e-04],
        [1.7941e-04, 2.4700e-04],
        [1.1367e-04, 3.2377e-04],
        [1.5843e-04, 4.9925e-04],
        [1.7202e-04, 4.2582e-04],
        [7.2122e-05, 1.5390e-04],
        [3.0828e-04, 5.6267e-04],
        [3.5906e-04, 7.3147e-04],
        [1.9836e-04, 7.2575e-04],
        [2.6655e-04, 7.4768e-04],
        [2.1195e-04, 5.2881e-04],
        [1.6427e-04, 3.5048e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0635],
        [0.0614, 0.0635],
        [0.0616, 0.0633],
        [0.0593, 0.0657],
        [0.0623, 0.0626],
        [0.0711, 0.0548],
        [0.0606, 0.0644],
        [0.0594, 0.0656],
        [0.0623, 0.0626],
        [0.0642, 0.0607],
        [0.0665, 0.0586],
        [0.0649, 0.0600],
        [0.0579, 0.0673],
        [0.0607, 0.0642],
        [0.0622, 0.0627],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.438350
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0001, 0.0003],
        [0.0002, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0002, 0.0006],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0624],
        [0.0641, 0.0609],
        [0.0605, 0.0645],
        [0.0627, 0.0623],
        [0.0607, 0.0643],
        [0.0632, 0.0618],
        [0.0597, 0.0654],
        [0.0614, 0.0635],
        [0.0605, 0.0645],
        [0.0637, 0.0613],
        [0.0672, 0.0581],
        [0.0618, 0.0632],
        [0.0646, 0.0604],
        [0.0620, 0.0629],
        [0.0632, 0.0618],
        [0.0622, 0.0628]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.396750
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.6201e-04, 4.2677e-04],
        [2.3246e-04, 7.3862e-04],
        [1.4448e-04, 3.9887e-04],
        [2.6107e-04, 5.0306e-04],
        [2.3770e-04, 3.4571e-04],
        [1.3888e-04, 3.4928e-04],
        [1.3256e-04, 3.6454e-04],
        [3.2616e-04, 6.4373e-04],
        [2.3079e-04, 4.7350e-04],
        [2.7943e-04, 5.6458e-04],
        [2.2125e-04, 6.0606e-04],
        [2.3353e-04, 6.8665e-04],
        [2.9159e-04, 6.7806e-04],
        [8.9884e-05, 1.5116e-04],
        [1.5557e-04, 5.4550e-04],
        [2.7800e-04, 6.9857e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0610, 0.0639],
        [0.0588, 0.0662],
        [0.0604, 0.0645],
        [0.0652, 0.0598],
        [0.0696, 0.0560],
        [0.0616, 0.0633],
        [0.0605, 0.0645],
        [0.0648, 0.0601],
        [0.0643, 0.0606],
        [0.0645, 0.0604],
        [0.0605, 0.0644],
        [0.0597, 0.0653],
        [0.0626, 0.0623],
        [0.0672, 0.0580],
        [0.0578, 0.0674],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.323818
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0003],
        [0.0002, 0.0008],
        [0.0001, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0011],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0668, 0.0584],
        [0.0595, 0.0656],
        [0.0619, 0.0630],
        [0.0658, 0.0592],
        [0.0615, 0.0634],
        [0.0603, 0.0647],
        [0.0605, 0.0644],
        [0.0670, 0.0582],
        [0.0634, 0.0615],
        [0.0595, 0.0656],
        [0.0650, 0.0600],
        [0.0629, 0.0620],
        [0.0644, 0.0606],
        [0.0587, 0.0664],
        [0.0639, 0.0610],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.465686
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0004],
        [0.0001, 0.0004],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0012],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0001, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0650],
        [0.0619, 0.0630],
        [0.0641, 0.0609],
        [0.0616, 0.0633],
        [0.0649, 0.0601],
        [0.0563, 0.0693],
        [0.0632, 0.0617],
        [0.0605, 0.0645],
        [0.0617, 0.0633],
        [0.0628, 0.0621],
        [0.0634, 0.0615],
        [0.0657, 0.0594],
        [0.0648, 0.0602],
        [0.0614, 0.0635],
        [0.0632, 0.0617],
        [0.0644, 0.0606]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.356824
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0612],
        [0.0636, 0.0613],
        [0.0623, 0.0626],
        [0.0595, 0.0656],
        [0.0597, 0.0653],
        [0.0641, 0.0608],
        [0.0595, 0.0656],
        [0.0655, 0.0595],
        [0.0607, 0.0643],
        [0.0603, 0.0648],
        [0.0627, 0.0622],
        [0.0618, 0.0632],
        [0.0652, 0.0598],
        [0.0657, 0.0594],
        [0.0619, 0.0631],
        [0.0637, 0.0612]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.353405
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[4.6039e-04, 1.0786e-03],
        [2.9254e-04, 6.8569e-04],
        [2.8729e-04, 5.8460e-04],
        [8.9109e-05, 1.9383e-04],
        [1.5438e-04, 2.9516e-04],
        [2.6321e-04, 9.4080e-04],
        [2.3925e-04, 6.3992e-04],
        [9.4414e-05, 2.2566e-04],
        [2.5964e-04, 8.5831e-04],
        [3.2473e-04, 8.1635e-04],
        [3.2687e-04, 6.9761e-04],
        [2.0218e-04, 4.8518e-04],
        [1.5402e-04, 4.4942e-04],
        [2.6584e-04, 6.7377e-04],
        [2.0719e-04, 7.2289e-04],
        [2.3329e-04, 7.3004e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0614],
        [0.0636, 0.0614],
        [0.0655, 0.0595],
        [0.0646, 0.0604],
        [0.0664, 0.0587],
        [0.0586, 0.0665],
        [0.0619, 0.0630],
        [0.0633, 0.0616],
        [0.0595, 0.0656],
        [0.0626, 0.0623],
        [0.0648, 0.0602],
        [0.0632, 0.0617],
        [0.0608, 0.0641],
        [0.0625, 0.0624],
        [0.0589, 0.0662],
        [0.0600, 0.0650]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.307419
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.7726e-04, 6.0940e-04],
        [2.5249e-04, 4.5347e-04],
        [3.0565e-04, 6.6280e-04],
        [1.3876e-04, 3.2520e-04],
        [2.2006e-04, 6.0749e-04],
        [6.7532e-05, 2.5177e-04],
        [2.5702e-04, 5.8365e-04],
        [1.7619e-04, 5.6887e-04],
        [2.0158e-04, 2.9564e-04],
        [2.8849e-04, 7.1383e-04],
        [2.3782e-04, 6.4135e-04],
        [3.0994e-04, 5.7888e-04],
        [2.0635e-04, 7.6103e-04],
        [1.0860e-04, 4.0984e-04],
        [1.0103e-04, 4.1866e-04],
        [2.9230e-04, 8.3876e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0656],
        [0.0677, 0.0575],
        [0.0650, 0.0599],
        [0.0639, 0.0609],
        [0.0618, 0.0630],
        [0.0585, 0.0665],
        [0.0643, 0.0605],
        [0.0600, 0.0649],
        [0.0711, 0.0548],
        [0.0632, 0.0616],
        [0.0621, 0.0627],
        [0.0671, 0.0580],
        [0.0586, 0.0664],
        [0.0584, 0.0666],
        [0.0575, 0.0677],
        [0.0613, 0.0635]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.326370
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0007],
        [0.0001, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0656],
        [0.0626, 0.0623],
        [0.0608, 0.0642],
        [0.0623, 0.0626],
        [0.0619, 0.0631],
        [0.0669, 0.0583],
        [0.0596, 0.0655],
        [0.0640, 0.0609],
        [0.0647, 0.0603],
        [0.0661, 0.0590],
        [0.0645, 0.0605],
        [0.0604, 0.0646],
        [0.0644, 0.0605],
        [0.0592, 0.0659],
        [0.0619, 0.0630],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.552956
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.1522e-04, 4.0531e-04],
        [9.8169e-05, 2.4486e-04],
        [4.8971e-04, 8.9359e-04],
        [7.7248e-05, 8.9586e-05],
        [2.1279e-04, 5.3883e-04],
        [2.0111e-04, 5.8222e-04],
        [3.3259e-04, 8.5592e-04],
        [4.6706e-04, 1.5554e-03],
        [1.3137e-04, 3.3283e-04],
        [1.7011e-04, 4.6611e-04],
        [1.7345e-04, 5.5981e-04],
        [1.8704e-04, 5.4550e-04],
        [2.4605e-04, 7.3481e-04],
        [1.6689e-04, 4.4656e-04],
        [1.8764e-04, 3.8481e-04],
        [1.4102e-04, 3.6573e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0586, 0.0664],
        [0.0625, 0.0623],
        [0.0669, 0.0582],
        [0.0746, 0.0522],
        [0.0623, 0.0625],
        [0.0607, 0.0641],
        [0.0621, 0.0627],
        [0.0592, 0.0658],
        [0.0623, 0.0625],
        [0.0614, 0.0635],
        [0.0595, 0.0654],
        [0.0606, 0.0642],
        [0.0604, 0.0645],
        [0.0616, 0.0632],
        [0.0652, 0.0597],
        [0.0620, 0.0628]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.399271
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0001, 0.0004],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1223, 0.1277],
        [0.1258, 0.1242],
        [0.1230, 0.1270],
        [0.1242, 0.1258],
        [0.1256, 0.1244],
        [0.1256, 0.1244],
        [0.1236, 0.1263],
        [0.1299, 0.1202]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.186073
acc:  0.52
Time taken to execute the en SA task with prompt type passive, variation 2 and batchsize 16: 0:00:04.973995
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([114, 2])
answers_probs just softmax dim 0: tensor([[0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088]], device='cuda:0')
tensor([[0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0017],
        [0.0006, 0.0013],
        [0.0004, 0.0012],
        [0.0008, 0.0016],
        [0.0002, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0005, 0.0015],
        [0.0005, 0.0017],
        [0.0003, 0.0011],
        [0.0003, 0.0010],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0011],
        [0.0004, 0.0008],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0593],
        [0.0653, 0.0597],
        [0.0618, 0.0631],
        [0.0657, 0.0593],
        [0.0591, 0.0659],
        [0.0657, 0.0593],
        [0.0599, 0.0651],
        [0.0593, 0.0658],
        [0.0582, 0.0670],
        [0.0590, 0.0660],
        [0.0596, 0.0654],
        [0.0643, 0.0606],
        [0.0668, 0.0584],
        [0.0642, 0.0607],
        [0.0641, 0.0608],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.422785
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0011],
        [0.0004, 0.0008],
        [0.0008, 0.0015],
        [0.0007, 0.0017],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0014],
        [0.0006, 0.0011],
        [0.0005, 0.0008],
        [0.0006, 0.0020],
        [0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0007, 0.0019],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0682, 0.0571],
        [0.0629, 0.0620],
        [0.0647, 0.0602],
        [0.0612, 0.0637],
        [0.0585, 0.0666],
        [0.0647, 0.0602],
        [0.0660, 0.0590],
        [0.0600, 0.0650],
        [0.0647, 0.0602],
        [0.0660, 0.0590],
        [0.0572, 0.0681],
        [0.0616, 0.0632],
        [0.0631, 0.0618],
        [0.0598, 0.0652],
        [0.0586, 0.0665],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.352745
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0003, 0.0008],
        [0.0005, 0.0012],
        [0.0007, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0006, 0.0013],
        [0.0005, 0.0013],
        [0.0002, 0.0006],
        [0.0008, 0.0019],
        [0.0004, 0.0011],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0648],
        [0.0594, 0.0656],
        [0.0614, 0.0635],
        [0.0721, 0.0541],
        [0.0622, 0.0627],
        [0.0620, 0.0629],
        [0.0607, 0.0642],
        [0.0632, 0.0617],
        [0.0614, 0.0635],
        [0.0584, 0.0667],
        [0.0626, 0.0623],
        [0.0599, 0.0651],
        [0.0678, 0.0574],
        [0.0614, 0.0635],
        [0.0644, 0.0605],
        [0.0631, 0.0617]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.329930
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0005, 0.0012],
        [0.0004, 0.0010],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0004, 0.0014],
        [0.0008, 0.0012],
        [0.0002, 0.0005],
        [0.0006, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0620],
        [0.0661, 0.0590],
        [0.0611, 0.0638],
        [0.0605, 0.0644],
        [0.0600, 0.0650],
        [0.0611, 0.0638],
        [0.0632, 0.0617],
        [0.0582, 0.0670],
        [0.0671, 0.0581],
        [0.0627, 0.0622],
        [0.0693, 0.0562],
        [0.0613, 0.0636],
        [0.0617, 0.0632],
        [0.0588, 0.0663],
        [0.0646, 0.0603],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.327313
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0012],
        [0.0005, 0.0011],
        [0.0004, 0.0010],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0010, 0.0016],
        [0.0004, 0.0006],
        [0.0009, 0.0017],
        [0.0007, 0.0016],
        [0.0004, 0.0009],
        [0.0008, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0652],
        [0.0654, 0.0596],
        [0.0576, 0.0676],
        [0.0633, 0.0616],
        [0.0614, 0.0635],
        [0.0583, 0.0669],
        [0.0593, 0.0657],
        [0.0640, 0.0609],
        [0.0620, 0.0628],
        [0.0619, 0.0629],
        [0.0664, 0.0587],
        [0.0678, 0.0575],
        [0.0653, 0.0596],
        [0.0607, 0.0642],
        [0.0608, 0.0641],
        [0.0658, 0.0592]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.303962
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0008, 0.0010],
        [0.0005, 0.0011],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0006, 0.0014],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0618],
        [0.0638, 0.0611],
        [0.0694, 0.0562],
        [0.0615, 0.0634],
        [0.0598, 0.0652],
        [0.0616, 0.0633],
        [0.0637, 0.0612],
        [0.0667, 0.0584],
        [0.0636, 0.0613],
        [0.0602, 0.0648],
        [0.0588, 0.0663],
        [0.0626, 0.0622],
        [0.0574, 0.0679],
        [0.0614, 0.0635],
        [0.0632, 0.0617],
        [0.0634, 0.0615]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.349728
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0005, 0.0010],
        [0.0005, 0.0013],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0005, 0.0014],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0013],
        [0.0004, 0.0004],
        [0.0007, 0.0014],
        [0.0004, 0.0011],
        [0.0005, 0.0010],
        [0.0005, 0.0011],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0657],
        [0.0635, 0.0613],
        [0.0615, 0.0633],
        [0.0627, 0.0621],
        [0.0648, 0.0601],
        [0.0609, 0.0640],
        [0.0595, 0.0655],
        [0.0599, 0.0650],
        [0.0634, 0.0615],
        [0.0570, 0.0683],
        [0.0744, 0.0523],
        [0.0627, 0.0621],
        [0.0609, 0.0639],
        [0.0649, 0.0600],
        [0.0621, 0.0627],
        [0.0625, 0.0623]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.356475
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0013],
        [0.0003, 0.0011],
        [0.0006, 0.0015],
        [0.0003, 0.0011],
        [0.0008, 0.0016],
        [0.0005, 0.0012],
        [0.0005, 0.0017],
        [0.0006, 0.0013],
        [0.0007, 0.0010],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0008, 0.0015],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0659],
        [0.0581, 0.0671],
        [0.0615, 0.0633],
        [0.0581, 0.0670],
        [0.0645, 0.0604],
        [0.0631, 0.0617],
        [0.0581, 0.0670],
        [0.0626, 0.0622],
        [0.0691, 0.0564],
        [0.0664, 0.0587],
        [0.0614, 0.0634],
        [0.0606, 0.0643],
        [0.0635, 0.0614],
        [0.0659, 0.0591],
        [0.0657, 0.0593],
        [0.0621, 0.0627]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.437954
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0008, 0.0014],
        [0.0007, 0.0012],
        [0.0006, 0.0011],
        [0.0005, 0.0009],
        [0.0003, 0.0009],
        [0.0007, 0.0015],
        [0.0003, 0.0012],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0007, 0.0014],
        [0.0003, 0.0010],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0614],
        [0.0655, 0.0595],
        [0.0656, 0.0594],
        [0.0647, 0.0603],
        [0.0640, 0.0609],
        [0.0592, 0.0658],
        [0.0627, 0.0622],
        [0.0561, 0.0696],
        [0.0647, 0.0603],
        [0.0638, 0.0611],
        [0.0648, 0.0602],
        [0.0587, 0.0664],
        [0.0638, 0.0611],
        [0.0602, 0.0647],
        [0.0614, 0.0635],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.356713
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0019],
        [0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0004, 0.0007],
        [0.0006, 0.0014],
        [0.0004, 0.0014],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0007, 0.0011],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0006, 0.0013],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0582, 0.0670],
        [0.0605, 0.0644],
        [0.0607, 0.0642],
        [0.0635, 0.0614],
        [0.0610, 0.0639],
        [0.0576, 0.0676],
        [0.0646, 0.0603],
        [0.0642, 0.0608],
        [0.0654, 0.0596],
        [0.0663, 0.0588],
        [0.0677, 0.0576],
        [0.0606, 0.0643],
        [0.0649, 0.0601],
        [0.0612, 0.0637],
        [0.0625, 0.0624],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.418343
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0017],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0006, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0006, 0.0016],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0005, 0.0016],
        [0.0003, 0.0007],
        [0.0004, 0.0011],
        [0.0004, 0.0008],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0604, 0.0645],
        [0.0638, 0.0611],
        [0.0703, 0.0554],
        [0.0652, 0.0597],
        [0.0618, 0.0631],
        [0.0651, 0.0598],
        [0.0606, 0.0643],
        [0.0597, 0.0652],
        [0.0651, 0.0598],
        [0.0596, 0.0654],
        [0.0579, 0.0674],
        [0.0629, 0.0619],
        [0.0583, 0.0668],
        [0.0648, 0.0601],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.419784
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0008, 0.0019],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0009, 0.0019],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0004, 0.0012],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0007, 0.0013],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0592, 0.0658],
        [0.0630, 0.0619],
        [0.0676, 0.0577],
        [0.0626, 0.0623],
        [0.0665, 0.0586],
        [0.0642, 0.0607],
        [0.0606, 0.0644],
        [0.0618, 0.0631],
        [0.0619, 0.0630],
        [0.0571, 0.0683],
        [0.0624, 0.0625],
        [0.0668, 0.0584],
        [0.0621, 0.0628],
        [0.0592, 0.0659],
        [0.0651, 0.0599],
        [0.0602, 0.0648]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.402708
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0012],
        [0.0004, 0.0012],
        [0.0009, 0.0017],
        [0.0005, 0.0011],
        [0.0003, 0.0010],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249]], device='cuda:0')
tensor([[0.1149, 0.1358],
        [0.1224, 0.1274],
        [0.1330, 0.1172],
        [0.1272, 0.1226],
        [0.1200, 0.1299],
        [0.1247, 0.1251],
        [0.1269, 0.1228],
        [0.1309, 0.1191]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.292244
acc:  0.555
Time taken to execute the en SA task with prompt type passive, variation 3 and batchsize 16: 0:00:04.793500
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([122, 2])
answers_probs just softmax dim 0: tensor([[0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082]], device='cuda:0')
tensor([[0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082],
        [0.0082, 0.0082]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0010, 0.0023],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0011],
        [0.0004, 0.0009],
        [0.0005, 0.0018],
        [0.0003, 0.0012],
        [0.0003, 0.0009],
        [0.0004, 0.0012],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0005, 0.0016],
        [0.0002, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0616],
        [0.0625, 0.0623],
        [0.0681, 0.0573],
        [0.0651, 0.0599],
        [0.0648, 0.0602],
        [0.0619, 0.0630],
        [0.0585, 0.0666],
        [0.0653, 0.0597],
        [0.0597, 0.0653],
        [0.0594, 0.0656],
        [0.0612, 0.0637],
        [0.0620, 0.0629],
        [0.0692, 0.0563],
        [0.0611, 0.0638],
        [0.0601, 0.0649],
        [0.0581, 0.0671]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.366195
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0004, 0.0012],
        [0.0003, 0.0008],
        [0.0003, 0.0010],
        [0.0004, 0.0013],
        [0.0003, 0.0011],
        [0.0001, 0.0006],
        [0.0004, 0.0012],
        [0.0004, 0.0012],
        [0.0003, 0.0008],
        [0.0005, 0.0012],
        [0.0003, 0.0011],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0004, 0.0010],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0646],
        [0.0630, 0.0619],
        [0.0635, 0.0614],
        [0.0604, 0.0645],
        [0.0612, 0.0638],
        [0.0589, 0.0662],
        [0.0594, 0.0656],
        [0.0630, 0.0619],
        [0.0636, 0.0613],
        [0.0630, 0.0619],
        [0.0666, 0.0585],
        [0.0611, 0.0638],
        [0.0681, 0.0573],
        [0.0600, 0.0650],
        [0.0655, 0.0595],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.325579
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0014],
        [0.0004, 0.0012],
        [0.0002, 0.0006],
        [0.0003, 0.0014],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0004, 0.0015],
        [0.0004, 0.0012],
        [0.0007, 0.0016],
        [0.0002, 0.0009],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0001, 0.0003],
        [0.0002, 0.0006],
        [0.0004, 0.0016],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0615],
        [0.0638, 0.0611],
        [0.0649, 0.0601],
        [0.0592, 0.0659],
        [0.0643, 0.0607],
        [0.0644, 0.0606],
        [0.0593, 0.0657],
        [0.0630, 0.0619],
        [0.0670, 0.0582],
        [0.0567, 0.0688],
        [0.0612, 0.0637],
        [0.0658, 0.0592],
        [0.0653, 0.0597],
        [0.0608, 0.0641],
        [0.0585, 0.0666],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.549569
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0011],
        [0.0003, 0.0009],
        [0.0002, 0.0009],
        [0.0002, 0.0007],
        [0.0002, 0.0007],
        [0.0002, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0013],
        [0.0001, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0003, 0.0010],
        [0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0012],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0585, 0.0664],
        [0.0597, 0.0651],
        [0.0571, 0.0681],
        [0.0620, 0.0627],
        [0.0611, 0.0637],
        [0.0593, 0.0656],
        [0.0687, 0.0565],
        [0.0587, 0.0662],
        [0.0573, 0.0678],
        [0.0656, 0.0593],
        [0.0608, 0.0639],
        [0.0603, 0.0645],
        [0.0627, 0.0620],
        [0.0721, 0.0539],
        [0.0644, 0.0603],
        [0.0718, 0.0541]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.483640
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0008],
        [0.0002, 0.0009],
        [0.0007, 0.0016],
        [0.0004, 0.0009],
        [0.0007, 0.0022],
        [0.0002, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0005, 0.0015],
        [0.0004, 0.0013],
        [0.0003, 0.0011],
        [0.0006, 0.0013],
        [0.0004, 0.0006],
        [0.0002, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0659],
        [0.0602, 0.0647],
        [0.0648, 0.0601],
        [0.0652, 0.0597],
        [0.0621, 0.0627],
        [0.0591, 0.0659],
        [0.0662, 0.0588],
        [0.0583, 0.0667],
        [0.0608, 0.0641],
        [0.0620, 0.0628],
        [0.0604, 0.0644],
        [0.0651, 0.0598],
        [0.0717, 0.0543],
        [0.0578, 0.0674],
        [0.0678, 0.0574],
        [0.0595, 0.0654]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.402941
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0002, 0.0007],
        [0.0001, 0.0004],
        [0.0004, 0.0012],
        [0.0004, 0.0010],
        [0.0003, 0.0010],
        [0.0004, 0.0015],
        [0.0004, 0.0010],
        [0.0004, 0.0015],
        [0.0002, 0.0006],
        [0.0005, 0.0014],
        [0.0003, 0.0014],
        [0.0002, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0014],
        [0.0004, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0621],
        [0.0635, 0.0614],
        [0.0644, 0.0606],
        [0.0643, 0.0607],
        [0.0663, 0.0588],
        [0.0607, 0.0643],
        [0.0613, 0.0637],
        [0.0643, 0.0607],
        [0.0600, 0.0651],
        [0.0601, 0.0649],
        [0.0633, 0.0616],
        [0.0587, 0.0665],
        [0.0605, 0.0645],
        [0.0639, 0.0611],
        [0.0643, 0.0607],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.442605
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0009],
        [0.0007, 0.0016],
        [0.0003, 0.0009],
        [0.0005, 0.0017],
        [0.0003, 0.0009],
        [0.0004, 0.0012],
        [0.0003, 0.0011],
        [0.0004, 0.0012],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0001, 0.0006],
        [0.0005, 0.0012],
        [0.0003, 0.0008],
        [0.0005, 0.0011],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0646],
        [0.0648, 0.0603],
        [0.0623, 0.0626],
        [0.0612, 0.0637],
        [0.0637, 0.0612],
        [0.0612, 0.0637],
        [0.0610, 0.0640],
        [0.0618, 0.0632],
        [0.0649, 0.0602],
        [0.0618, 0.0632],
        [0.0639, 0.0610],
        [0.0585, 0.0667],
        [0.0635, 0.0614],
        [0.0635, 0.0614],
        [0.0655, 0.0596],
        [0.0619, 0.0630]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.440334
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0005, 0.0017],
        [0.0003, 0.0005],
        [0.0003, 0.0013],
        [0.0002, 0.0007],
        [0.0006, 0.0010],
        [0.0012, 0.0018],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0003, 0.0011],
        [0.0003, 0.0013],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0010],
        [0.0002, 0.0009],
        [0.0005, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0628],
        [0.0601, 0.0647],
        [0.0694, 0.0561],
        [0.0585, 0.0665],
        [0.0613, 0.0635],
        [0.0696, 0.0559],
        [0.0701, 0.0555],
        [0.0637, 0.0611],
        [0.0631, 0.0617],
        [0.0601, 0.0647],
        [0.0580, 0.0671],
        [0.0605, 0.0643],
        [0.0652, 0.0597],
        [0.0597, 0.0652],
        [0.0587, 0.0663],
        [0.0600, 0.0649]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.416714
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0014],
        [0.0003, 0.0012],
        [0.0004, 0.0010],
        [0.0005, 0.0009],
        [0.0003, 0.0012],
        [0.0002, 0.0009],
        [0.0003, 0.0011],
        [0.0004, 0.0014],
        [0.0003, 0.0006],
        [0.0003, 0.0010],
        [0.0007, 0.0019],
        [0.0002, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0010],
        [0.0001, 0.0004],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0647],
        [0.0591, 0.0660],
        [0.0642, 0.0607],
        [0.0695, 0.0561],
        [0.0606, 0.0643],
        [0.0583, 0.0668],
        [0.0619, 0.0630],
        [0.0605, 0.0644],
        [0.0664, 0.0587],
        [0.0629, 0.0620],
        [0.0647, 0.0602],
        [0.0594, 0.0656],
        [0.0644, 0.0605],
        [0.0628, 0.0621],
        [0.0600, 0.0650],
        [0.0650, 0.0599]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.316434
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0013],
        [0.0004, 0.0012],
        [0.0003, 0.0007],
        [0.0001, 0.0005],
        [0.0007, 0.0023],
        [0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0005, 0.0022],
        [0.0002, 0.0009],
        [0.0002, 0.0008],
        [0.0005, 0.0012],
        [0.0005, 0.0017],
        [0.0003, 0.0011],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0620, 0.0629],
        [0.0618, 0.0632],
        [0.0655, 0.0595],
        [0.0619, 0.0630],
        [0.0611, 0.0639],
        [0.0654, 0.0596],
        [0.0614, 0.0635],
        [0.0678, 0.0576],
        [0.0648, 0.0602],
        [0.0591, 0.0660],
        [0.0600, 0.0650],
        [0.0599, 0.0651],
        [0.0643, 0.0607],
        [0.0603, 0.0646],
        [0.0607, 0.0642],
        [0.0640, 0.0610]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.438189
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0002, 0.0007],
        [0.0004, 0.0013],
        [0.0002, 0.0005],
        [0.0004, 0.0016],
        [0.0003, 0.0008],
        [0.0006, 0.0022],
        [0.0006, 0.0023],
        [0.0006, 0.0017],
        [0.0002, 0.0006],
        [0.0006, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0010],
        [0.0002, 0.0007],
        [0.0004, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0659, 0.0591],
        [0.0604, 0.0645],
        [0.0617, 0.0632],
        [0.0629, 0.0620],
        [0.0585, 0.0667],
        [0.0617, 0.0632],
        [0.0608, 0.0641],
        [0.0602, 0.0648],
        [0.0633, 0.0615],
        [0.0638, 0.0610],
        [0.0697, 0.0559],
        [0.0698, 0.0558],
        [0.0605, 0.0644],
        [0.0595, 0.0654],
        [0.0608, 0.0641],
        [0.0606, 0.0643]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.416175
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0017],
        [0.0005, 0.0015],
        [0.0005, 0.0010],
        [0.0004, 0.0012],
        [0.0003, 0.0009],
        [0.0004, 0.0017],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0004, 0.0015],
        [0.0002, 0.0006],
        [0.0002, 0.0009],
        [0.0004, 0.0011],
        [0.0007, 0.0020],
        [0.0003, 0.0009],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0584, 0.0667],
        [0.0630, 0.0619],
        [0.0666, 0.0585],
        [0.0612, 0.0638],
        [0.0622, 0.0627],
        [0.0584, 0.0668],
        [0.0673, 0.0579],
        [0.0653, 0.0597],
        [0.0655, 0.0595],
        [0.0613, 0.0636],
        [0.0613, 0.0636],
        [0.0598, 0.0652],
        [0.0645, 0.0605],
        [0.0626, 0.0622],
        [0.0630, 0.0619],
        [0.0595, 0.0655]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.360953
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0006, 0.0026],
        [0.0004, 0.0014],
        [0.0008, 0.0023],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0007, 0.0015],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1249],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1249]], device='cuda:0')
tensor([[0.1210, 0.1289],
        [0.1161, 0.1343],
        [0.1193, 0.1307],
        [0.1220, 0.1277],
        [0.1334, 0.1169],
        [0.1304, 0.1196],
        [0.1308, 0.1192],
        [0.1270, 0.1228]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.214743
acc:  0.475
Time taken to execute the en SA task with prompt type passive, variation 4 and batchsize 16: 0:00:05.195624
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([119, 2])
answers_probs just softmax dim 0: tensor([[0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084]], device='cuda:0')
tensor([[0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0010],
        [0.0007, 0.0009],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0006, 0.0011],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0579, 0.0673],
        [0.0570, 0.0684],
        [0.0687, 0.0567],
        [0.0624, 0.0625],
        [0.0607, 0.0642],
        [0.0623, 0.0626],
        [0.0636, 0.0613],
        [0.0606, 0.0643],
        [0.0637, 0.0612],
        [0.0682, 0.0572],
        [0.0603, 0.0646],
        [0.0619, 0.0629],
        [0.0629, 0.0619],
        [0.0659, 0.0591],
        [0.0649, 0.0600],
        [0.0591, 0.0659]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.364038
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0013],
        [0.0003, 0.0004],
        [0.0006, 0.0012],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0005, 0.0009],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0646, 0.0604],
        [0.0598, 0.0652],
        [0.0630, 0.0618],
        [0.0556, 0.0701],
        [0.0650, 0.0599],
        [0.0626, 0.0623],
        [0.0652, 0.0598],
        [0.0595, 0.0655],
        [0.0647, 0.0603],
        [0.0602, 0.0647],
        [0.0637, 0.0612],
        [0.0665, 0.0586],
        [0.0612, 0.0637],
        [0.0598, 0.0652],
        [0.0640, 0.0609],
        [0.0644, 0.0605]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.446832
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0008],
        [0.0006, 0.0020],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0004, 0.0015],
        [0.0008, 0.0018],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0665, 0.0586],
        [0.0644, 0.0605],
        [0.0622, 0.0626],
        [0.0677, 0.0576],
        [0.0576, 0.0677],
        [0.0647, 0.0602],
        [0.0617, 0.0632],
        [0.0618, 0.0631],
        [0.0604, 0.0645],
        [0.0625, 0.0623],
        [0.0588, 0.0662],
        [0.0628, 0.0620],
        [0.0647, 0.0602],
        [0.0562, 0.0693],
        [0.0626, 0.0622],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.285545
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0011],
        [0.0003, 0.0009],
        [0.0005, 0.0012],
        [0.0006, 0.0015],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0013],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0614],
        [0.0679, 0.0573],
        [0.0631, 0.0617],
        [0.0591, 0.0659],
        [0.0659, 0.0591],
        [0.0623, 0.0624],
        [0.0629, 0.0619],
        [0.0660, 0.0589],
        [0.0566, 0.0688],
        [0.0573, 0.0680],
        [0.0603, 0.0646],
        [0.0588, 0.0662],
        [0.0653, 0.0596],
        [0.0648, 0.0600],
        [0.0577, 0.0675],
        [0.0684, 0.0569]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.418299
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0006, 0.0010],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0017],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0648, 0.0601],
        [0.0660, 0.0590],
        [0.0608, 0.0641],
        [0.0575, 0.0678],
        [0.0594, 0.0656],
        [0.0635, 0.0613],
        [0.0632, 0.0617],
        [0.0642, 0.0607],
        [0.0631, 0.0618],
        [0.0621, 0.0628],
        [0.0578, 0.0674],
        [0.0634, 0.0615],
        [0.0682, 0.0571],
        [0.0578, 0.0674],
        [0.0656, 0.0594],
        [0.0626, 0.0622]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.400675
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0015],
        [0.0003, 0.0007],
        [0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0007, 0.0012],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0006, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0643, 0.0607],
        [0.0562, 0.0694],
        [0.0604, 0.0646],
        [0.0633, 0.0616],
        [0.0642, 0.0608],
        [0.0596, 0.0655],
        [0.0623, 0.0626],
        [0.0638, 0.0611],
        [0.0640, 0.0609],
        [0.0630, 0.0619],
        [0.0614, 0.0635],
        [0.0657, 0.0593],
        [0.0594, 0.0657],
        [0.0655, 0.0596],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.360385
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0007, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0007, 0.0015],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0009],
        [0.0007, 0.0010],
        [0.0002, 0.0005],
        [0.0006, 0.0011],
        [0.0005, 0.0011],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0578, 0.0674],
        [0.0657, 0.0593],
        [0.0630, 0.0618],
        [0.0603, 0.0646],
        [0.0616, 0.0633],
        [0.0662, 0.0589],
        [0.0627, 0.0622],
        [0.0551, 0.0707],
        [0.0659, 0.0591],
        [0.0614, 0.0635],
        [0.0646, 0.0603],
        [0.0608, 0.0641],
        [0.0648, 0.0601],
        [0.0669, 0.0582],
        [0.0632, 0.0616],
        [0.0600, 0.0650]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.357751
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0008, 0.0015],
        [0.0003, 0.0005],
        [0.0005, 0.0012],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0576, 0.0678],
        [0.0622, 0.0627],
        [0.0631, 0.0618],
        [0.0643, 0.0606],
        [0.0640, 0.0610],
        [0.0628, 0.0622],
        [0.0635, 0.0614],
        [0.0590, 0.0661],
        [0.0620, 0.0629],
        [0.0641, 0.0608],
        [0.0645, 0.0605],
        [0.0631, 0.0618],
        [0.0629, 0.0621],
        [0.0615, 0.0635],
        [0.0657, 0.0594],
        [0.0598, 0.0652]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.247937
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0009, 0.0012],
        [0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0571, 0.0682],
        [0.0592, 0.0658],
        [0.0675, 0.0577],
        [0.0592, 0.0657],
        [0.0566, 0.0688],
        [0.0646, 0.0602],
        [0.0629, 0.0619],
        [0.0675, 0.0577],
        [0.0630, 0.0618],
        [0.0661, 0.0589],
        [0.0611, 0.0638],
        [0.0581, 0.0670],
        [0.0638, 0.0610],
        [0.0628, 0.0620],
        [0.0689, 0.0565],
        [0.0617, 0.0631]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.475965
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0003],
        [0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0008, 0.0011],
        [0.0005, 0.0010],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0660],
        [0.0654, 0.0595],
        [0.0624, 0.0624],
        [0.0644, 0.0604],
        [0.0609, 0.0639],
        [0.0743, 0.0524],
        [0.0655, 0.0594],
        [0.0615, 0.0633],
        [0.0567, 0.0686],
        [0.0576, 0.0675],
        [0.0594, 0.0655],
        [0.0636, 0.0611],
        [0.0651, 0.0598],
        [0.0635, 0.0612],
        [0.0587, 0.0663],
        [0.0621, 0.0626]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.424174
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0607],
        [0.0616, 0.0633],
        [0.0642, 0.0608],
        [0.0631, 0.0618],
        [0.0566, 0.0690],
        [0.0657, 0.0594],
        [0.0596, 0.0655],
        [0.0614, 0.0635],
        [0.0650, 0.0600],
        [0.0610, 0.0640],
        [0.0647, 0.0603],
        [0.0635, 0.0615],
        [0.0611, 0.0639],
        [0.0616, 0.0633],
        [0.0625, 0.0624],
        [0.0642, 0.0608]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.353613
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0010, 0.0013],
        [0.0004, 0.0010],
        [0.0005, 0.0011],
        [0.0004, 0.0014],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0015],
        [0.0006, 0.0012],
        [0.0005, 0.0008],
        [0.0003, 0.0012],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0649],
        [0.0626, 0.0621],
        [0.0685, 0.0568],
        [0.0604, 0.0645],
        [0.0608, 0.0640],
        [0.0567, 0.0686],
        [0.0644, 0.0604],
        [0.0697, 0.0558],
        [0.0626, 0.0621],
        [0.0580, 0.0671],
        [0.0630, 0.0618],
        [0.0660, 0.0590],
        [0.0566, 0.0687],
        [0.0677, 0.0575],
        [0.0582, 0.0669],
        [0.0651, 0.0597]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.557047
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0007, 0.0012],
        [0.0003, 0.0010],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1422, 0.1095],
        [0.1259, 0.1237],
        [0.1267, 0.1228],
        [0.1299, 0.1198],
        [0.1139, 0.1366],
        [0.1172, 0.1328],
        [0.1219, 0.1277],
        [0.1223, 0.1272]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.230132
acc:  0.53
Time taken to execute the en SA task with prompt type passive, variation 5 and batchsize 16: 0:00:04.943359
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([107, 2])
answers_probs just softmax dim 0: tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0005, 0.0013],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0636],
        [0.0613, 0.0637],
        [0.0595, 0.0655],
        [0.0600, 0.0650],
        [0.0626, 0.0623],
        [0.0633, 0.0617],
        [0.0581, 0.0671],
        [0.0636, 0.0613],
        [0.0658, 0.0593],
        [0.0643, 0.0607],
        [0.0617, 0.0632],
        [0.0609, 0.0641],
        [0.0632, 0.0618],
        [0.0635, 0.0614],
        [0.0636, 0.0613],
        [0.0673, 0.0580]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.406767
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0008, 0.0013],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0012],
        [0.0004, 0.0013],
        [0.0003, 0.0005],
        [0.0006, 0.0014],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0614],
        [0.0599, 0.0651],
        [0.0616, 0.0633],
        [0.0622, 0.0627],
        [0.0614, 0.0635],
        [0.0641, 0.0608],
        [0.0663, 0.0588],
        [0.0645, 0.0605],
        [0.0610, 0.0639],
        [0.0605, 0.0644],
        [0.0633, 0.0616],
        [0.0578, 0.0675],
        [0.0574, 0.0679],
        [0.0677, 0.0576],
        [0.0626, 0.0622],
        [0.0661, 0.0590]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.558962
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0012],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0009],
        [0.0009, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0621],
        [0.0606, 0.0643],
        [0.0644, 0.0605],
        [0.0580, 0.0671],
        [0.0647, 0.0602],
        [0.0573, 0.0680],
        [0.0644, 0.0605],
        [0.0649, 0.0599],
        [0.0620, 0.0628],
        [0.0624, 0.0624],
        [0.0615, 0.0633],
        [0.0560, 0.0695],
        [0.0680, 0.0572],
        [0.0589, 0.0661],
        [0.0659, 0.0591],
        [0.0684, 0.0569]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.403018
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0007, 0.0016],
        [0.0004, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0013],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0001, 0.0006],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0594],
        [0.0616, 0.0632],
        [0.0644, 0.0605],
        [0.0638, 0.0611],
        [0.0686, 0.0568],
        [0.0653, 0.0597],
        [0.0618, 0.0630],
        [0.0594, 0.0656],
        [0.0649, 0.0601],
        [0.0652, 0.0598],
        [0.0557, 0.0700],
        [0.0578, 0.0675],
        [0.0616, 0.0632],
        [0.0594, 0.0655],
        [0.0632, 0.0616],
        [0.0618, 0.0630]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.443433
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0007, 0.0018],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0005, 0.0013],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0585, 0.0666],
        [0.0580, 0.0673],
        [0.0607, 0.0642],
        [0.0623, 0.0626],
        [0.0624, 0.0625],
        [0.0620, 0.0629],
        [0.0656, 0.0595],
        [0.0622, 0.0627],
        [0.0671, 0.0581],
        [0.0647, 0.0603],
        [0.0623, 0.0626],
        [0.0619, 0.0630],
        [0.0610, 0.0639],
        [0.0625, 0.0624],
        [0.0618, 0.0631],
        [0.0673, 0.0579]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.355599
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0013],
        [0.0004, 0.0008],
        [0.0006, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0013],
        [0.0004, 0.0009],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0622, 0.0627],
        [0.0625, 0.0623],
        [0.0587, 0.0663],
        [0.0668, 0.0583],
        [0.0593, 0.0657],
        [0.0571, 0.0682],
        [0.0626, 0.0622],
        [0.0684, 0.0569],
        [0.0622, 0.0627],
        [0.0604, 0.0645],
        [0.0587, 0.0663],
        [0.0602, 0.0647],
        [0.0631, 0.0617],
        [0.0670, 0.0581],
        [0.0679, 0.0573],
        [0.0627, 0.0621]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.244755
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0009, 0.0013],
        [0.0006, 0.0019],
        [0.0007, 0.0011],
        [0.0006, 0.0011],
        [0.0008, 0.0011],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0006, 0.0014],
        [0.0006, 0.0013],
        [0.0005, 0.0010],
        [0.0005, 0.0010],
        [0.0007, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0630],
        [0.0667, 0.0585],
        [0.0564, 0.0691],
        [0.0655, 0.0595],
        [0.0639, 0.0610],
        [0.0665, 0.0586],
        [0.0597, 0.0653],
        [0.0623, 0.0626],
        [0.0597, 0.0653],
        [0.0616, 0.0632],
        [0.0610, 0.0639],
        [0.0611, 0.0638],
        [0.0657, 0.0593],
        [0.0591, 0.0659],
        [0.0665, 0.0586],
        [0.0624, 0.0625]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.466959
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0004, 0.0011],
        [0.0002, 0.0005],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0008, 0.0016],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0583, 0.0667],
        [0.0579, 0.0672],
        [0.0573, 0.0679],
        [0.0690, 0.0564],
        [0.0645, 0.0603],
        [0.0603, 0.0645],
        [0.0734, 0.0530],
        [0.0616, 0.0632],
        [0.0649, 0.0599],
        [0.0606, 0.0642],
        [0.0612, 0.0636],
        [0.0631, 0.0617],
        [0.0623, 0.0624],
        [0.0648, 0.0600],
        [0.0602, 0.0646],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.416733
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0001, 0.0002],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0610, 0.0640],
        [0.0601, 0.0649],
        [0.0628, 0.0621],
        [0.0633, 0.0616],
        [0.0623, 0.0626],
        [0.0596, 0.0654],
        [0.0620, 0.0629],
        [0.0601, 0.0649],
        [0.0634, 0.0615],
        [0.0641, 0.0609],
        [0.0613, 0.0637],
        [0.0626, 0.0623],
        [0.0657, 0.0594],
        [0.0677, 0.0576],
        [0.0656, 0.0595],
        [0.0585, 0.0666]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.425953
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0002, 0.0008],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0003, 0.0012],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0007, 0.0015],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0005, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0620, 0.0629],
        [0.0652, 0.0598],
        [0.0608, 0.0641],
        [0.0573, 0.0680],
        [0.0661, 0.0589],
        [0.0618, 0.0631],
        [0.0628, 0.0620],
        [0.0650, 0.0599],
        [0.0571, 0.0683],
        [0.0645, 0.0604],
        [0.0644, 0.0605],
        [0.0628, 0.0620],
        [0.0672, 0.0580],
        [0.0638, 0.0611],
        [0.0614, 0.0635],
        [0.0578, 0.0674]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.402342
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0009, 0.0016],
        [0.0003, 0.0009],
        [0.0005, 0.0009],
        [0.0001, 0.0004],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0649, 0.0602],
        [0.0633, 0.0616],
        [0.0604, 0.0646],
        [0.0624, 0.0626],
        [0.0625, 0.0625],
        [0.0653, 0.0597],
        [0.0607, 0.0643],
        [0.0639, 0.0611],
        [0.0609, 0.0641],
        [0.0594, 0.0657],
        [0.0625, 0.0625],
        [0.0630, 0.0620],
        [0.0614, 0.0636],
        [0.0666, 0.0586],
        [0.0613, 0.0637],
        [0.0617, 0.0633]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.315077
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0650],
        [0.0619, 0.0630],
        [0.0670, 0.0582],
        [0.0632, 0.0616],
        [0.0629, 0.0619],
        [0.0622, 0.0627],
        [0.0593, 0.0656],
        [0.0603, 0.0646],
        [0.0657, 0.0593],
        [0.0630, 0.0618],
        [0.0590, 0.0660],
        [0.0587, 0.0663],
        [0.0626, 0.0623],
        [0.0608, 0.0641],
        [0.0611, 0.0637],
        [0.0724, 0.0538]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.359420
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0006, 0.0014],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0013],
        [0.0004, 0.0010],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1254, 0.1244],
        [0.1242, 0.1257],
        [0.1326, 0.1177],
        [0.1274, 0.1226],
        [0.1267, 0.1232],
        [0.1203, 0.1297],
        [0.1234, 0.1265],
        [0.1200, 0.1301]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.185838
acc:  0.41
Time taken to execute the en SA task with prompt type passive, variation 6 and batchsize 16: 0:00:05.007210
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_6']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([154, 2])
answers_probs just softmax dim 0: tensor([[0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065]], device='cuda:0')
tensor([[0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 7 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0001, 0.0002],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0008, 0.0013],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0006, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0650],
        [0.0628, 0.0622],
        [0.0623, 0.0626],
        [0.0636, 0.0613],
        [0.0643, 0.0607],
        [0.0650, 0.0600],
        [0.0595, 0.0656],
        [0.0610, 0.0640],
        [0.0658, 0.0593],
        [0.0619, 0.0631],
        [0.0604, 0.0646],
        [0.0585, 0.0667],
        [0.0642, 0.0608],
        [0.0661, 0.0591],
        [0.0644, 0.0605],
        [0.0603, 0.0647]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.502415
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0011],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0005],
        [0.0007, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0006, 0.0014],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0589],
        [0.0653, 0.0596],
        [0.0661, 0.0590],
        [0.0634, 0.0615],
        [0.0625, 0.0624],
        [0.0610, 0.0638],
        [0.0615, 0.0634],
        [0.0690, 0.0565],
        [0.0635, 0.0613],
        [0.0615, 0.0634],
        [0.0573, 0.0680],
        [0.0602, 0.0648],
        [0.0619, 0.0629],
        [0.0601, 0.0649],
        [0.0569, 0.0685],
        [0.0638, 0.0611]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.336180
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0006, 0.0007],
        [0.0005, 0.0010],
        [0.0008, 0.0020],
        [0.0002, 0.0003],
        [0.0006, 0.0009],
        [0.0005, 0.0005],
        [0.0005, 0.0010],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0690, 0.0564],
        [0.0587, 0.0664],
        [0.0592, 0.0657],
        [0.0636, 0.0612],
        [0.0589, 0.0660],
        [0.0679, 0.0573],
        [0.0604, 0.0645],
        [0.0571, 0.0682],
        [0.0628, 0.0620],
        [0.0642, 0.0607],
        [0.0695, 0.0560],
        [0.0607, 0.0642],
        [0.0584, 0.0667],
        [0.0616, 0.0631],
        [0.0630, 0.0618]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.445331
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0006, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0006, 0.0010],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0003],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0646],
        [0.0631, 0.0617],
        [0.0571, 0.0681],
        [0.0664, 0.0586],
        [0.0658, 0.0592],
        [0.0635, 0.0613],
        [0.0580, 0.0672],
        [0.0605, 0.0644],
        [0.0616, 0.0632],
        [0.0591, 0.0658],
        [0.0617, 0.0631],
        [0.0614, 0.0634],
        [0.0680, 0.0573],
        [0.0622, 0.0626],
        [0.0597, 0.0652],
        [0.0715, 0.0544]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.332537
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0007, 0.0012],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0610, 0.0639],
        [0.0623, 0.0626],
        [0.0636, 0.0613],
        [0.0646, 0.0604],
        [0.0647, 0.0603],
        [0.0625, 0.0624],
        [0.0603, 0.0646],
        [0.0582, 0.0670],
        [0.0599, 0.0651],
        [0.0686, 0.0569],
        [0.0632, 0.0617],
        [0.0667, 0.0584],
        [0.0596, 0.0654],
        [0.0603, 0.0646],
        [0.0601, 0.0648]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.482383
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0007, 0.0010],
        [0.0005, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0006, 0.0013],
        [0.0003, 0.0004],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0617],
        [0.0626, 0.0622],
        [0.0660, 0.0591],
        [0.0641, 0.0608],
        [0.0661, 0.0589],
        [0.0674, 0.0578],
        [0.0622, 0.0627],
        [0.0608, 0.0640],
        [0.0634, 0.0614],
        [0.0644, 0.0605],
        [0.0546, 0.0713],
        [0.0628, 0.0620],
        [0.0580, 0.0672],
        [0.0594, 0.0656],
        [0.0633, 0.0616],
        [0.0617, 0.0631]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.401551
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0007, 0.0015],
        [0.0007, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0007, 0.0009],
        [0.0005, 0.0007],
        [0.0006, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0005, 0.0013],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0007],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0579, 0.0672],
        [0.0577, 0.0675],
        [0.0663, 0.0587],
        [0.0603, 0.0646],
        [0.0632, 0.0616],
        [0.0629, 0.0619],
        [0.0643, 0.0605],
        [0.0630, 0.0618],
        [0.0662, 0.0588],
        [0.0600, 0.0649],
        [0.0679, 0.0574],
        [0.0555, 0.0702],
        [0.0614, 0.0634],
        [0.0649, 0.0600],
        [0.0646, 0.0603],
        [0.0637, 0.0611]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.444502
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0006],
        [0.0006, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0002],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0580, 0.0672],
        [0.0625, 0.0624],
        [0.0614, 0.0634],
        [0.0588, 0.0663],
        [0.0612, 0.0637],
        [0.0619, 0.0630],
        [0.0619, 0.0630],
        [0.0639, 0.0610],
        [0.0586, 0.0665],
        [0.0626, 0.0623],
        [0.0662, 0.0588],
        [0.0670, 0.0582],
        [0.0629, 0.0619],
        [0.0610, 0.0639],
        [0.0687, 0.0567],
        [0.0633, 0.0616]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.363269
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0006, 0.0008],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0013],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0004],
        [0.0006, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0003],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0642, 0.0607],
        [0.0655, 0.0595],
        [0.0612, 0.0637],
        [0.0623, 0.0626],
        [0.0574, 0.0680],
        [0.0613, 0.0636],
        [0.0617, 0.0632],
        [0.0625, 0.0624],
        [0.0582, 0.0670],
        [0.0621, 0.0628],
        [0.0653, 0.0598],
        [0.0619, 0.0630],
        [0.0634, 0.0615],
        [0.0625, 0.0624],
        [0.0682, 0.0572],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.424150
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0005],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0003],
        [0.0004, 0.0007],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0587],
        [0.0643, 0.0606],
        [0.0626, 0.0622],
        [0.0605, 0.0644],
        [0.0597, 0.0652],
        [0.0586, 0.0664],
        [0.0673, 0.0579],
        [0.0575, 0.0678],
        [0.0590, 0.0660],
        [0.0631, 0.0618],
        [0.0629, 0.0619],
        [0.0595, 0.0654],
        [0.0632, 0.0616],
        [0.0716, 0.0544],
        [0.0607, 0.0642],
        [0.0632, 0.0617]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.583362
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0005, 0.0008],
        [0.0007, 0.0013],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0007, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0646, 0.0604],
        [0.0643, 0.0606],
        [0.0594, 0.0656],
        [0.0617, 0.0632],
        [0.0637, 0.0612],
        [0.0580, 0.0672],
        [0.0660, 0.0591],
        [0.0621, 0.0628],
        [0.0610, 0.0640],
        [0.0584, 0.0668],
        [0.0655, 0.0595],
        [0.0627, 0.0622],
        [0.0673, 0.0579],
        [0.0633, 0.0616],
        [0.0596, 0.0654],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.404294
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0004, 0.0005],
        [0.0005, 0.0010],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0011, 0.0014],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0006, 0.0010],
        [0.0009, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0590, 0.0661],
        [0.0639, 0.0610],
        [0.0598, 0.0653],
        [0.0658, 0.0593],
        [0.0651, 0.0600],
        [0.0626, 0.0623],
        [0.0603, 0.0647],
        [0.0656, 0.0595],
        [0.0609, 0.0640],
        [0.0655, 0.0595],
        [0.0589, 0.0662],
        [0.0622, 0.0627],
        [0.0622, 0.0627],
        [0.0639, 0.0610],
        [0.0610, 0.0639],
        [0.0632, 0.0617]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.420435
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0007, 0.0013],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1274, 0.1225],
        [0.1249, 0.1250],
        [0.1191, 0.1310],
        [0.1315, 0.1187],
        [0.1193, 0.1308],
        [0.1244, 0.1255],
        [0.1249, 0.1250],
        [0.1286, 0.1214]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.228477
acc:  0.515
Time taken to execute the en SA task with prompt type passive, variation 7 and batchsize 16: 0:00:05.390839
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_7']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([134, 2])
answers_probs just softmax dim 0: tensor([[0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075]], device='cuda:0')
tensor([[0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075],
        [0.0075, 0.0075]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 8 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0005, 0.0013],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0007, 0.0013],
        [0.0004, 0.0012],
        [0.0006, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0018],
        [0.0005, 0.0013],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0620, 0.0629],
        [0.0633, 0.0616],
        [0.0614, 0.0635],
        [0.0606, 0.0643],
        [0.0596, 0.0654],
        [0.0630, 0.0619],
        [0.0656, 0.0595],
        [0.0603, 0.0647],
        [0.0671, 0.0581],
        [0.0673, 0.0579],
        [0.0614, 0.0635],
        [0.0570, 0.0684],
        [0.0611, 0.0638],
        [0.0640, 0.0609],
        [0.0640, 0.0609],
        [0.0623, 0.0625]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.403746
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0015],
        [0.0003, 0.0008],
        [0.0009, 0.0019],
        [0.0004, 0.0010],
        [0.0005, 0.0014],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0012],
        [0.0003, 0.0010],
        [0.0005, 0.0013],
        [0.0004, 0.0012],
        [0.0002, 0.0005],
        [0.0005, 0.0010],
        [0.0004, 0.0012],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0651],
        [0.0600, 0.0649],
        [0.0632, 0.0616],
        [0.0630, 0.0619],
        [0.0587, 0.0664],
        [0.0707, 0.0551],
        [0.0653, 0.0596],
        [0.0664, 0.0587],
        [0.0602, 0.0647],
        [0.0590, 0.0661],
        [0.0602, 0.0647],
        [0.0598, 0.0652],
        [0.0650, 0.0600],
        [0.0652, 0.0598],
        [0.0600, 0.0649],
        [0.0634, 0.0614]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.483781
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0006, 0.0014],
        [0.0004, 0.0013],
        [0.0006, 0.0010],
        [0.0007, 0.0013],
        [0.0005, 0.0012],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0006, 0.0015],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0654],
        [0.0625, 0.0624],
        [0.0588, 0.0664],
        [0.0667, 0.0585],
        [0.0637, 0.0612],
        [0.0622, 0.0627],
        [0.0637, 0.0612],
        [0.0618, 0.0631],
        [0.0600, 0.0651],
        [0.0661, 0.0591],
        [0.0650, 0.0600],
        [0.0623, 0.0626],
        [0.0619, 0.0630],
        [0.0639, 0.0611],
        [0.0611, 0.0639],
        [0.0606, 0.0644]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.568416
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0015],
        [0.0004, 0.0013],
        [0.0007, 0.0017],
        [0.0005, 0.0011],
        [0.0007, 0.0018],
        [0.0005, 0.0008],
        [0.0008, 0.0017],
        [0.0006, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0014],
        [0.0011, 0.0023],
        [0.0003, 0.0006],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0660, 0.0590],
        [0.0615, 0.0634],
        [0.0573, 0.0681],
        [0.0578, 0.0674],
        [0.0618, 0.0631],
        [0.0634, 0.0615],
        [0.0610, 0.0639],
        [0.0676, 0.0577],
        [0.0627, 0.0622],
        [0.0657, 0.0594],
        [0.0613, 0.0636],
        [0.0595, 0.0655],
        [0.0632, 0.0617],
        [0.0642, 0.0608],
        [0.0630, 0.0619]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.398424
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0013],
        [0.0005, 0.0013],
        [0.0004, 0.0010],
        [0.0003, 0.0011],
        [0.0002, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0005, 0.0018],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0006, 0.0017],
        [0.0007, 0.0018],
        [0.0005, 0.0010],
        [0.0005, 0.0010],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0625],
        [0.0621, 0.0628],
        [0.0612, 0.0637],
        [0.0582, 0.0670],
        [0.0614, 0.0635],
        [0.0657, 0.0594],
        [0.0619, 0.0630],
        [0.0579, 0.0673],
        [0.0693, 0.0563],
        [0.0650, 0.0600],
        [0.0622, 0.0627],
        [0.0607, 0.0642],
        [0.0606, 0.0643],
        [0.0642, 0.0607],
        [0.0645, 0.0604],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.417055
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0012],
        [0.0008, 0.0020],
        [0.0004, 0.0017],
        [0.0006, 0.0014],
        [0.0004, 0.0009],
        [0.0005, 0.0011],
        [0.0006, 0.0016],
        [0.0010, 0.0014],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0012],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0599],
        [0.0615, 0.0634],
        [0.0622, 0.0626],
        [0.0556, 0.0701],
        [0.0631, 0.0617],
        [0.0628, 0.0620],
        [0.0628, 0.0620],
        [0.0609, 0.0640],
        [0.0703, 0.0554],
        [0.0632, 0.0616],
        [0.0612, 0.0637],
        [0.0626, 0.0622],
        [0.0615, 0.0634],
        [0.0645, 0.0604],
        [0.0626, 0.0622],
        [0.0599, 0.0651]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.397771
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0006, 0.0011],
        [0.0006, 0.0016],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0002, 0.0004],
        [0.0005, 0.0014],
        [0.0005, 0.0010],
        [0.0003, 0.0013],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0006, 0.0023],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0593],
        [0.0599, 0.0650],
        [0.0654, 0.0595],
        [0.0597, 0.0652],
        [0.0674, 0.0578],
        [0.0692, 0.0563],
        [0.0617, 0.0631],
        [0.0678, 0.0574],
        [0.0634, 0.0614],
        [0.0589, 0.0661],
        [0.0639, 0.0609],
        [0.0565, 0.0689],
        [0.0603, 0.0645],
        [0.0624, 0.0623],
        [0.0557, 0.0698],
        [0.0621, 0.0627]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.446530
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0005, 0.0014],
        [0.0006, 0.0013],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0008, 0.0024],
        [0.0005, 0.0020],
        [0.0006, 0.0017],
        [0.0003, 0.0006],
        [0.0009, 0.0018],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0004, 0.0010],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0597],
        [0.0599, 0.0651],
        [0.0618, 0.0631],
        [0.0634, 0.0615],
        [0.0615, 0.0634],
        [0.0622, 0.0627],
        [0.0609, 0.0640],
        [0.0595, 0.0655],
        [0.0572, 0.0682],
        [0.0614, 0.0635],
        [0.0643, 0.0607],
        [0.0648, 0.0601],
        [0.0674, 0.0578],
        [0.0662, 0.0589],
        [0.0622, 0.0627],
        [0.0619, 0.0630]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.442932
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0006, 0.0020],
        [0.0005, 0.0015],
        [0.0003, 0.0012],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0009, 0.0020],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0583, 0.0668],
        [0.0592, 0.0658],
        [0.0571, 0.0682],
        [0.0625, 0.0624],
        [0.0673, 0.0579],
        [0.0619, 0.0630],
        [0.0625, 0.0624],
        [0.0696, 0.0560],
        [0.0622, 0.0627],
        [0.0648, 0.0602],
        [0.0640, 0.0609],
        [0.0613, 0.0636],
        [0.0644, 0.0605],
        [0.0627, 0.0622],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.403604
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0005, 0.0011],
        [0.0006, 0.0013],
        [0.0005, 0.0013],
        [0.0006, 0.0013],
        [0.0006, 0.0012],
        [0.0005, 0.0012],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0012],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0654],
        [0.0641, 0.0609],
        [0.0597, 0.0653],
        [0.0618, 0.0632],
        [0.0633, 0.0616],
        [0.0625, 0.0624],
        [0.0614, 0.0636],
        [0.0628, 0.0621],
        [0.0648, 0.0602],
        [0.0601, 0.0649],
        [0.0628, 0.0621],
        [0.0674, 0.0579],
        [0.0622, 0.0627],
        [0.0669, 0.0583],
        [0.0620, 0.0630],
        [0.0586, 0.0665]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.338583
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0005, 0.0016],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0006, 0.0017],
        [0.0003, 0.0011],
        [0.0004, 0.0011],
        [0.0009, 0.0020],
        [0.0003, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0610],
        [0.0681, 0.0572],
        [0.0596, 0.0654],
        [0.0635, 0.0613],
        [0.0641, 0.0608],
        [0.0610, 0.0639],
        [0.0574, 0.0679],
        [0.0599, 0.0651],
        [0.0622, 0.0627],
        [0.0628, 0.0621],
        [0.0596, 0.0654],
        [0.0581, 0.0671],
        [0.0678, 0.0574],
        [0.0670, 0.0582],
        [0.0654, 0.0595],
        [0.0599, 0.0651]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.357464
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0006, 0.0011],
        [0.0005, 0.0012],
        [0.0005, 0.0015],
        [0.0005, 0.0011],
        [0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0004, 0.0015],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0013],
        [0.0006, 0.0017],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0607],
        [0.0596, 0.0653],
        [0.0643, 0.0605],
        [0.0678, 0.0574],
        [0.0643, 0.0605],
        [0.0608, 0.0640],
        [0.0584, 0.0667],
        [0.0620, 0.0628],
        [0.0653, 0.0597],
        [0.0680, 0.0572],
        [0.0572, 0.0681],
        [0.0667, 0.0584],
        [0.0642, 0.0606],
        [0.0568, 0.0685],
        [0.0598, 0.0651],
        [0.0606, 0.0643]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.476329
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0005, 0.0010],
        [0.0007, 0.0016],
        [0.0003, 0.0007],
        [0.0006, 0.0022],
        [0.0006, 0.0019],
        [0.0006, 0.0012],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1251],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1423, 0.1094],
        [0.1274, 0.1222],
        [0.1242, 0.1253],
        [0.1222, 0.1274],
        [0.1134, 0.1373],
        [0.1183, 0.1316],
        [0.1246, 0.1249],
        [0.1276, 0.1220]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.227364
acc:  0.585
Time taken to execute the en SA task with prompt type passive, variation 8 and batchsize 16: 0:00:05.383070
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_8']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([127, 2])
answers_probs just softmax dim 0: tensor([[0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079]], device='cuda:0')
tensor([[0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079],
        [0.0079, 0.0079]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA passive 9 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0006, 0.0011],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0013],
        [0.0005, 0.0011],
        [0.0003, 0.0005],
        [0.0008, 0.0010],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0007, 0.0016],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0647, 0.0602],
        [0.0636, 0.0613],
        [0.0666, 0.0585],
        [0.0607, 0.0642],
        [0.0626, 0.0622],
        [0.0637, 0.0612],
        [0.0595, 0.0655],
        [0.0578, 0.0674],
        [0.0591, 0.0659],
        [0.0631, 0.0618],
        [0.0689, 0.0565],
        [0.0614, 0.0634],
        [0.0665, 0.0586],
        [0.0625, 0.0623],
        [0.0589, 0.0661],
        [0.0602, 0.0647]], device='cuda:0')
 Batch: 0 of passive classification Duration: 0:00:00.371983
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0002, 0.0004],
        [0.0005, 0.0014],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0009, 0.0015],
        [0.0004, 0.0007],
        [0.0007, 0.0015],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0586, 0.0666],
        [0.0629, 0.0620],
        [0.0576, 0.0677],
        [0.0600, 0.0650],
        [0.0618, 0.0631],
        [0.0643, 0.0607],
        [0.0625, 0.0624],
        [0.0627, 0.0622],
        [0.0627, 0.0622],
        [0.0665, 0.0586],
        [0.0663, 0.0588],
        [0.0596, 0.0654],
        [0.0654, 0.0596],
        [0.0640, 0.0609],
        [0.0654, 0.0596],
        [0.0597, 0.0653]], device='cuda:0')
 Batch: 1 of passive classification Duration: 0:00:00.442530
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0006, 0.0016],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0008, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0617],
        [0.0575, 0.0678],
        [0.0593, 0.0657],
        [0.0628, 0.0621],
        [0.0648, 0.0601],
        [0.0600, 0.0650],
        [0.0641, 0.0608],
        [0.0607, 0.0642],
        [0.0692, 0.0563],
        [0.0625, 0.0624],
        [0.0611, 0.0639],
        [0.0634, 0.0615],
        [0.0642, 0.0607],
        [0.0626, 0.0623],
        [0.0613, 0.0636],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 2 of passive classification Duration: 0:00:00.449361
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0007, 0.0015],
        [0.0010, 0.0015],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0607, 0.0643],
        [0.0658, 0.0593],
        [0.0598, 0.0652],
        [0.0636, 0.0613],
        [0.0631, 0.0618],
        [0.0603, 0.0647],
        [0.0595, 0.0655],
        [0.0659, 0.0592],
        [0.0594, 0.0656],
        [0.0624, 0.0625],
        [0.0651, 0.0599],
        [0.0593, 0.0658],
        [0.0645, 0.0605],
        [0.0613, 0.0636],
        [0.0623, 0.0626],
        [0.0671, 0.0582]], device='cuda:0')
 Batch: 3 of passive classification Duration: 0:00:00.423373
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0006, 0.0009],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0007, 0.0022],
        [0.0009, 0.0020],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0613],
        [0.0659, 0.0590],
        [0.0645, 0.0603],
        [0.0625, 0.0623],
        [0.0603, 0.0645],
        [0.0607, 0.0641],
        [0.0638, 0.0610],
        [0.0724, 0.0537],
        [0.0663, 0.0587],
        [0.0569, 0.0684],
        [0.0651, 0.0598],
        [0.0626, 0.0622],
        [0.0581, 0.0670],
        [0.0571, 0.0682],
        [0.0612, 0.0636],
        [0.0590, 0.0660]], device='cuda:0')
 Batch: 4 of passive classification Duration: 0:00:00.296767
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0003],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0605, 0.0644],
        [0.0617, 0.0631],
        [0.0627, 0.0621],
        [0.0568, 0.0685],
        [0.0668, 0.0583],
        [0.0651, 0.0598],
        [0.0568, 0.0685],
        [0.0625, 0.0622],
        [0.0660, 0.0589],
        [0.0725, 0.0536],
        [0.0589, 0.0660],
        [0.0631, 0.0617],
        [0.0657, 0.0593],
        [0.0590, 0.0659],
        [0.0623, 0.0624],
        [0.0596, 0.0653]], device='cuda:0')
 Batch: 5 of passive classification Duration: 0:00:00.401057
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0003, 0.0010],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0012],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0632, 0.0617],
        [0.0656, 0.0595],
        [0.0621, 0.0628],
        [0.0592, 0.0658],
        [0.0560, 0.0696],
        [0.0621, 0.0628],
        [0.0628, 0.0621],
        [0.0625, 0.0624],
        [0.0602, 0.0648],
        [0.0644, 0.0606],
        [0.0628, 0.0621],
        [0.0654, 0.0596],
        [0.0650, 0.0600],
        [0.0638, 0.0611],
        [0.0652, 0.0598],
        [0.0598, 0.0652]], device='cuda:0')
 Batch: 6 of passive classification Duration: 0:00:00.360669
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0003, 0.0005],
        [0.0006, 0.0015],
        [0.0004, 0.0005],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0005, 0.0011],
        [0.0002, 0.0006],
        [0.0005, 0.0006],
        [0.0002, 0.0004],
        [0.0006, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0003, 0.0009],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0659],
        [0.0632, 0.0616],
        [0.0598, 0.0652],
        [0.0669, 0.0582],
        [0.0624, 0.0624],
        [0.0586, 0.0664],
        [0.0613, 0.0636],
        [0.0577, 0.0675],
        [0.0699, 0.0557],
        [0.0611, 0.0638],
        [0.0645, 0.0604],
        [0.0638, 0.0611],
        [0.0641, 0.0608],
        [0.0682, 0.0571],
        [0.0585, 0.0666],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 7 of passive classification Duration: 0:00:00.556751
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0006, 0.0017],
        [0.0004, 0.0010],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0002, 0.0002],
        [0.0006, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0007, 0.0008],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0644],
        [0.0600, 0.0649],
        [0.0603, 0.0645],
        [0.0582, 0.0668],
        [0.0584, 0.0665],
        [0.0607, 0.0641],
        [0.0587, 0.0662],
        [0.0579, 0.0672],
        [0.0711, 0.0547],
        [0.0689, 0.0564],
        [0.0621, 0.0626],
        [0.0599, 0.0649],
        [0.0633, 0.0614],
        [0.0615, 0.0632],
        [0.0694, 0.0560],
        [0.0692, 0.0562]], device='cuda:0')
 Batch: 8 of passive classification Duration: 0:00:00.337674
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0007, 0.0009],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0013],
        [0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0609, 0.0640],
        [0.0656, 0.0593],
        [0.0597, 0.0652],
        [0.0569, 0.0684],
        [0.0674, 0.0578],
        [0.0649, 0.0600],
        [0.0640, 0.0608],
        [0.0636, 0.0612],
        [0.0656, 0.0593],
        [0.0619, 0.0629],
        [0.0589, 0.0661],
        [0.0566, 0.0688],
        [0.0665, 0.0585],
        [0.0656, 0.0593],
        [0.0576, 0.0676]], device='cuda:0')
 Batch: 9 of passive classification Duration: 0:00:00.422320
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0002, 0.0003],
        [0.0004, 0.0012],
        [0.0003, 0.0005],
        [0.0002, 0.0002],
        [0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0005, 0.0011],
        [0.0009, 0.0020],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0588],
        [0.0604, 0.0643],
        [0.0614, 0.0633],
        [0.0669, 0.0582],
        [0.0555, 0.0701],
        [0.0637, 0.0610],
        [0.0719, 0.0540],
        [0.0652, 0.0596],
        [0.0617, 0.0630],
        [0.0564, 0.0689],
        [0.0565, 0.0688],
        [0.0632, 0.0615],
        [0.0685, 0.0567],
        [0.0618, 0.0629],
        [0.0607, 0.0640],
        [0.0600, 0.0648]], device='cuda:0')
 Batch: 10 of passive classification Duration: 0:00:00.400058
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0014],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0011],
        [0.0005, 0.0010],
        [0.0006, 0.0012],
        [0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0005, 0.0014],
        [0.0003, 0.0004],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0641],
        [0.0616, 0.0633],
        [0.0676, 0.0576],
        [0.0643, 0.0606],
        [0.0678, 0.0575],
        [0.0631, 0.0618],
        [0.0579, 0.0673],
        [0.0617, 0.0632],
        [0.0641, 0.0608],
        [0.0631, 0.0618],
        [0.0598, 0.0652],
        [0.0594, 0.0656],
        [0.0642, 0.0607],
        [0.0585, 0.0666],
        [0.0671, 0.0581],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 11 of passive classification Duration: 0:00:00.485661
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0006, 0.0010],
        [0.0011, 0.0025]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1251, 0.1252]], device='cuda:0')
tensor([[0.1285, 0.1214],
        [0.1264, 0.1235],
        [0.1312, 0.1190],
        [0.1224, 0.1275],
        [0.1276, 0.1224],
        [0.1189, 0.1312],
        [0.1253, 0.1246],
        [0.1197, 0.1304]], device='cuda:0')
 Batch: 12 of passive classification Duration: 0:00:00.210911
acc:  0.555
Time taken to execute the en SA task with prompt type passive, variation 9 and batchsize 16: 0:00:05.177742
path ['42', 'en', 'bloom-big', 'SA', 'passive', 'prompt_id_9']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

prompt_type auxiliary has 10 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([87, 2])
answers_probs just softmax dim 0: tensor([[0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115]], device='cuda:0')
tensor([[0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115],
        [0.0115, 0.0115]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[4.8709e-04, 7.4863e-04],
        [2.6298e-04, 3.9458e-04],
        [3.5906e-04, 6.1560e-04],
        [2.6917e-04, 6.5613e-04],
        [8.3685e-04, 1.4238e-03],
        [2.0456e-04, 1.6689e-04],
        [9.4831e-05, 3.7503e-04],
        [5.2357e-04, 8.9788e-04],
        [5.5790e-04, 9.4938e-04],
        [4.7660e-04, 8.3017e-04],
        [3.7551e-04, 7.5245e-04],
        [3.3832e-04, 6.3705e-04],
        [2.9039e-04, 4.7135e-04],
        [2.3139e-04, 4.0936e-04],
        [3.9363e-04, 4.3583e-04],
        [4.8804e-04, 8.4305e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0609],
        [0.0641, 0.0606],
        [0.0622, 0.0625],
        [0.0575, 0.0676],
        [0.0623, 0.0624],
        [0.0746, 0.0521],
        [0.0526, 0.0739],
        [0.0621, 0.0625],
        [0.0623, 0.0624],
        [0.0619, 0.0628],
        [0.0600, 0.0648],
        [0.0608, 0.0639],
        [0.0630, 0.0617],
        [0.0617, 0.0630],
        [0.0691, 0.0562],
        [0.0620, 0.0626]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.373327
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0008, 0.0013],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0005, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0002, 0.0004],
        [0.0006, 0.0008],
        [0.0005, 0.0007],
        [0.0005, 0.0006],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0631],
        [0.0602, 0.0647],
        [0.0612, 0.0637],
        [0.0636, 0.0613],
        [0.0607, 0.0642],
        [0.0669, 0.0583],
        [0.0580, 0.0672],
        [0.0577, 0.0675],
        [0.0584, 0.0667],
        [0.0642, 0.0607],
        [0.0655, 0.0595],
        [0.0603, 0.0646],
        [0.0650, 0.0600],
        [0.0625, 0.0623],
        [0.0676, 0.0576],
        [0.0665, 0.0586]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.425984
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0006, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0008, 0.0008],
        [0.0007, 0.0010],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0617],
        [0.0626, 0.0623],
        [0.0614, 0.0635],
        [0.0621, 0.0628],
        [0.0629, 0.0619],
        [0.0588, 0.0663],
        [0.0646, 0.0603],
        [0.0554, 0.0703],
        [0.0647, 0.0602],
        [0.0598, 0.0651],
        [0.0674, 0.0578],
        [0.0603, 0.0646],
        [0.0606, 0.0643],
        [0.0674, 0.0578],
        [0.0623, 0.0625],
        [0.0665, 0.0586]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.403142
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0003, 0.0009],
        [0.0004, 0.0004],
        [0.0005, 0.0006],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0006, 0.0007],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0645],
        [0.0555, 0.0700],
        [0.0699, 0.0555],
        [0.0689, 0.0564],
        [0.0563, 0.0690],
        [0.0583, 0.0666],
        [0.0616, 0.0630],
        [0.0636, 0.0611],
        [0.0598, 0.0649],
        [0.0588, 0.0660],
        [0.0603, 0.0644],
        [0.0648, 0.0600],
        [0.0625, 0.0621],
        [0.0593, 0.0655],
        [0.0691, 0.0562],
        [0.0710, 0.0547]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.394586
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0008, 0.0013],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0004, 0.0004],
        [0.0006, 0.0015],
        [0.0005, 0.0009],
        [0.0006, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0634],
        [0.0615, 0.0633],
        [0.0632, 0.0616],
        [0.0617, 0.0631],
        [0.0647, 0.0602],
        [0.0575, 0.0677],
        [0.0610, 0.0638],
        [0.0639, 0.0610],
        [0.0618, 0.0630],
        [0.0699, 0.0557],
        [0.0569, 0.0684],
        [0.0622, 0.0626],
        [0.0693, 0.0562],
        [0.0610, 0.0638],
        [0.0661, 0.0589],
        [0.0578, 0.0673]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.416327
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0007, 0.0009],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0615],
        [0.0662, 0.0588],
        [0.0607, 0.0641],
        [0.0671, 0.0581],
        [0.0672, 0.0579],
        [0.0659, 0.0591],
        [0.0643, 0.0606],
        [0.0621, 0.0627],
        [0.0586, 0.0665],
        [0.0598, 0.0652],
        [0.0600, 0.0649],
        [0.0590, 0.0661],
        [0.0578, 0.0674],
        [0.0607, 0.0641],
        [0.0666, 0.0585],
        [0.0605, 0.0644]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.355392
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0007, 0.0011],
        [0.0005, 0.0007],
        [0.0006, 0.0010],
        [0.0002, 0.0005],
        [0.0006, 0.0011],
        [0.0007, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0611],
        [0.0629, 0.0620],
        [0.0572, 0.0681],
        [0.0641, 0.0608],
        [0.0598, 0.0651],
        [0.0638, 0.0611],
        [0.0625, 0.0623],
        [0.0614, 0.0635],
        [0.0584, 0.0667],
        [0.0676, 0.0577],
        [0.0629, 0.0620],
        [0.0648, 0.0602],
        [0.0637, 0.0612],
        [0.0580, 0.0672],
        [0.0616, 0.0632],
        [0.0673, 0.0579]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.538720
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0005, 0.0007],
        [0.0003, 0.0003],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0010],
        [0.0005, 0.0010],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0618],
        [0.0654, 0.0596],
        [0.0646, 0.0603],
        [0.0642, 0.0607],
        [0.0656, 0.0594],
        [0.0645, 0.0604],
        [0.0617, 0.0631],
        [0.0633, 0.0616],
        [0.0650, 0.0600],
        [0.0577, 0.0676],
        [0.0580, 0.0672],
        [0.0568, 0.0686],
        [0.0620, 0.0629],
        [0.0593, 0.0657],
        [0.0646, 0.0603],
        [0.0644, 0.0606]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.421818
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0004, 0.0007],
        [0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0608],
        [0.0587, 0.0664],
        [0.0581, 0.0672],
        [0.0630, 0.0620],
        [0.0620, 0.0630],
        [0.0645, 0.0605],
        [0.0629, 0.0621],
        [0.0638, 0.0612],
        [0.0616, 0.0633],
        [0.0602, 0.0648],
        [0.0604, 0.0645],
        [0.0635, 0.0614],
        [0.0675, 0.0578],
        [0.0627, 0.0622],
        [0.0626, 0.0623],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.355670
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0008, 0.0012],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0626],
        [0.0600, 0.0650],
        [0.0656, 0.0594],
        [0.0607, 0.0642],
        [0.0651, 0.0599],
        [0.0581, 0.0671],
        [0.0635, 0.0614],
        [0.0626, 0.0623],
        [0.0651, 0.0599],
        [0.0603, 0.0646],
        [0.0599, 0.0651],
        [0.0581, 0.0671],
        [0.0665, 0.0587],
        [0.0612, 0.0637],
        [0.0642, 0.0607],
        [0.0668, 0.0583]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.394674
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0007, 0.0011],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0605, 0.0645],
        [0.0652, 0.0598],
        [0.0617, 0.0632],
        [0.0604, 0.0646],
        [0.0656, 0.0594],
        [0.0675, 0.0578],
        [0.0627, 0.0622],
        [0.0632, 0.0617],
        [0.0596, 0.0654],
        [0.0660, 0.0591],
        [0.0632, 0.0617],
        [0.0636, 0.0613],
        [0.0633, 0.0616],
        [0.0617, 0.0632],
        [0.0590, 0.0661],
        [0.0570, 0.0684]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.319067
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0006],
        [0.0004, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0005],
        [0.0012, 0.0013],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0006, 0.0007],
        [0.0004, 0.0006],
        [0.0007, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0681, 0.0571],
        [0.0565, 0.0688],
        [0.0609, 0.0639],
        [0.0689, 0.0565],
        [0.0689, 0.0565],
        [0.0608, 0.0640],
        [0.0610, 0.0638],
        [0.0549, 0.0709],
        [0.0663, 0.0587],
        [0.0621, 0.0626],
        [0.0600, 0.0648],
        [0.0617, 0.0631],
        [0.0619, 0.0629],
        [0.0661, 0.0588],
        [0.0616, 0.0632],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.334450
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1161, 0.1343],
        [0.1338, 0.1165],
        [0.1278, 0.1220],
        [0.1185, 0.1316],
        [0.1239, 0.1259],
        [0.1285, 0.1213],
        [0.1310, 0.1190],
        [0.1204, 0.1295]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.115015
acc:  0.425
Time taken to execute the en SA task with prompt type auxiliary, variation 0 and batchsize 16: 0:00:04.870704
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([100, 2])
answers_probs just softmax dim 0: tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0001, 0.0003],
        [0.0002, 0.0006],
        [0.0003, 0.0010],
        [0.0003, 0.0005],
        [0.0005, 0.0012],
        [0.0005, 0.0011],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0663, 0.0588],
        [0.0624, 0.0624],
        [0.0614, 0.0635],
        [0.0613, 0.0636],
        [0.0612, 0.0637],
        [0.0582, 0.0670],
        [0.0598, 0.0651],
        [0.0581, 0.0671],
        [0.0656, 0.0594],
        [0.0606, 0.0643],
        [0.0634, 0.0615],
        [0.0683, 0.0571],
        [0.0643, 0.0606],
        [0.0644, 0.0605],
        [0.0629, 0.0620],
        [0.0617, 0.0632]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.365038
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0011],
        [0.0007, 0.0013],
        [0.0005, 0.0014],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0587, 0.0662],
        [0.0671, 0.0580],
        [0.0663, 0.0586],
        [0.0545, 0.0714],
        [0.0635, 0.0613],
        [0.0571, 0.0680],
        [0.0604, 0.0644],
        [0.0636, 0.0612],
        [0.0706, 0.0550],
        [0.0596, 0.0653],
        [0.0583, 0.0667],
        [0.0601, 0.0647],
        [0.0651, 0.0597],
        [0.0658, 0.0591],
        [0.0671, 0.0580],
        [0.0622, 0.0625]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.315904
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0004, 0.0006],
        [0.0002, 0.0002],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0623],
        [0.0631, 0.0617],
        [0.0612, 0.0636],
        [0.0622, 0.0626],
        [0.0655, 0.0594],
        [0.0633, 0.0615],
        [0.0607, 0.0641],
        [0.0593, 0.0656],
        [0.0591, 0.0658],
        [0.0565, 0.0689],
        [0.0640, 0.0608],
        [0.0763, 0.0510],
        [0.0643, 0.0605],
        [0.0617, 0.0630],
        [0.0597, 0.0652],
        [0.0607, 0.0641]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.396671
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0635, 0.0614],
        [0.0596, 0.0654],
        [0.0703, 0.0554],
        [0.0655, 0.0595],
        [0.0577, 0.0676],
        [0.0652, 0.0598],
        [0.0605, 0.0644],
        [0.0640, 0.0609],
        [0.0631, 0.0618],
        [0.0640, 0.0609],
        [0.0599, 0.0651],
        [0.0613, 0.0636],
        [0.0619, 0.0630],
        [0.0623, 0.0626],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.441986
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0609],
        [0.0659, 0.0592],
        [0.0589, 0.0662],
        [0.0592, 0.0659],
        [0.0621, 0.0628],
        [0.0600, 0.0650],
        [0.0649, 0.0601],
        [0.0641, 0.0608],
        [0.0638, 0.0611],
        [0.0664, 0.0587],
        [0.0630, 0.0619],
        [0.0621, 0.0628],
        [0.0573, 0.0680],
        [0.0671, 0.0581],
        [0.0609, 0.0641],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.310426
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0006, 0.0009],
        [0.0002, 0.0006],
        [0.0004, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0010],
        [0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0007, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0626],
        [0.0628, 0.0620],
        [0.0673, 0.0579],
        [0.0661, 0.0589],
        [0.0592, 0.0658],
        [0.0580, 0.0672],
        [0.0605, 0.0644],
        [0.0573, 0.0679],
        [0.0592, 0.0658],
        [0.0670, 0.0581],
        [0.0644, 0.0605],
        [0.0575, 0.0677],
        [0.0645, 0.0603],
        [0.0625, 0.0623],
        [0.0669, 0.0582],
        [0.0647, 0.0602]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.446347
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0003],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0007, 0.0008],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0681, 0.0572],
        [0.0616, 0.0632],
        [0.0664, 0.0586],
        [0.0646, 0.0603],
        [0.0612, 0.0636],
        [0.0607, 0.0641],
        [0.0634, 0.0614],
        [0.0644, 0.0604],
        [0.0604, 0.0645],
        [0.0642, 0.0606],
        [0.0607, 0.0641],
        [0.0631, 0.0617],
        [0.0569, 0.0684],
        [0.0577, 0.0674],
        [0.0704, 0.0553],
        [0.0562, 0.0692]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.326794
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0004],
        [0.0006, 0.0012],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0007, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0655],
        [0.0599, 0.0650],
        [0.0586, 0.0664],
        [0.0654, 0.0595],
        [0.0586, 0.0664],
        [0.0626, 0.0622],
        [0.0663, 0.0587],
        [0.0711, 0.0547],
        [0.0604, 0.0644],
        [0.0578, 0.0673],
        [0.0586, 0.0664],
        [0.0697, 0.0558],
        [0.0635, 0.0613],
        [0.0620, 0.0627],
        [0.0585, 0.0665],
        [0.0680, 0.0572]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.358404
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0001, 0.0002],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0007, 0.0011],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0635],
        [0.0607, 0.0643],
        [0.0639, 0.0610],
        [0.0618, 0.0630],
        [0.0625, 0.0624],
        [0.0680, 0.0573],
        [0.0612, 0.0637],
        [0.0658, 0.0592],
        [0.0601, 0.0648],
        [0.0627, 0.0621],
        [0.0655, 0.0595],
        [0.0594, 0.0656],
        [0.0605, 0.0644],
        [0.0670, 0.0582],
        [0.0624, 0.0625],
        [0.0570, 0.0684]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.404002
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0001, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0001, 0.0003],
        [0.0005, 0.0008],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0578, 0.0674],
        [0.0642, 0.0608],
        [0.0571, 0.0683],
        [0.0599, 0.0651],
        [0.0655, 0.0596],
        [0.0635, 0.0614],
        [0.0628, 0.0621],
        [0.0645, 0.0604],
        [0.0652, 0.0598],
        [0.0659, 0.0591],
        [0.0612, 0.0637],
        [0.0600, 0.0650],
        [0.0615, 0.0634],
        [0.0604, 0.0645],
        [0.0652, 0.0598],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.544042
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0008, 0.0016],
        [0.0003, 0.0004],
        [0.0010, 0.0012],
        [0.0003, 0.0009],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0619],
        [0.0636, 0.0612],
        [0.0613, 0.0635],
        [0.0650, 0.0600],
        [0.0661, 0.0589],
        [0.0591, 0.0659],
        [0.0643, 0.0605],
        [0.0627, 0.0621],
        [0.0612, 0.0636],
        [0.0623, 0.0625],
        [0.0695, 0.0560],
        [0.0594, 0.0655],
        [0.0616, 0.0633],
        [0.0679, 0.0574],
        [0.0563, 0.0691],
        [0.0568, 0.0686]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.424810
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0003, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0006, 0.0012],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0009],
        [0.0001, 0.0003],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0629],
        [0.0634, 0.0614],
        [0.0592, 0.0659],
        [0.0569, 0.0685],
        [0.0640, 0.0609],
        [0.0632, 0.0616],
        [0.0625, 0.0624],
        [0.0641, 0.0608],
        [0.0682, 0.0572],
        [0.0594, 0.0656],
        [0.0675, 0.0577],
        [0.0620, 0.0628],
        [0.0619, 0.0629],
        [0.0578, 0.0674],
        [0.0654, 0.0596],
        [0.0624, 0.0625]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.419700
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1226, 0.1271],
        [0.1314, 0.1185],
        [0.1290, 0.1207],
        [0.1340, 0.1163],
        [0.1139, 0.1368],
        [0.1209, 0.1288],
        [0.1307, 0.1192],
        [0.1174, 0.1326]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.177127
acc:  0.515
Time taken to execute the en SA task with prompt type auxiliary, variation 1 and batchsize 16: 0:00:04.952313
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([100, 2])
answers_probs just softmax dim 0: tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0012],
        [0.0004, 0.0013],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0012],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0010],
        [0.0003, 0.0010],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0658, 0.0593],
        [0.0590, 0.0661],
        [0.0643, 0.0606],
        [0.0644, 0.0605],
        [0.0630, 0.0619],
        [0.0621, 0.0628],
        [0.0630, 0.0619],
        [0.0602, 0.0648],
        [0.0621, 0.0628],
        [0.0642, 0.0607],
        [0.0593, 0.0658],
        [0.0580, 0.0673],
        [0.0647, 0.0603],
        [0.0643, 0.0606],
        [0.0663, 0.0588],
        [0.0591, 0.0660]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.369775
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0012],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0002, 0.0003],
        [0.0005, 0.0013],
        [0.0002, 0.0006],
        [0.0003, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0647],
        [0.0602, 0.0646],
        [0.0651, 0.0597],
        [0.0586, 0.0664],
        [0.0675, 0.0576],
        [0.0678, 0.0573],
        [0.0598, 0.0651],
        [0.0638, 0.0609],
        [0.0590, 0.0659],
        [0.0580, 0.0670],
        [0.0641, 0.0606],
        [0.0596, 0.0653],
        [0.0595, 0.0654],
        [0.0574, 0.0678],
        [0.0725, 0.0537],
        [0.0671, 0.0580]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.282705
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0006, 0.0011],
        [0.0004, 0.0010],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0005, 0.0006],
        [0.0001, 0.0002],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0002, 0.0002],
        [0.0002, 0.0004],
        [0.0003, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0636],
        [0.0627, 0.0622],
        [0.0616, 0.0632],
        [0.0633, 0.0615],
        [0.0591, 0.0659],
        [0.0617, 0.0631],
        [0.0641, 0.0608],
        [0.0596, 0.0653],
        [0.0620, 0.0628],
        [0.0697, 0.0559],
        [0.0654, 0.0596],
        [0.0615, 0.0633],
        [0.0601, 0.0648],
        [0.0705, 0.0552],
        [0.0616, 0.0632],
        [0.0560, 0.0696]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.359620
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0005, 0.0010],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0002, 0.0008],
        [0.0001, 0.0002],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0002, 0.0002],
        [0.0001, 0.0001]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0570, 0.0681],
        [0.0615, 0.0631],
        [0.0598, 0.0649],
        [0.0641, 0.0606],
        [0.0569, 0.0682],
        [0.0703, 0.0552],
        [0.0612, 0.0634],
        [0.0588, 0.0660],
        [0.0592, 0.0656],
        [0.0607, 0.0640],
        [0.0548, 0.0708],
        [0.0703, 0.0553],
        [0.0611, 0.0636],
        [0.0680, 0.0571],
        [0.0656, 0.0592],
        [0.0708, 0.0548]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.400868
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0001, 0.0002],
        [0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0624],
        [0.0656, 0.0594],
        [0.0602, 0.0647],
        [0.0673, 0.0579],
        [0.0638, 0.0611],
        [0.0668, 0.0583],
        [0.0620, 0.0629],
        [0.0601, 0.0648],
        [0.0651, 0.0599],
        [0.0566, 0.0689],
        [0.0582, 0.0670],
        [0.0615, 0.0634],
        [0.0647, 0.0602],
        [0.0638, 0.0611],
        [0.0596, 0.0653],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.405155
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0010],
        [0.0002, 0.0002],
        [0.0004, 0.0012],
        [0.0004, 0.0006],
        [0.0001, 0.0001],
        [0.0004, 0.0011],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0013],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0587],
        [0.0566, 0.0685],
        [0.0565, 0.0687],
        [0.0681, 0.0570],
        [0.0560, 0.0693],
        [0.0666, 0.0583],
        [0.0722, 0.0538],
        [0.0595, 0.0653],
        [0.0582, 0.0667],
        [0.0626, 0.0620],
        [0.0628, 0.0618],
        [0.0571, 0.0679],
        [0.0616, 0.0630],
        [0.0606, 0.0641],
        [0.0719, 0.0540],
        [0.0637, 0.0609]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.402094
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0002, 0.0002],
        [0.0006, 0.0015],
        [0.0002, 0.0007],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0007, 0.0015],
        [0.0004, 0.0012],
        [0.0002, 0.0003],
        [0.0005, 0.0012],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0653],
        [0.0725, 0.0536],
        [0.0596, 0.0651],
        [0.0572, 0.0679],
        [0.0620, 0.0626],
        [0.0615, 0.0632],
        [0.0607, 0.0640],
        [0.0569, 0.0683],
        [0.0681, 0.0570],
        [0.0617, 0.0629],
        [0.0619, 0.0627],
        [0.0613, 0.0634],
        [0.0619, 0.0627],
        [0.0749, 0.0519],
        [0.0605, 0.0642],
        [0.0597, 0.0650]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.424809
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.0562e-04, 1.8394e-04],
        [2.6751e-04, 5.7077e-04],
        [2.7251e-04, 6.3324e-04],
        [3.8576e-04, 7.8535e-04],
        [2.9278e-04, 9.6798e-04],
        [7.2622e-04, 1.7977e-03],
        [2.5678e-04, 8.8215e-04],
        [3.0398e-04, 8.6594e-04],
        [2.8872e-04, 5.6982e-04],
        [9.9957e-05, 1.2434e-04],
        [2.7227e-04, 7.7534e-04],
        [2.9302e-04, 6.9189e-04],
        [3.6263e-04, 6.7234e-04],
        [2.2960e-04, 3.8743e-04],
        [2.6870e-04, 3.9411e-04],
        [2.0278e-04, 6.3419e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0656, 0.0593],
        [0.0627, 0.0621],
        [0.0615, 0.0632],
        [0.0633, 0.0614],
        [0.0575, 0.0677],
        [0.0607, 0.0641],
        [0.0571, 0.0682],
        [0.0591, 0.0659],
        [0.0638, 0.0610],
        [0.0711, 0.0547],
        [0.0591, 0.0659],
        [0.0613, 0.0634],
        [0.0647, 0.0602],
        [0.0661, 0.0589],
        [0.0683, 0.0570],
        [0.0580, 0.0670]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.443915
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0011],
        [0.0003, 0.0010],
        [0.0002, 0.0003],
        [0.0001, 0.0002],
        [0.0005, 0.0009],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0008, 0.0018],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0617],
        [0.0586, 0.0664],
        [0.0560, 0.0694],
        [0.0684, 0.0568],
        [0.0707, 0.0550],
        [0.0653, 0.0595],
        [0.0569, 0.0683],
        [0.0593, 0.0655],
        [0.0620, 0.0627],
        [0.0632, 0.0615],
        [0.0589, 0.0660],
        [0.0603, 0.0644],
        [0.0597, 0.0651],
        [0.0595, 0.0653],
        [0.0674, 0.0576],
        [0.0707, 0.0550]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.367006
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0001, 0.0002],
        [0.0005, 0.0012],
        [0.0004, 0.0006],
        [0.0003, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0007, 0.0014],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0007],
        [0.0001, 0.0002],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0575, 0.0677],
        [0.0689, 0.0565],
        [0.0585, 0.0666],
        [0.0667, 0.0584],
        [0.0646, 0.0603],
        [0.0604, 0.0644],
        [0.0655, 0.0594],
        [0.0580, 0.0671],
        [0.0632, 0.0616],
        [0.0617, 0.0631],
        [0.0631, 0.0617],
        [0.0601, 0.0648],
        [0.0634, 0.0614],
        [0.0566, 0.0688],
        [0.0674, 0.0578],
        [0.0644, 0.0605]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.353399
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0013],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0002, 0.0003],
        [0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0012],
        [0.0002, 0.0004],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0584, 0.0668],
        [0.0624, 0.0625],
        [0.0650, 0.0600],
        [0.0629, 0.0620],
        [0.0683, 0.0571],
        [0.0626, 0.0623],
        [0.0615, 0.0634],
        [0.0611, 0.0638],
        [0.0587, 0.0665],
        [0.0619, 0.0630],
        [0.0654, 0.0596],
        [0.0646, 0.0603],
        [0.0582, 0.0670],
        [0.0649, 0.0601],
        [0.0628, 0.0620]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.425998
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0014],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0650],
        [0.0591, 0.0659],
        [0.0591, 0.0659],
        [0.0651, 0.0598],
        [0.0691, 0.0563],
        [0.0613, 0.0635],
        [0.0572, 0.0681],
        [0.0686, 0.0568],
        [0.0588, 0.0662],
        [0.0611, 0.0637],
        [0.0605, 0.0643],
        [0.0603, 0.0645],
        [0.0604, 0.0644],
        [0.0657, 0.0593],
        [0.0670, 0.0581],
        [0.0668, 0.0583]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.395698
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0008],
        [0.0005, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1128, 0.1381],
        [0.1258, 0.1239],
        [0.1266, 0.1231],
        [0.1363, 0.1144],
        [0.1275, 0.1223],
        [0.1260, 0.1237],
        [0.1223, 0.1274],
        [0.1227, 0.1270]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.289482
acc:  0.52
Time taken to execute the en SA task with prompt type auxiliary, variation 2 and batchsize 16: 0:00:04.941395
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([121, 2])
answers_probs just softmax dim 0: tensor([[0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083]], device='cuda:0')
tensor([[0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083],
        [0.0083, 0.0083]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0006, 0.0014],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0009, 0.0013],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0685, 0.0568],
        [0.0604, 0.0644],
        [0.0659, 0.0591],
        [0.0584, 0.0666],
        [0.0643, 0.0605],
        [0.0598, 0.0651],
        [0.0578, 0.0673],
        [0.0659, 0.0590],
        [0.0598, 0.0651],
        [0.0661, 0.0588],
        [0.0653, 0.0596],
        [0.0640, 0.0608],
        [0.0599, 0.0650],
        [0.0606, 0.0642],
        [0.0683, 0.0570],
        [0.0551, 0.0707]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.452649
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.8406e-04, 6.2752e-04],
        [3.2687e-04, 6.6566e-04],
        [4.1866e-04, 6.4325e-04],
        [1.7858e-04, 4.5943e-04],
        [3.3140e-04, 5.4216e-04],
        [3.2187e-04, 6.2513e-04],
        [1.7309e-04, 2.2852e-04],
        [2.9612e-04, 5.0402e-04],
        [3.9268e-04, 6.2752e-04],
        [3.7479e-04, 6.7854e-04],
        [3.3665e-04, 6.4850e-04],
        [3.3545e-04, 5.9366e-04],
        [2.5249e-04, 6.0558e-04],
        [4.1366e-04, 6.1131e-04],
        [3.2091e-04, 4.1533e-04],
        [9.3281e-05, 1.4448e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0548, 0.0711],
        [0.0607, 0.0642],
        [0.0647, 0.0602],
        [0.0578, 0.0674],
        [0.0638, 0.0611],
        [0.0613, 0.0635],
        [0.0672, 0.0580],
        [0.0632, 0.0616],
        [0.0641, 0.0607],
        [0.0623, 0.0625],
        [0.0614, 0.0634],
        [0.0626, 0.0622],
        [0.0586, 0.0665],
        [0.0654, 0.0596],
        [0.0675, 0.0577],
        [0.0646, 0.0603]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.361648
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0001, 0.0002],
        [0.0004, 0.0006],
        [0.0007, 0.0016],
        [0.0004, 0.0005],
        [0.0005, 0.0011],
        [0.0005, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0611],
        [0.0647, 0.0601],
        [0.0588, 0.0661],
        [0.0594, 0.0655],
        [0.0608, 0.0640],
        [0.0594, 0.0655],
        [0.0651, 0.0598],
        [0.0657, 0.0592],
        [0.0602, 0.0646],
        [0.0695, 0.0559],
        [0.0585, 0.0665],
        [0.0699, 0.0556],
        [0.0646, 0.0602],
        [0.0642, 0.0606],
        [0.0603, 0.0645],
        [0.0551, 0.0706]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.364013
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.3615e-04, 3.2282e-04],
        [1.7393e-04, 3.1734e-04],
        [3.6287e-04, 5.7077e-04],
        [2.9254e-04, 5.5981e-04],
        [3.0184e-04, 6.9666e-04],
        [2.3198e-04, 5.1069e-04],
        [1.2243e-04, 2.9492e-04],
        [2.6608e-04, 4.7040e-04],
        [4.8709e-04, 1.1330e-03],
        [4.1819e-04, 8.3828e-04],
        [9.4056e-05, 1.6129e-04],
        [3.9387e-04, 7.2432e-04],
        [2.9922e-04, 4.2844e-04],
        [3.3927e-04, 9.0075e-04],
        [1.6272e-04, 2.1899e-04],
        [3.0994e-04, 6.2609e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0672, 0.0580],
        [0.0628, 0.0621],
        [0.0650, 0.0600],
        [0.0621, 0.0628],
        [0.0596, 0.0654],
        [0.0602, 0.0647],
        [0.0591, 0.0660],
        [0.0632, 0.0616],
        [0.0595, 0.0655],
        [0.0615, 0.0634],
        [0.0637, 0.0612],
        [0.0627, 0.0622],
        [0.0665, 0.0586],
        [0.0579, 0.0673],
        [0.0675, 0.0578],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.356153
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[3.2949e-04, 5.2261e-04],
        [1.7703e-04, 3.3593e-04],
        [5.2929e-04, 1.0042e-03],
        [3.4857e-04, 6.0225e-04],
        [3.6621e-04, 8.3160e-04],
        [3.3474e-04, 6.6566e-04],
        [3.3021e-04, 6.3181e-04],
        [2.4295e-04, 3.7909e-04],
        [7.3731e-05, 8.3864e-05],
        [1.7810e-04, 2.5725e-04],
        [1.7142e-04, 2.5725e-04],
        [2.4033e-04, 2.8086e-04],
        [3.7622e-04, 5.7840e-04],
        [1.3936e-04, 2.5725e-04],
        [2.7680e-04, 8.4591e-04],
        [2.4605e-04, 6.3324e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0610],
        [0.0612, 0.0636],
        [0.0612, 0.0636],
        [0.0625, 0.0622],
        [0.0589, 0.0662],
        [0.0606, 0.0643],
        [0.0611, 0.0637],
        [0.0641, 0.0608],
        [0.0692, 0.0563],
        [0.0653, 0.0597],
        [0.0647, 0.0602],
        [0.0687, 0.0566],
        [0.0643, 0.0606],
        [0.0616, 0.0632],
        [0.0555, 0.0702],
        [0.0573, 0.0679]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.396000
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.6560e-04, 6.2227e-04],
        [6.8724e-05, 1.0896e-04],
        [1.8346e-04, 4.4012e-04],
        [1.6093e-04, 2.4557e-04],
        [8.9169e-05, 1.5652e-04],
        [3.1567e-04, 6.7377e-04],
        [1.4114e-04, 2.3544e-04],
        [2.3079e-04, 3.9268e-04],
        [3.9887e-04, 5.5408e-04],
        [5.1355e-04, 8.8739e-04],
        [2.4629e-04, 6.0034e-04],
        [4.3893e-04, 7.1239e-04],
        [3.2067e-04, 4.3154e-04],
        [5.2977e-04, 7.9489e-04],
        [3.9935e-04, 7.4053e-04],
        [1.7822e-04, 3.2020e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0586, 0.0665],
        [0.0640, 0.0609],
        [0.0583, 0.0668],
        [0.0646, 0.0604],
        [0.0625, 0.0624],
        [0.0598, 0.0652],
        [0.0632, 0.0617],
        [0.0630, 0.0619],
        [0.0661, 0.0590],
        [0.0627, 0.0622],
        [0.0582, 0.0671],
        [0.0637, 0.0613],
        [0.0666, 0.0586],
        [0.0649, 0.0601],
        [0.0617, 0.0632],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.363524
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0008, 0.0012],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0624],
        [0.0697, 0.0559],
        [0.0602, 0.0647],
        [0.0583, 0.0669],
        [0.0609, 0.0640],
        [0.0639, 0.0610],
        [0.0595, 0.0655],
        [0.0638, 0.0611],
        [0.0660, 0.0591],
        [0.0658, 0.0592],
        [0.0627, 0.0622],
        [0.0599, 0.0650],
        [0.0652, 0.0598],
        [0.0578, 0.0674],
        [0.0616, 0.0633],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.446431
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0003, 0.0003],
        [0.0002, 0.0004],
        [0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0002, 0.0002],
        [0.0003, 0.0010],
        [0.0006, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0002],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0610],
        [0.0609, 0.0640],
        [0.0584, 0.0667],
        [0.0681, 0.0572],
        [0.0592, 0.0658],
        [0.0596, 0.0653],
        [0.0601, 0.0648],
        [0.0632, 0.0616],
        [0.0660, 0.0590],
        [0.0640, 0.0608],
        [0.0678, 0.0574],
        [0.0556, 0.0701],
        [0.0620, 0.0629],
        [0.0633, 0.0615],
        [0.0657, 0.0593],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.489974
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0001, 0.0002],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0001, 0.0002],
        [0.0003, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0584, 0.0666],
        [0.0642, 0.0606],
        [0.0646, 0.0602],
        [0.0623, 0.0625],
        [0.0614, 0.0634],
        [0.0602, 0.0646],
        [0.0643, 0.0605],
        [0.0573, 0.0679],
        [0.0645, 0.0603],
        [0.0663, 0.0586],
        [0.0667, 0.0583],
        [0.0708, 0.0549],
        [0.0621, 0.0626],
        [0.0553, 0.0704],
        [0.0649, 0.0600],
        [0.0567, 0.0686]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.336569
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0002, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0006, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0646, 0.0602],
        [0.0565, 0.0689],
        [0.0674, 0.0577],
        [0.0596, 0.0653],
        [0.0716, 0.0544],
        [0.0618, 0.0630],
        [0.0632, 0.0616],
        [0.0637, 0.0610],
        [0.0644, 0.0604],
        [0.0594, 0.0655],
        [0.0640, 0.0608],
        [0.0643, 0.0605],
        [0.0626, 0.0621],
        [0.0550, 0.0707],
        [0.0595, 0.0654],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.447616
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0002],
        [0.0001, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0656],
        [0.0621, 0.0627],
        [0.0575, 0.0678],
        [0.0626, 0.0623],
        [0.0584, 0.0667],
        [0.0626, 0.0623],
        [0.0600, 0.0649],
        [0.0672, 0.0580],
        [0.0604, 0.0645],
        [0.0648, 0.0601],
        [0.0671, 0.0581],
        [0.0708, 0.0550],
        [0.0611, 0.0637],
        [0.0635, 0.0614],
        [0.0614, 0.0635],
        [0.0612, 0.0636]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.562234
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0002, 0.0005],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0001, 0.0002],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0687, 0.0567],
        [0.0612, 0.0636],
        [0.0612, 0.0636],
        [0.0642, 0.0607],
        [0.0622, 0.0626],
        [0.0599, 0.0649],
        [0.0647, 0.0602],
        [0.0649, 0.0600],
        [0.0619, 0.0629],
        [0.0560, 0.0696],
        [0.0595, 0.0654],
        [0.0594, 0.0655],
        [0.0649, 0.0600],
        [0.0677, 0.0575],
        [0.0675, 0.0577],
        [0.0563, 0.0692]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.400770
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1309, 0.1192],
        [0.1319, 0.1183],
        [0.1247, 0.1251],
        [0.1271, 0.1228],
        [0.1227, 0.1272],
        [0.1236, 0.1262],
        [0.1186, 0.1316],
        [0.1206, 0.1294]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.181231
acc:  0.42
Time taken to execute the en SA task with prompt type auxiliary, variation 3 and batchsize 16: 0:00:05.179546
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([114, 2])
answers_probs just softmax dim 0: tensor([[0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088]], device='cuda:0')
tensor([[0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088],
        [0.0088, 0.0088]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0006, 0.0019],
        [0.0006, 0.0011],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0006, 0.0013],
        [0.0004, 0.0008],
        [0.0004, 0.0012],
        [0.0003, 0.0005],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0590],
        [0.0622, 0.0627],
        [0.0627, 0.0622],
        [0.0615, 0.0633],
        [0.0633, 0.0616],
        [0.0632, 0.0617],
        [0.0565, 0.0690],
        [0.0623, 0.0626],
        [0.0620, 0.0629],
        [0.0600, 0.0649],
        [0.0654, 0.0596],
        [0.0607, 0.0642],
        [0.0641, 0.0608],
        [0.0581, 0.0671],
        [0.0627, 0.0622],
        [0.0694, 0.0561]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.336042
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0002, 0.0007],
        [0.0005, 0.0010],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0007, 0.0016],
        [0.0008, 0.0012],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0623],
        [0.0574, 0.0679],
        [0.0632, 0.0617],
        [0.0642, 0.0607],
        [0.0650, 0.0600],
        [0.0579, 0.0673],
        [0.0623, 0.0626],
        [0.0643, 0.0606],
        [0.0646, 0.0603],
        [0.0633, 0.0616],
        [0.0606, 0.0643],
        [0.0605, 0.0644],
        [0.0683, 0.0570],
        [0.0612, 0.0637],
        [0.0655, 0.0595],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.354607
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0006, 0.0014],
        [0.0002, 0.0005],
        [0.0005, 0.0012],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0574, 0.0680],
        [0.0646, 0.0604],
        [0.0637, 0.0613],
        [0.0622, 0.0627],
        [0.0605, 0.0645],
        [0.0606, 0.0644],
        [0.0596, 0.0654],
        [0.0634, 0.0615],
        [0.0625, 0.0624],
        [0.0634, 0.0615],
        [0.0629, 0.0621],
        [0.0620, 0.0629],
        [0.0678, 0.0575],
        [0.0613, 0.0636],
        [0.0651, 0.0599]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.363153
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0006, 0.0009],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0013],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0005, 0.0011],
        [0.0006, 0.0013],
        [0.0004, 0.0008],
        [0.0008, 0.0014],
        [0.0005, 0.0008],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0697, 0.0558],
        [0.0660, 0.0590],
        [0.0636, 0.0613],
        [0.0562, 0.0693],
        [0.0627, 0.0621],
        [0.0648, 0.0601],
        [0.0610, 0.0638],
        [0.0562, 0.0694],
        [0.0635, 0.0614],
        [0.0649, 0.0600],
        [0.0597, 0.0652],
        [0.0611, 0.0638],
        [0.0623, 0.0625],
        [0.0631, 0.0617],
        [0.0642, 0.0607],
        [0.0611, 0.0638]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.428890
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0015],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0008, 0.0017],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0009, 0.0011],
        [0.0005, 0.0008],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0575, 0.0678],
        [0.0623, 0.0625],
        [0.0600, 0.0650],
        [0.0623, 0.0625],
        [0.0624, 0.0624],
        [0.0594, 0.0656],
        [0.0587, 0.0664],
        [0.0645, 0.0605],
        [0.0601, 0.0649],
        [0.0649, 0.0600],
        [0.0638, 0.0611],
        [0.0647, 0.0602],
        [0.0639, 0.0610],
        [0.0697, 0.0559],
        [0.0645, 0.0605],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.429564
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0006, 0.0018],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0011, 0.0017],
        [0.0003, 0.0006],
        [0.0010, 0.0015],
        [0.0002, 0.0005],
        [0.0006, 0.0008],
        [0.0013, 0.0017],
        [0.0002, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0587],
        [0.0620, 0.0628],
        [0.0592, 0.0658],
        [0.0562, 0.0693],
        [0.0595, 0.0654],
        [0.0621, 0.0627],
        [0.0597, 0.0652],
        [0.0645, 0.0603],
        [0.0643, 0.0606],
        [0.0641, 0.0608],
        [0.0644, 0.0605],
        [0.0588, 0.0662],
        [0.0686, 0.0568],
        [0.0675, 0.0577],
        [0.0587, 0.0663],
        [0.0639, 0.0609]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.254602
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0008, 0.0011],
        [0.0004, 0.0012],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0649, 0.0601],
        [0.0655, 0.0595],
        [0.0616, 0.0633],
        [0.0625, 0.0624],
        [0.0630, 0.0619],
        [0.0630, 0.0619],
        [0.0642, 0.0607],
        [0.0679, 0.0574],
        [0.0567, 0.0687],
        [0.0614, 0.0636],
        [0.0601, 0.0649],
        [0.0591, 0.0660],
        [0.0625, 0.0624],
        [0.0604, 0.0645],
        [0.0641, 0.0608],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.399741
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0007, 0.0014],
        [0.0006, 0.0011],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0006, 0.0012],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0655],
        [0.0649, 0.0601],
        [0.0603, 0.0647],
        [0.0641, 0.0609],
        [0.0636, 0.0613],
        [0.0593, 0.0658],
        [0.0611, 0.0638],
        [0.0648, 0.0602],
        [0.0607, 0.0643],
        [0.0616, 0.0633],
        [0.0630, 0.0620],
        [0.0607, 0.0642],
        [0.0632, 0.0617],
        [0.0661, 0.0591],
        [0.0663, 0.0588],
        [0.0607, 0.0642]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.366640
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0004, 0.0011],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0008],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0632],
        [0.0637, 0.0613],
        [0.0612, 0.0638],
        [0.0647, 0.0603],
        [0.0605, 0.0645],
        [0.0639, 0.0610],
        [0.0625, 0.0624],
        [0.0618, 0.0631],
        [0.0614, 0.0635],
        [0.0597, 0.0653],
        [0.0601, 0.0649],
        [0.0616, 0.0633],
        [0.0622, 0.0628],
        [0.0633, 0.0617],
        [0.0638, 0.0612],
        [0.0677, 0.0576]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.537645
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0006, 0.0009],
        [0.0005, 0.0009],
        [0.0007, 0.0009],
        [0.0005, 0.0010],
        [0.0006, 0.0014],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0007, 0.0012],
        [0.0002, 0.0006],
        [0.0009, 0.0016],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0648, 0.0602],
        [0.0625, 0.0624],
        [0.0686, 0.0569],
        [0.0618, 0.0631],
        [0.0601, 0.0648],
        [0.0593, 0.0657],
        [0.0654, 0.0596],
        [0.0634, 0.0615],
        [0.0590, 0.0661],
        [0.0630, 0.0619],
        [0.0581, 0.0671],
        [0.0598, 0.0651],
        [0.0655, 0.0595],
        [0.0609, 0.0641],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.356182
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0616],
        [0.0623, 0.0627],
        [0.0655, 0.0596],
        [0.0591, 0.0660],
        [0.0614, 0.0635],
        [0.0639, 0.0611],
        [0.0614, 0.0635],
        [0.0625, 0.0624],
        [0.0594, 0.0657],
        [0.0635, 0.0615],
        [0.0629, 0.0620],
        [0.0654, 0.0597],
        [0.0627, 0.0622],
        [0.0650, 0.0600],
        [0.0605, 0.0645],
        [0.0609, 0.0641]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.403612
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0007, 0.0016],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0624],
        [0.0593, 0.0657],
        [0.0617, 0.0633],
        [0.0641, 0.0608],
        [0.0617, 0.0633],
        [0.0650, 0.0601],
        [0.0647, 0.0603],
        [0.0634, 0.0615],
        [0.0668, 0.0584],
        [0.0581, 0.0671],
        [0.0613, 0.0637],
        [0.0615, 0.0635],
        [0.0638, 0.0612],
        [0.0636, 0.0614],
        [0.0608, 0.0641],
        [0.0616, 0.0634]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.478979
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0003, 0.0003],
        [0.0004, 0.0011],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1351, 0.1151],
        [0.1446, 0.1075],
        [0.1140, 0.1364],
        [0.1200, 0.1295],
        [0.1204, 0.1291],
        [0.1237, 0.1256],
        [0.1210, 0.1285],
        [0.1212, 0.1282]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.211911
acc:  0.54
Time taken to execute the en SA task with prompt type auxiliary, variation 4 and batchsize 16: 0:00:04.943543
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([109, 2])
answers_probs just softmax dim 0: tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0015],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0001, 0.0003],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0001, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0563, 0.0693],
        [0.0605, 0.0644],
        [0.0651, 0.0599],
        [0.0643, 0.0607],
        [0.0622, 0.0627],
        [0.0639, 0.0610],
        [0.0678, 0.0575],
        [0.0613, 0.0636],
        [0.0627, 0.0622],
        [0.0617, 0.0632],
        [0.0617, 0.0632],
        [0.0639, 0.0610],
        [0.0605, 0.0644],
        [0.0663, 0.0588],
        [0.0609, 0.0640],
        [0.0609, 0.0640]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.370493
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.9848e-04, 4.0722e-04],
        [2.4819e-04, 6.0940e-04],
        [2.3127e-04, 5.5933e-04],
        [2.5940e-04, 5.9366e-04],
        [1.9205e-04, 3.2687e-04],
        [3.8075e-04, 8.5163e-04],
        [3.1877e-04, 6.9618e-04],
        [2.8968e-04, 4.9686e-04],
        [1.5879e-04, 3.5501e-04],
        [2.3258e-04, 5.2023e-04],
        [2.9922e-04, 8.0109e-04],
        [1.5557e-04, 3.2926e-04],
        [2.3115e-04, 5.2500e-04],
        [3.8290e-04, 7.9155e-04],
        [2.0170e-04, 6.2132e-04],
        [9.3579e-05, 1.8036e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0615],
        [0.0610, 0.0639],
        [0.0612, 0.0637],
        [0.0619, 0.0630],
        [0.0662, 0.0590],
        [0.0622, 0.0627],
        [0.0626, 0.0624],
        [0.0660, 0.0591],
        [0.0622, 0.0627],
        [0.0622, 0.0627],
        [0.0600, 0.0651],
        [0.0630, 0.0620],
        [0.0620, 0.0629],
        [0.0633, 0.0616],
        [0.0584, 0.0668],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.447835
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0001, 0.0003],
        [0.0002, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0001, 0.0002],
        [0.0004, 0.0014],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0655],
        [0.0615, 0.0632],
        [0.0579, 0.0671],
        [0.0574, 0.0678],
        [0.0646, 0.0603],
        [0.0618, 0.0629],
        [0.0595, 0.0654],
        [0.0703, 0.0553],
        [0.0616, 0.0631],
        [0.0605, 0.0643],
        [0.0603, 0.0645],
        [0.0708, 0.0549],
        [0.0628, 0.0620],
        [0.0667, 0.0583],
        [0.0576, 0.0675],
        [0.0672, 0.0579]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.405264
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0011],
        [0.0001, 0.0003],
        [0.0003, 0.0011],
        [0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0609],
        [0.0635, 0.0614],
        [0.0670, 0.0582],
        [0.0626, 0.0622],
        [0.0596, 0.0654],
        [0.0628, 0.0620],
        [0.0647, 0.0603],
        [0.0625, 0.0623],
        [0.0670, 0.0582],
        [0.0580, 0.0671],
        [0.0600, 0.0650],
        [0.0573, 0.0681],
        [0.0667, 0.0585],
        [0.0595, 0.0654],
        [0.0649, 0.0600],
        [0.0600, 0.0650]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.365356
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0006, 0.0011],
        [0.0001, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0663],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0630, 0.0619],
        [0.0610, 0.0640],
        [0.0588, 0.0663],
        [0.0605, 0.0645],
        [0.0648, 0.0602],
        [0.0626, 0.0624],
        [0.0648, 0.0602],
        [0.0636, 0.0613],
        [0.0640, 0.0610],
        [0.0622, 0.0627],
        [0.0654, 0.0597],
        [0.0637, 0.0613],
        [0.0618, 0.0631]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.562828
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0001, 0.0002],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0001, 0.0003],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0584, 0.0667],
        [0.0588, 0.0663],
        [0.0621, 0.0628],
        [0.0623, 0.0626],
        [0.0607, 0.0642],
        [0.0605, 0.0644],
        [0.0608, 0.0641],
        [0.0629, 0.0619],
        [0.0596, 0.0653],
        [0.0726, 0.0537],
        [0.0656, 0.0594],
        [0.0654, 0.0595],
        [0.0614, 0.0634],
        [0.0635, 0.0614],
        [0.0634, 0.0615],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.363529
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0631],
        [0.0588, 0.0664],
        [0.0634, 0.0616],
        [0.0610, 0.0640],
        [0.0650, 0.0601],
        [0.0652, 0.0598],
        [0.0596, 0.0655],
        [0.0632, 0.0618],
        [0.0654, 0.0596],
        [0.0625, 0.0624],
        [0.0624, 0.0625],
        [0.0619, 0.0631],
        [0.0607, 0.0643],
        [0.0616, 0.0634],
        [0.0620, 0.0630],
        [0.0656, 0.0595]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.474974
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0006, 0.0013],
        [0.0003, 0.0006],
        [0.0001, 0.0003],
        [0.0009, 0.0015],
        [0.0004, 0.0007],
        [0.0001, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0001, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0642, 0.0607],
        [0.0619, 0.0630],
        [0.0639, 0.0611],
        [0.0633, 0.0617],
        [0.0673, 0.0580],
        [0.0642, 0.0607],
        [0.0607, 0.0643],
        [0.0618, 0.0631],
        [0.0602, 0.0648],
        [0.0617, 0.0632],
        [0.0579, 0.0674],
        [0.0627, 0.0622],
        [0.0613, 0.0636],
        [0.0645, 0.0605],
        [0.0603, 0.0647],
        [0.0641, 0.0608]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.358994
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[8.3566e-05, 1.8108e-04],
        [1.5128e-04, 2.2006e-04],
        [2.3305e-04, 4.7445e-04],
        [2.7204e-04, 5.3263e-04],
        [4.6396e-04, 1.1301e-03],
        [2.2972e-04, 4.5323e-04],
        [3.7193e-04, 8.0585e-04],
        [3.0184e-04, 5.3787e-04],
        [3.6764e-04, 9.3126e-04],
        [4.2653e-04, 9.2411e-04],
        [2.6917e-04, 4.5085e-04],
        [1.3757e-04, 2.6536e-04],
        [2.7609e-04, 6.5184e-04],
        [4.7112e-04, 6.7997e-04],
        [3.9029e-04, 8.0061e-04],
        [2.3603e-04, 4.9973e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0637],
        [0.0671, 0.0581],
        [0.0621, 0.0628],
        [0.0626, 0.0623],
        [0.0598, 0.0653],
        [0.0625, 0.0624],
        [0.0613, 0.0637],
        [0.0640, 0.0610],
        [0.0593, 0.0658],
        [0.0613, 0.0637],
        [0.0649, 0.0601],
        [0.0629, 0.0621],
        [0.0602, 0.0649],
        [0.0673, 0.0580],
        [0.0620, 0.0629],
        [0.0616, 0.0634]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.404150
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0012],
        [0.0005, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0001, 0.0002],
        [0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0568, 0.0685],
        [0.0671, 0.0580],
        [0.0577, 0.0675],
        [0.0681, 0.0571],
        [0.0646, 0.0603],
        [0.0596, 0.0654],
        [0.0591, 0.0659],
        [0.0619, 0.0629],
        [0.0591, 0.0659],
        [0.0609, 0.0639],
        [0.0681, 0.0571],
        [0.0632, 0.0616],
        [0.0650, 0.0599],
        [0.0662, 0.0588],
        [0.0610, 0.0638],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.403824
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.6846e-04, 5.4646e-04],
        [8.7559e-05, 2.8586e-04],
        [1.1110e-04, 2.3699e-04],
        [1.9145e-04, 5.5838e-04],
        [2.8706e-04, 7.1573e-04],
        [5.2881e-04, 1.2102e-03],
        [2.2292e-04, 4.9829e-04],
        [1.4770e-04, 4.8041e-04],
        [1.9968e-04, 4.7135e-04],
        [2.6059e-04, 4.4680e-04],
        [5.3120e-04, 1.2741e-03],
        [2.0313e-04, 4.4703e-04],
        [2.5129e-04, 7.5626e-04],
        [3.0637e-04, 6.0463e-04],
        [3.0804e-04, 7.3862e-04],
        [2.0790e-04, 6.7616e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0649, 0.0601],
        [0.0590, 0.0661],
        [0.0642, 0.0607],
        [0.0602, 0.0647],
        [0.0621, 0.0628],
        [0.0633, 0.0617],
        [0.0636, 0.0614],
        [0.0590, 0.0661],
        [0.0628, 0.0621],
        [0.0675, 0.0578],
        [0.0626, 0.0623],
        [0.0638, 0.0611],
        [0.0599, 0.0651],
        [0.0653, 0.0597],
        [0.0626, 0.0623],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.356810
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0001, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0001, 0.0004],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0644, 0.0606],
        [0.0626, 0.0623],
        [0.0584, 0.0668],
        [0.0644, 0.0606],
        [0.0633, 0.0617],
        [0.0618, 0.0632],
        [0.0643, 0.0607],
        [0.0618, 0.0632],
        [0.0622, 0.0628],
        [0.0596, 0.0654],
        [0.0600, 0.0650],
        [0.0628, 0.0621],
        [0.0633, 0.0617],
        [0.0621, 0.0629],
        [0.0645, 0.0605],
        [0.0646, 0.0604]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.424841
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0003, 0.0010],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1341, 0.1160],
        [0.1189, 0.1308],
        [0.1191, 0.1306],
        [0.1233, 0.1262],
        [0.1326, 0.1173],
        [0.1369, 0.1136],
        [0.1109, 0.1403],
        [0.1241, 0.1253]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.160146
acc:  0.525
Time taken to execute the en SA task with prompt type auxiliary, variation 5 and batchsize 16: 0:00:05.121426
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([150, 2])
answers_probs just softmax dim 0: tensor([[0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067]], device='cuda:0')
tensor([[0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067],
        [0.0067, 0.0067]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0006, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0006, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0003],
        [0.0005, 0.0006],
        [0.0006, 0.0006],
        [0.0006, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0584],
        [0.0623, 0.0625],
        [0.0586, 0.0665],
        [0.0597, 0.0652],
        [0.0644, 0.0605],
        [0.0615, 0.0633],
        [0.0582, 0.0669],
        [0.0616, 0.0632],
        [0.0639, 0.0610],
        [0.0591, 0.0660],
        [0.0668, 0.0583],
        [0.0626, 0.0623],
        [0.0687, 0.0567],
        [0.0648, 0.0601],
        [0.0620, 0.0629],
        [0.0589, 0.0662]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.410468
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0005, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0006, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0624],
        [0.0577, 0.0676],
        [0.0666, 0.0585],
        [0.0614, 0.0635],
        [0.0624, 0.0625],
        [0.0661, 0.0590],
        [0.0651, 0.0599],
        [0.0611, 0.0638],
        [0.0617, 0.0632],
        [0.0628, 0.0621],
        [0.0650, 0.0600],
        [0.0569, 0.0686],
        [0.0603, 0.0647],
        [0.0639, 0.0610],
        [0.0634, 0.0615],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.429183
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0005, 0.0005],
        [0.0007, 0.0009],
        [0.0004, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0007, 0.0010],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0005, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0659, 0.0592],
        [0.0694, 0.0561],
        [0.0641, 0.0608],
        [0.0597, 0.0652],
        [0.0597, 0.0652],
        [0.0588, 0.0663],
        [0.0628, 0.0621],
        [0.0604, 0.0645],
        [0.0611, 0.0638],
        [0.0624, 0.0624],
        [0.0617, 0.0631],
        [0.0647, 0.0602],
        [0.0661, 0.0589],
        [0.0581, 0.0671],
        [0.0659, 0.0592],
        [0.0592, 0.0658]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.493669
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0005],
        [0.0006, 0.0009],
        [0.0004, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0004],
        [0.0006, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0571, 0.0682],
        [0.0625, 0.0624],
        [0.0623, 0.0625],
        [0.0590, 0.0661],
        [0.0585, 0.0667],
        [0.0649, 0.0600],
        [0.0619, 0.0630],
        [0.0672, 0.0580],
        [0.0613, 0.0636],
        [0.0675, 0.0577],
        [0.0671, 0.0581],
        [0.0659, 0.0591],
        [0.0622, 0.0626],
        [0.0621, 0.0627],
        [0.0593, 0.0657],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.476752
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0006, 0.0009],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0008, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0007],
        [0.0005, 0.0012],
        [0.0003, 0.0004],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0617, 0.0632],
        [0.0649, 0.0601],
        [0.0625, 0.0624],
        [0.0633, 0.0616],
        [0.0674, 0.0578],
        [0.0611, 0.0638],
        [0.0583, 0.0669],
        [0.0652, 0.0598],
        [0.0600, 0.0650],
        [0.0635, 0.0614],
        [0.0627, 0.0622],
        [0.0651, 0.0599],
        [0.0576, 0.0677],
        [0.0646, 0.0603],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.363485
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0663, 0.0588],
        [0.0620, 0.0629],
        [0.0613, 0.0636],
        [0.0626, 0.0623],
        [0.0652, 0.0597],
        [0.0645, 0.0604],
        [0.0579, 0.0673],
        [0.0630, 0.0618],
        [0.0638, 0.0611],
        [0.0602, 0.0648],
        [0.0585, 0.0666],
        [0.0614, 0.0635],
        [0.0611, 0.0638],
        [0.0700, 0.0557],
        [0.0592, 0.0658],
        [0.0630, 0.0618]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.407415
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0007, 0.0009],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0004],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0621],
        [0.0612, 0.0637],
        [0.0625, 0.0624],
        [0.0609, 0.0640],
        [0.0587, 0.0665],
        [0.0611, 0.0638],
        [0.0589, 0.0662],
        [0.0630, 0.0619],
        [0.0630, 0.0619],
        [0.0642, 0.0608],
        [0.0653, 0.0597],
        [0.0599, 0.0651],
        [0.0648, 0.0602],
        [0.0611, 0.0638],
        [0.0706, 0.0553],
        [0.0621, 0.0628]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.592582
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0007],
        [0.0002, 0.0004],
        [0.0006, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0010],
        [0.0007, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0006, 0.0009],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0687, 0.0567],
        [0.0607, 0.0643],
        [0.0644, 0.0605],
        [0.0613, 0.0635],
        [0.0576, 0.0677],
        [0.0572, 0.0681],
        [0.0662, 0.0589],
        [0.0589, 0.0661],
        [0.0642, 0.0607],
        [0.0625, 0.0624],
        [0.0649, 0.0600],
        [0.0616, 0.0633],
        [0.0640, 0.0609],
        [0.0637, 0.0612],
        [0.0620, 0.0628],
        [0.0620, 0.0628]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.449044
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0007, 0.0011],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0006, 0.0007],
        [0.0005, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0006, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0626, 0.0623],
        [0.0633, 0.0616],
        [0.0615, 0.0634],
        [0.0641, 0.0608],
        [0.0595, 0.0655],
        [0.0658, 0.0593],
        [0.0667, 0.0585],
        [0.0640, 0.0609],
        [0.0588, 0.0663],
        [0.0613, 0.0636],
        [0.0587, 0.0664],
        [0.0651, 0.0599],
        [0.0654, 0.0597],
        [0.0612, 0.0637],
        [0.0584, 0.0668]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.421634
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0006, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0004, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0616],
        [0.0637, 0.0613],
        [0.0639, 0.0610],
        [0.0600, 0.0649],
        [0.0639, 0.0610],
        [0.0614, 0.0635],
        [0.0565, 0.0690],
        [0.0658, 0.0593],
        [0.0630, 0.0618],
        [0.0595, 0.0655],
        [0.0644, 0.0606],
        [0.0617, 0.0631],
        [0.0677, 0.0576],
        [0.0610, 0.0639],
        [0.0600, 0.0649],
        [0.0640, 0.0609]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.403959
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0008],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0007, 0.0009],
        [0.0007, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0008, 0.0018],
        [0.0004, 0.0005],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0686, 0.0569],
        [0.0648, 0.0602],
        [0.0630, 0.0619],
        [0.0617, 0.0632],
        [0.0627, 0.0622],
        [0.0626, 0.0623],
        [0.0629, 0.0619],
        [0.0605, 0.0644],
        [0.0639, 0.0610],
        [0.0649, 0.0601],
        [0.0618, 0.0631],
        [0.0582, 0.0670],
        [0.0606, 0.0643],
        [0.0562, 0.0693],
        [0.0663, 0.0588],
        [0.0613, 0.0636]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.335499
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0011, 0.0012],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0007, 0.0009],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0583],
        [0.0691, 0.0563],
        [0.0635, 0.0613],
        [0.0610, 0.0638],
        [0.0591, 0.0659],
        [0.0571, 0.0682],
        [0.0586, 0.0664],
        [0.0619, 0.0629],
        [0.0581, 0.0670],
        [0.0619, 0.0629],
        [0.0631, 0.0617],
        [0.0611, 0.0637],
        [0.0658, 0.0591],
        [0.0688, 0.0566],
        [0.0592, 0.0658],
        [0.0650, 0.0599]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.429405
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0005],
        [0.0005, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1189, 0.1311],
        [0.1239, 0.1258],
        [0.1282, 0.1216],
        [0.1237, 0.1260],
        [0.1235, 0.1263],
        [0.1168, 0.1334],
        [0.1260, 0.1237],
        [0.1390, 0.1121]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.215397
acc:  0.505
Time taken to execute the en SA task with prompt type auxiliary, variation 6 and batchsize 16: 0:00:05.449478
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_6']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([124, 2])
answers_probs just softmax dim 0: tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 7 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0001, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0001, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0671, 0.0581],
        [0.0662, 0.0589],
        [0.0605, 0.0644],
        [0.0596, 0.0654],
        [0.0625, 0.0624],
        [0.0612, 0.0637],
        [0.0629, 0.0620],
        [0.0592, 0.0658],
        [0.0630, 0.0619],
        [0.0658, 0.0593],
        [0.0590, 0.0661],
        [0.0629, 0.0620],
        [0.0638, 0.0612],
        [0.0620, 0.0630],
        [0.0615, 0.0634],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.324585
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0011],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0002, 0.0010],
        [0.0002, 0.0003],
        [0.0001, 0.0004],
        [0.0002, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0623],
        [0.0588, 0.0661],
        [0.0690, 0.0563],
        [0.0635, 0.0612],
        [0.0603, 0.0644],
        [0.0628, 0.0618],
        [0.0550, 0.0706],
        [0.0703, 0.0552],
        [0.0601, 0.0647],
        [0.0564, 0.0689],
        [0.0673, 0.0577],
        [0.0587, 0.0661],
        [0.0611, 0.0636],
        [0.0703, 0.0552],
        [0.0578, 0.0672],
        [0.0661, 0.0587]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.564566
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0624],
        [0.0624, 0.0625],
        [0.0584, 0.0668],
        [0.0645, 0.0605],
        [0.0649, 0.0600],
        [0.0597, 0.0653],
        [0.0594, 0.0656],
        [0.0645, 0.0605],
        [0.0622, 0.0627],
        [0.0573, 0.0680],
        [0.0622, 0.0627],
        [0.0661, 0.0589],
        [0.0582, 0.0670],
        [0.0656, 0.0594],
        [0.0640, 0.0609],
        [0.0682, 0.0571]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.409679
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0004, 0.0005],
        [0.0006, 0.0016],
        [0.0002, 0.0007],
        [0.0001, 0.0004],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0005],
        [0.0007, 0.0015],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0002],
        [0.0002, 0.0003],
        [0.0004, 0.0010],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0558, 0.0695],
        [0.0694, 0.0558],
        [0.0586, 0.0661],
        [0.0576, 0.0673],
        [0.0595, 0.0652],
        [0.0644, 0.0602],
        [0.0616, 0.0630],
        [0.0726, 0.0534],
        [0.0620, 0.0626],
        [0.0598, 0.0649],
        [0.0572, 0.0678],
        [0.0586, 0.0661],
        [0.0760, 0.0511],
        [0.0646, 0.0600],
        [0.0585, 0.0663],
        [0.0640, 0.0606]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.423480
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0007],
        [0.0006, 0.0020],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0006, 0.0011],
        [0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0706, 0.0551],
        [0.0607, 0.0640],
        [0.0718, 0.0542],
        [0.0585, 0.0665],
        [0.0567, 0.0686],
        [0.0624, 0.0624],
        [0.0645, 0.0603],
        [0.0611, 0.0636],
        [0.0626, 0.0621],
        [0.0591, 0.0658],
        [0.0647, 0.0601],
        [0.0674, 0.0577],
        [0.0575, 0.0676],
        [0.0599, 0.0649],
        [0.0595, 0.0654],
        [0.0630, 0.0617]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.398200
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0007],
        [0.0003, 0.0013],
        [0.0002, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0649],
        [0.0637, 0.0611],
        [0.0661, 0.0589],
        [0.0619, 0.0628],
        [0.0606, 0.0642],
        [0.0658, 0.0591],
        [0.0642, 0.0606],
        [0.0570, 0.0682],
        [0.0672, 0.0579],
        [0.0592, 0.0657],
        [0.0682, 0.0571],
        [0.0687, 0.0566],
        [0.0592, 0.0657],
        [0.0559, 0.0696],
        [0.0605, 0.0643],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.363699
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0006, 0.0015],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0002],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0581, 0.0670],
        [0.0619, 0.0629],
        [0.0627, 0.0621],
        [0.0582, 0.0669],
        [0.0650, 0.0599],
        [0.0596, 0.0653],
        [0.0608, 0.0641],
        [0.0610, 0.0639],
        [0.0646, 0.0603],
        [0.0602, 0.0647],
        [0.0619, 0.0629],
        [0.0642, 0.0607],
        [0.0742, 0.0525],
        [0.0604, 0.0645],
        [0.0627, 0.0621],
        [0.0646, 0.0602]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.360916
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0002, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0656],
        [0.0672, 0.0580],
        [0.0655, 0.0595],
        [0.0680, 0.0573],
        [0.0621, 0.0627],
        [0.0683, 0.0570],
        [0.0586, 0.0665],
        [0.0602, 0.0647],
        [0.0601, 0.0649],
        [0.0615, 0.0634],
        [0.0608, 0.0640],
        [0.0602, 0.0648],
        [0.0604, 0.0644],
        [0.0576, 0.0676],
        [0.0655, 0.0595],
        [0.0646, 0.0603]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.403947
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0006, 0.0009],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0004, 0.0010],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0590, 0.0660],
        [0.0627, 0.0622],
        [0.0627, 0.0621],
        [0.0603, 0.0646],
        [0.0593, 0.0657],
        [0.0675, 0.0577],
        [0.0631, 0.0617],
        [0.0643, 0.0606],
        [0.0592, 0.0658],
        [0.0673, 0.0579],
        [0.0641, 0.0608],
        [0.0608, 0.0641],
        [0.0602, 0.0647],
        [0.0696, 0.0560],
        [0.0600, 0.0650],
        [0.0600, 0.0650]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.482438
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0008, 0.0017],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0011],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0009],
        [0.0004, 0.0009],
        [0.0002, 0.0006],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0631],
        [0.0618, 0.0630],
        [0.0636, 0.0612],
        [0.0625, 0.0623],
        [0.0683, 0.0570],
        [0.0635, 0.0613],
        [0.0617, 0.0631],
        [0.0632, 0.0617],
        [0.0618, 0.0630],
        [0.0588, 0.0662],
        [0.0643, 0.0606],
        [0.0655, 0.0595],
        [0.0554, 0.0703],
        [0.0629, 0.0620],
        [0.0585, 0.0666],
        [0.0662, 0.0589]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.367812
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0012],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0623],
        [0.0628, 0.0621],
        [0.0618, 0.0631],
        [0.0638, 0.0612],
        [0.0626, 0.0623],
        [0.0581, 0.0672],
        [0.0603, 0.0647],
        [0.0671, 0.0581],
        [0.0632, 0.0617],
        [0.0632, 0.0617],
        [0.0647, 0.0603],
        [0.0601, 0.0649],
        [0.0614, 0.0635],
        [0.0681, 0.0573],
        [0.0586, 0.0665],
        [0.0618, 0.0631]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.408628
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0011],
        [0.0002, 0.0006],
        [0.0004, 0.0010],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0002, 0.0002],
        [0.0003, 0.0008],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0586, 0.0663],
        [0.0582, 0.0668],
        [0.0623, 0.0623],
        [0.0630, 0.0617],
        [0.0604, 0.0643],
        [0.0649, 0.0599],
        [0.0665, 0.0584],
        [0.0619, 0.0628],
        [0.0578, 0.0672],
        [0.0606, 0.0641],
        [0.0609, 0.0638],
        [0.0758, 0.0513],
        [0.0597, 0.0651],
        [0.0703, 0.0553],
        [0.0580, 0.0670],
        [0.0610, 0.0637]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.450520
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1325, 0.1177],
        [0.1242, 0.1256],
        [0.1197, 0.1303],
        [0.1257, 0.1241],
        [0.1186, 0.1315],
        [0.1310, 0.1190],
        [0.1297, 0.1203],
        [0.1186, 0.1315]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.151776
acc:  0.57
Time taken to execute the en SA task with prompt type auxiliary, variation 7 and batchsize 16: 0:00:05.131312
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_7']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([112, 2])
answers_probs just softmax dim 0: tensor([[0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089]], device='cuda:0')
tensor([[0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 8 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0009],
        [0.0003, 0.0011],
        [0.0004, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0011],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0647],
        [0.0631, 0.0617],
        [0.0613, 0.0636],
        [0.0645, 0.0604],
        [0.0588, 0.0663],
        [0.0575, 0.0678],
        [0.0626, 0.0622],
        [0.0684, 0.0570],
        [0.0642, 0.0607],
        [0.0620, 0.0628],
        [0.0631, 0.0617],
        [0.0588, 0.0663],
        [0.0645, 0.0604],
        [0.0672, 0.0580],
        [0.0619, 0.0629],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.368241
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0013],
        [0.0005, 0.0007],
        [0.0004, 0.0013],
        [0.0004, 0.0013],
        [0.0006, 0.0013],
        [0.0005, 0.0008],
        [0.0007, 0.0018],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0629],
        [0.0661, 0.0590],
        [0.0615, 0.0634],
        [0.0615, 0.0633],
        [0.0594, 0.0656],
        [0.0704, 0.0554],
        [0.0592, 0.0658],
        [0.0582, 0.0670],
        [0.0633, 0.0616],
        [0.0666, 0.0585],
        [0.0606, 0.0643],
        [0.0634, 0.0615],
        [0.0656, 0.0594],
        [0.0603, 0.0646],
        [0.0593, 0.0657],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.406117
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0002, 0.0006],
        [0.0004, 0.0010],
        [0.0004, 0.0011],
        [0.0005, 0.0014],
        [0.0004, 0.0006],
        [0.0006, 0.0015],
        [0.0003, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0012],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0006, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0592, 0.0658],
        [0.0605, 0.0644],
        [0.0600, 0.0649],
        [0.0603, 0.0646],
        [0.0594, 0.0656],
        [0.0678, 0.0575],
        [0.0616, 0.0633],
        [0.0697, 0.0559],
        [0.0613, 0.0636],
        [0.0630, 0.0618],
        [0.0612, 0.0637],
        [0.0585, 0.0666],
        [0.0603, 0.0646],
        [0.0690, 0.0564],
        [0.0647, 0.0602],
        [0.0634, 0.0614]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.358978
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0006, 0.0013],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0004],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0649, 0.0600],
        [0.0595, 0.0655],
        [0.0637, 0.0612],
        [0.0629, 0.0620],
        [0.0625, 0.0624],
        [0.0618, 0.0631],
        [0.0622, 0.0627],
        [0.0655, 0.0595],
        [0.0612, 0.0638],
        [0.0587, 0.0665],
        [0.0628, 0.0621],
        [0.0633, 0.0617],
        [0.0607, 0.0643],
        [0.0592, 0.0659],
        [0.0697, 0.0560],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.310938
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0005, 0.0011],
        [0.0003, 0.0012],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0011],
        [0.0004, 0.0012],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0008, 0.0014],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0607],
        [0.0623, 0.0626],
        [0.0580, 0.0673],
        [0.0648, 0.0602],
        [0.0638, 0.0612],
        [0.0621, 0.0628],
        [0.0627, 0.0622],
        [0.0607, 0.0642],
        [0.0604, 0.0645],
        [0.0594, 0.0657],
        [0.0624, 0.0625],
        [0.0663, 0.0589],
        [0.0661, 0.0590],
        [0.0642, 0.0608],
        [0.0616, 0.0633],
        [0.0610, 0.0639]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.332586
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0020],
        [0.0004, 0.0011],
        [0.0002, 0.0003],
        [0.0005, 0.0013],
        [0.0002, 0.0010],
        [0.0005, 0.0014],
        [0.0002, 0.0007],
        [0.0006, 0.0010],
        [0.0003, 0.0013],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0002, 0.0006],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0570, 0.0683],
        [0.0631, 0.0617],
        [0.0686, 0.0567],
        [0.0613, 0.0634],
        [0.0578, 0.0673],
        [0.0605, 0.0643],
        [0.0583, 0.0667],
        [0.0684, 0.0569],
        [0.0570, 0.0682],
        [0.0681, 0.0571],
        [0.0599, 0.0649],
        [0.0685, 0.0568],
        [0.0634, 0.0614],
        [0.0605, 0.0643],
        [0.0630, 0.0618],
        [0.0646, 0.0602]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.364244
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0010, 0.0025],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0005, 0.0014],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0008],
        [0.0004, 0.0011],
        [0.0004, 0.0008],
        [0.0001, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0002, 0.0005],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0634],
        [0.0664, 0.0587],
        [0.0663, 0.0588],
        [0.0612, 0.0637],
        [0.0639, 0.0610],
        [0.0648, 0.0602],
        [0.0580, 0.0672],
        [0.0600, 0.0650],
        [0.0642, 0.0607],
        [0.0577, 0.0676],
        [0.0613, 0.0636],
        [0.0584, 0.0668],
        [0.0656, 0.0594],
        [0.0636, 0.0613],
        [0.0638, 0.0611],
        [0.0633, 0.0616]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.563713
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0012],
        [0.0002, 0.0003],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0012],
        [0.0003, 0.0011],
        [0.0002, 0.0007],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0713, 0.0546],
        [0.0635, 0.0613],
        [0.0644, 0.0604],
        [0.0608, 0.0640],
        [0.0677, 0.0574],
        [0.0625, 0.0622],
        [0.0631, 0.0617],
        [0.0567, 0.0686],
        [0.0689, 0.0565],
        [0.0609, 0.0639],
        [0.0637, 0.0610],
        [0.0597, 0.0652],
        [0.0593, 0.0655],
        [0.0568, 0.0685],
        [0.0574, 0.0677],
        [0.0632, 0.0616]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.481069
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0012],
        [0.0003, 0.0011],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0004, 0.0011],
        [0.0004, 0.0014],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0005, 0.0015],
        [0.0005, 0.0009],
        [0.0004, 0.0011],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0620, 0.0629],
        [0.0587, 0.0664],
        [0.0658, 0.0593],
        [0.0600, 0.0650],
        [0.0639, 0.0610],
        [0.0597, 0.0653],
        [0.0622, 0.0627],
        [0.0595, 0.0655],
        [0.0649, 0.0601],
        [0.0643, 0.0606],
        [0.0646, 0.0603],
        [0.0600, 0.0650],
        [0.0598, 0.0652],
        [0.0691, 0.0564],
        [0.0609, 0.0641],
        [0.0646, 0.0603]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.447409
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0005, 0.0012],
        [0.0007, 0.0014],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0612],
        [0.0629, 0.0620],
        [0.0591, 0.0660],
        [0.0639, 0.0610],
        [0.0616, 0.0633],
        [0.0624, 0.0625],
        [0.0602, 0.0648],
        [0.0620, 0.0629],
        [0.0617, 0.0632],
        [0.0646, 0.0604],
        [0.0673, 0.0580],
        [0.0604, 0.0645],
        [0.0662, 0.0589],
        [0.0589, 0.0662],
        [0.0604, 0.0645],
        [0.0646, 0.0604]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.330044
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0012],
        [0.0003, 0.0013],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0014],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0634],
        [0.0649, 0.0600],
        [0.0607, 0.0642],
        [0.0561, 0.0694],
        [0.0631, 0.0617],
        [0.0597, 0.0653],
        [0.0670, 0.0582],
        [0.0610, 0.0639],
        [0.0621, 0.0627],
        [0.0676, 0.0576],
        [0.0593, 0.0657],
        [0.0656, 0.0593],
        [0.0627, 0.0621],
        [0.0574, 0.0679],
        [0.0622, 0.0626],
        [0.0694, 0.0561]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.358103
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0005, 0.0014],
        [0.0005, 0.0011],
        [0.0008, 0.0017],
        [0.0002, 0.0008],
        [0.0004, 0.0009],
        [0.0009, 0.0019],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0648],
        [0.0613, 0.0635],
        [0.0694, 0.0562],
        [0.0631, 0.0617],
        [0.0611, 0.0638],
        [0.0610, 0.0639],
        [0.0630, 0.0618],
        [0.0636, 0.0613],
        [0.0585, 0.0666],
        [0.0623, 0.0625],
        [0.0636, 0.0613],
        [0.0599, 0.0651],
        [0.0650, 0.0600],
        [0.0686, 0.0568],
        [0.0601, 0.0648],
        [0.0594, 0.0657]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.427620
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0006, 0.0010],
        [0.0003, 0.0016],
        [0.0007, 0.0013],
        [0.0002, 0.0006],
        [0.0003, 0.0011],
        [0.0004, 0.0006],
        [0.0001, 0.0002]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249]], device='cuda:0')
tensor([[0.1259, 0.1232],
        [0.1328, 0.1169],
        [0.1083, 0.1432],
        [0.1299, 0.1194],
        [0.1147, 0.1352],
        [0.1151, 0.1349],
        [0.1353, 0.1147],
        [0.1380, 0.1125]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.213482
acc:  0.555
Time taken to execute the en SA task with prompt type auxiliary, variation 8 and batchsize 16: 0:00:04.983418
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_8']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([110, 2])
answers_probs just softmax dim 0: tensor([[0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091]], device='cuda:0')
tensor([[0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA auxiliary 9 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0008],
        [0.0008, 0.0019],
        [0.0006, 0.0013],
        [0.0005, 0.0011],
        [0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0005, 0.0014],
        [0.0004, 0.0006],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0622],
        [0.0648, 0.0603],
        [0.0630, 0.0619],
        [0.0657, 0.0594],
        [0.0598, 0.0652],
        [0.0604, 0.0646],
        [0.0615, 0.0634],
        [0.0637, 0.0613],
        [0.0613, 0.0636],
        [0.0608, 0.0642],
        [0.0622, 0.0628],
        [0.0654, 0.0597],
        [0.0620, 0.0630],
        [0.0593, 0.0658],
        [0.0652, 0.0598],
        [0.0622, 0.0628]], device='cuda:0')
 Batch: 0 of auxiliary classification Duration: 0:00:00.544947
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0010],
        [0.0012, 0.0018],
        [0.0005, 0.0010],
        [0.0004, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0008, 0.0014],
        [0.0006, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0006, 0.0012],
        [0.0004, 0.0005],
        [0.0006, 0.0015],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0612],
        [0.0637, 0.0611],
        [0.0591, 0.0659],
        [0.0711, 0.0548],
        [0.0614, 0.0634],
        [0.0657, 0.0593],
        [0.0620, 0.0628],
        [0.0631, 0.0617],
        [0.0625, 0.0624],
        [0.0636, 0.0613],
        [0.0604, 0.0645],
        [0.0654, 0.0595],
        [0.0572, 0.0681],
        [0.0610, 0.0639],
        [0.0573, 0.0680],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 1 of auxiliary classification Duration: 0:00:00.433214
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0014],
        [0.0007, 0.0014],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0005, 0.0008],
        [0.0010, 0.0014],
        [0.0006, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0007, 0.0013],
        [0.0008, 0.0013],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0009, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0642],
        [0.0613, 0.0637],
        [0.0609, 0.0641],
        [0.0575, 0.0679],
        [0.0628, 0.0622],
        [0.0665, 0.0587],
        [0.0624, 0.0625],
        [0.0632, 0.0617],
        [0.0637, 0.0613],
        [0.0632, 0.0617],
        [0.0616, 0.0633],
        [0.0628, 0.0622],
        [0.0620, 0.0630],
        [0.0637, 0.0613],
        [0.0637, 0.0613],
        [0.0640, 0.0609]], device='cuda:0')
 Batch: 2 of auxiliary classification Duration: 0:00:00.362507
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0007, 0.0010],
        [0.0008, 0.0010],
        [0.0008, 0.0011],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0005, 0.0013],
        [0.0006, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0008, 0.0012],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0011],
        [0.0006, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0610, 0.0639],
        [0.0590, 0.0661],
        [0.0669, 0.0582],
        [0.0681, 0.0572],
        [0.0665, 0.0586],
        [0.0641, 0.0608],
        [0.0627, 0.0621],
        [0.0579, 0.0673],
        [0.0628, 0.0620],
        [0.0608, 0.0641],
        [0.0632, 0.0617],
        [0.0654, 0.0596],
        [0.0627, 0.0621],
        [0.0624, 0.0625],
        [0.0574, 0.0679],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 3 of auxiliary classification Duration: 0:00:00.356737
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0006, 0.0017],
        [0.0007, 0.0011],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0004, 0.0008],
        [0.0010, 0.0017],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0010],
        [0.0004, 0.0012],
        [0.0005, 0.0008],
        [0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0651],
        [0.0591, 0.0660],
        [0.0653, 0.0597],
        [0.0658, 0.0593],
        [0.0654, 0.0596],
        [0.0632, 0.0617],
        [0.0613, 0.0637],
        [0.0640, 0.0609],
        [0.0610, 0.0640],
        [0.0644, 0.0606],
        [0.0625, 0.0625],
        [0.0588, 0.0664],
        [0.0640, 0.0609],
        [0.0621, 0.0628],
        [0.0625, 0.0625],
        [0.0607, 0.0643]], device='cuda:0')
 Batch: 4 of auxiliary classification Duration: 0:00:00.367042
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0006, 0.0015],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0006, 0.0016],
        [0.0010, 0.0013],
        [0.0003, 0.0009],
        [0.0007, 0.0010],
        [0.0004, 0.0008],
        [0.0006, 0.0012],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0657],
        [0.0645, 0.0604],
        [0.0660, 0.0590],
        [0.0591, 0.0660],
        [0.0633, 0.0616],
        [0.0661, 0.0589],
        [0.0624, 0.0625],
        [0.0577, 0.0675],
        [0.0688, 0.0566],
        [0.0581, 0.0670],
        [0.0664, 0.0587],
        [0.0624, 0.0625],
        [0.0607, 0.0642],
        [0.0616, 0.0632],
        [0.0596, 0.0654],
        [0.0642, 0.0607]], device='cuda:0')
 Batch: 5 of auxiliary classification Duration: 0:00:00.289215
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0006, 0.0011],
        [0.0006, 0.0010],
        [0.0004, 0.0013],
        [0.0004, 0.0010],
        [0.0003, 0.0004],
        [0.0005, 0.0010],
        [0.0006, 0.0015],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0004, 0.0008],
        [0.0009, 0.0018],
        [0.0002, 0.0004],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0581, 0.0671],
        [0.0627, 0.0621],
        [0.0622, 0.0626],
        [0.0647, 0.0602],
        [0.0566, 0.0688],
        [0.0594, 0.0655],
        [0.0661, 0.0589],
        [0.0622, 0.0626],
        [0.0592, 0.0659],
        [0.0633, 0.0616],
        [0.0670, 0.0581],
        [0.0668, 0.0584],
        [0.0631, 0.0618],
        [0.0619, 0.0630],
        [0.0607, 0.0642],
        [0.0659, 0.0591]], device='cuda:0')
 Batch: 6 of auxiliary classification Duration: 0:00:00.481204
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0004, 0.0013],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0006, 0.0012],
        [0.0006, 0.0010],
        [0.0007, 0.0012],
        [0.0004, 0.0009],
        [0.0005, 0.0011],
        [0.0006, 0.0009],
        [0.0003, 0.0009],
        [0.0007, 0.0011],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0598],
        [0.0640, 0.0609],
        [0.0578, 0.0675],
        [0.0633, 0.0615],
        [0.0611, 0.0638],
        [0.0587, 0.0664],
        [0.0605, 0.0644],
        [0.0638, 0.0611],
        [0.0644, 0.0606],
        [0.0651, 0.0599],
        [0.0625, 0.0624],
        [0.0611, 0.0638],
        [0.0668, 0.0584],
        [0.0562, 0.0694],
        [0.0659, 0.0591],
        [0.0638, 0.0611]], device='cuda:0')
 Batch: 7 of auxiliary classification Duration: 0:00:00.318621
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0012],
        [0.0004, 0.0007],
        [0.0002, 0.0007],
        [0.0009, 0.0015],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0009, 0.0014],
        [0.0002, 0.0005],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0010],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0597],
        [0.0641, 0.0608],
        [0.0551, 0.0708],
        [0.0629, 0.0619],
        [0.0643, 0.0606],
        [0.0661, 0.0590],
        [0.0632, 0.0617],
        [0.0635, 0.0614],
        [0.0641, 0.0608],
        [0.0610, 0.0639],
        [0.0602, 0.0648],
        [0.0624, 0.0625],
        [0.0615, 0.0634],
        [0.0671, 0.0581],
        [0.0575, 0.0677],
        [0.0618, 0.0631]], device='cuda:0')
 Batch: 8 of auxiliary classification Duration: 0:00:00.445444
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0006, 0.0011],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0010],
        [0.0006, 0.0011],
        [0.0003, 0.0010],
        [0.0005, 0.0012],
        [0.0005, 0.0012],
        [0.0004, 0.0010],
        [0.0007, 0.0011],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0630, 0.0619],
        [0.0630, 0.0619],
        [0.0654, 0.0596],
        [0.0620, 0.0629],
        [0.0603, 0.0647],
        [0.0645, 0.0605],
        [0.0584, 0.0668],
        [0.0606, 0.0644],
        [0.0604, 0.0646],
        [0.0604, 0.0646],
        [0.0650, 0.0599],
        [0.0586, 0.0666],
        [0.0606, 0.0644],
        [0.0659, 0.0592],
        [0.0679, 0.0574]], device='cuda:0')
 Batch: 9 of auxiliary classification Duration: 0:00:00.312765
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0010],
        [0.0004, 0.0008],
        [0.0006, 0.0013],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0006, 0.0012],
        [0.0003, 0.0008],
        [0.0004, 0.0012],
        [0.0008, 0.0015],
        [0.0003, 0.0006],
        [0.0006, 0.0011],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0010, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0690, 0.0565],
        [0.0621, 0.0627],
        [0.0616, 0.0633],
        [0.0644, 0.0605],
        [0.0594, 0.0657],
        [0.0630, 0.0619],
        [0.0632, 0.0617],
        [0.0574, 0.0679],
        [0.0583, 0.0668],
        [0.0637, 0.0612],
        [0.0645, 0.0604],
        [0.0636, 0.0613],
        [0.0596, 0.0654],
        [0.0603, 0.0646],
        [0.0651, 0.0599],
        [0.0649, 0.0601]], device='cuda:0')
 Batch: 10 of auxiliary classification Duration: 0:00:00.400948
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0013],
        [0.0005, 0.0011],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0006, 0.0011],
        [0.0006, 0.0014],
        [0.0007, 0.0020],
        [0.0009, 0.0017],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0577, 0.0676],
        [0.0615, 0.0634],
        [0.0608, 0.0642],
        [0.0624, 0.0625],
        [0.0634, 0.0615],
        [0.0599, 0.0651],
        [0.0587, 0.0664],
        [0.0641, 0.0608],
        [0.0653, 0.0598],
        [0.0638, 0.0612],
        [0.0662, 0.0589],
        [0.0630, 0.0619],
        [0.0601, 0.0649],
        [0.0644, 0.0605],
        [0.0658, 0.0592],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 11 of auxiliary classification Duration: 0:00:00.333914
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0005, 0.0015],
        [0.0003, 0.0005],
        [0.0005, 0.0013],
        [0.0006, 0.0011],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1192, 0.1307],
        [0.1232, 0.1265],
        [0.1269, 0.1228],
        [0.1158, 0.1346],
        [0.1292, 0.1206],
        [0.1188, 0.1311],
        [0.1290, 0.1208],
        [0.1380, 0.1129]], device='cuda:0')
 Batch: 12 of auxiliary classification Duration: 0:00:00.219122
acc:  0.54
Time taken to execute the en SA task with prompt type auxiliary, variation 9 and batchsize 16: 0:00:04.887512
path ['42', 'en', 'bloom-big', 'SA', 'auxiliary', 'prompt_id_9']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

prompt_type modal has 10 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([93, 2])
answers_probs just softmax dim 0: tensor([[0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108]], device='cuda:0')
tensor([[0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108],
        [0.0108, 0.0108]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0006, 0.0007],
        [0.0007, 0.0008],
        [0.0005, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0007, 0.0013],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0650],
        [0.0584, 0.0668],
        [0.0600, 0.0650],
        [0.0664, 0.0587],
        [0.0657, 0.0593],
        [0.0678, 0.0575],
        [0.0611, 0.0639],
        [0.0633, 0.0616],
        [0.0640, 0.0609],
        [0.0634, 0.0615],
        [0.0645, 0.0605],
        [0.0593, 0.0657],
        [0.0623, 0.0626],
        [0.0629, 0.0620],
        [0.0595, 0.0655],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.409941
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0006, 0.0010],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0006, 0.0008],
        [0.0004, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0005, 0.0006],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0011, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0634],
        [0.0631, 0.0618],
        [0.0611, 0.0638],
        [0.0636, 0.0614],
        [0.0623, 0.0627],
        [0.0649, 0.0601],
        [0.0634, 0.0615],
        [0.0613, 0.0636],
        [0.0614, 0.0635],
        [0.0570, 0.0684],
        [0.0638, 0.0611],
        [0.0633, 0.0616],
        [0.0601, 0.0649],
        [0.0604, 0.0646],
        [0.0650, 0.0600],
        [0.0676, 0.0577]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.400038
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0006],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0006, 0.0006],
        [0.0008, 0.0011],
        [0.0003, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0689, 0.0566],
        [0.0604, 0.0646],
        [0.0589, 0.0662],
        [0.0656, 0.0594],
        [0.0624, 0.0625],
        [0.0659, 0.0592],
        [0.0605, 0.0645],
        [0.0607, 0.0643],
        [0.0618, 0.0631],
        [0.0607, 0.0642],
        [0.0623, 0.0626],
        [0.0648, 0.0602],
        [0.0655, 0.0595],
        [0.0609, 0.0640],
        [0.0610, 0.0639],
        [0.0597, 0.0653]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.337911
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0007, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0006, 0.0009],
        [0.0008, 0.0011],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0656, 0.0594],
        [0.0633, 0.0616],
        [0.0625, 0.0624],
        [0.0643, 0.0607],
        [0.0673, 0.0579],
        [0.0628, 0.0620],
        [0.0593, 0.0658],
        [0.0635, 0.0613],
        [0.0626, 0.0623],
        [0.0631, 0.0618],
        [0.0614, 0.0635],
        [0.0594, 0.0657],
        [0.0645, 0.0604],
        [0.0617, 0.0632],
        [0.0640, 0.0609],
        [0.0547, 0.0712]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.364667
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0008, 0.0008],
        [0.0007, 0.0009],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0007, 0.0012],
        [0.0004, 0.0006],
        [0.0007, 0.0008],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0639, 0.0610],
        [0.0608, 0.0641],
        [0.0585, 0.0667],
        [0.0635, 0.0614],
        [0.0686, 0.0568],
        [0.0632, 0.0617],
        [0.0638, 0.0611],
        [0.0585, 0.0667],
        [0.0614, 0.0635],
        [0.0617, 0.0631],
        [0.0667, 0.0585],
        [0.0636, 0.0613],
        [0.0623, 0.0626],
        [0.0615, 0.0634],
        [0.0583, 0.0669]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.451069
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0012],
        [0.0003, 0.0004],
        [0.0006, 0.0010],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0008, 0.0011],
        [0.0006, 0.0006],
        [0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0008, 0.0011],
        [0.0005, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0007, 0.0008],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0607, 0.0642],
        [0.0628, 0.0620],
        [0.0605, 0.0644],
        [0.0622, 0.0626],
        [0.0628, 0.0621],
        [0.0620, 0.0629],
        [0.0634, 0.0615],
        [0.0678, 0.0575],
        [0.0615, 0.0634],
        [0.0630, 0.0619],
        [0.0625, 0.0624],
        [0.0667, 0.0585],
        [0.0604, 0.0646],
        [0.0567, 0.0688],
        [0.0658, 0.0592],
        [0.0610, 0.0640]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.316117
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0006, 0.0009],
        [0.0006, 0.0010],
        [0.0005, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0648],
        [0.0609, 0.0640],
        [0.0618, 0.0631],
        [0.0682, 0.0572],
        [0.0636, 0.0613],
        [0.0679, 0.0574],
        [0.0643, 0.0606],
        [0.0595, 0.0655],
        [0.0565, 0.0690],
        [0.0612, 0.0636],
        [0.0622, 0.0627],
        [0.0647, 0.0603],
        [0.0612, 0.0637],
        [0.0631, 0.0618],
        [0.0611, 0.0638],
        [0.0637, 0.0612]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.538771
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0007, 0.0010],
        [0.0009, 0.0015],
        [0.0009, 0.0013],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0006, 0.0011],
        [0.0006, 0.0008],
        [0.0005, 0.0005],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0007, 0.0011],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0644, 0.0606],
        [0.0606, 0.0644],
        [0.0608, 0.0642],
        [0.0621, 0.0628],
        [0.0654, 0.0597],
        [0.0579, 0.0674],
        [0.0581, 0.0671],
        [0.0616, 0.0633],
        [0.0658, 0.0593],
        [0.0649, 0.0601],
        [0.0633, 0.0616],
        [0.0616, 0.0633],
        [0.0627, 0.0622],
        [0.0649, 0.0601],
        [0.0610, 0.0639],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.426476
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0002],
        [0.0007, 0.0009],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0007, 0.0008],
        [0.0004, 0.0004],
        [0.0003, 0.0004],
        [0.0006, 0.0006],
        [0.0006, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0604, 0.0646],
        [0.0630, 0.0619],
        [0.0689, 0.0566],
        [0.0613, 0.0636],
        [0.0578, 0.0674],
        [0.0595, 0.0656],
        [0.0627, 0.0622],
        [0.0614, 0.0635],
        [0.0637, 0.0612],
        [0.0607, 0.0642],
        [0.0626, 0.0623],
        [0.0663, 0.0589],
        [0.0613, 0.0636],
        [0.0637, 0.0612],
        [0.0654, 0.0597]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.363166
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0006, 0.0007],
        [0.0005, 0.0005],
        [0.0005, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0011],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0005, 0.0005],
        [0.0003, 0.0004],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0607],
        [0.0627, 0.0620],
        [0.0621, 0.0626],
        [0.0590, 0.0660],
        [0.0679, 0.0573],
        [0.0677, 0.0574],
        [0.0684, 0.0569],
        [0.0608, 0.0640],
        [0.0603, 0.0644],
        [0.0558, 0.0697],
        [0.0586, 0.0664],
        [0.0601, 0.0647],
        [0.0553, 0.0703],
        [0.0682, 0.0570],
        [0.0629, 0.0618],
        [0.0662, 0.0588]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.257368
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0007, 0.0009],
        [0.0003, 0.0003],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0004],
        [0.0004, 0.0005],
        [0.0005, 0.0009],
        [0.0004, 0.0005],
        [0.0005, 0.0009],
        [0.0007, 0.0012],
        [0.0003, 0.0006],
        [0.0007, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0646],
        [0.0630, 0.0619],
        [0.0657, 0.0593],
        [0.0683, 0.0570],
        [0.0601, 0.0648],
        [0.0599, 0.0651],
        [0.0689, 0.0566],
        [0.0647, 0.0602],
        [0.0596, 0.0654],
        [0.0630, 0.0619],
        [0.0583, 0.0668],
        [0.0597, 0.0653],
        [0.0603, 0.0646],
        [0.0645, 0.0605],
        [0.0615, 0.0634],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.320161
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0007, 0.0019],
        [0.0005, 0.0009],
        [0.0007, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0010, 0.0015],
        [0.0006, 0.0009],
        [0.0005, 0.0007],
        [0.0009, 0.0012],
        [0.0006, 0.0009],
        [0.0006, 0.0010],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0568, 0.0686],
        [0.0562, 0.0693],
        [0.0598, 0.0652],
        [0.0670, 0.0581],
        [0.0622, 0.0626],
        [0.0566, 0.0688],
        [0.0607, 0.0641],
        [0.0650, 0.0599],
        [0.0639, 0.0609],
        [0.0636, 0.0613],
        [0.0629, 0.0620],
        [0.0660, 0.0590],
        [0.0651, 0.0598],
        [0.0656, 0.0593],
        [0.0636, 0.0613],
        [0.0650, 0.0599]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.428407
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1254, 0.1244],
        [0.1199, 0.1300],
        [0.1381, 0.1129],
        [0.1297, 0.1202],
        [0.1226, 0.1272],
        [0.1182, 0.1319],
        [0.1233, 0.1265],
        [0.1228, 0.1269]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.213528
acc:  0.525
Time taken to execute the en SA task with prompt type modal, variation 0 and batchsize 16: 0:00:04.849724
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([103, 2])
answers_probs just softmax dim 0: tensor([[0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097]], device='cuda:0')
tensor([[0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0004],
        [0.0008, 0.0012],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0010, 0.0011],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0592],
        [0.0668, 0.0582],
        [0.0665, 0.0585],
        [0.0619, 0.0629],
        [0.0559, 0.0695],
        [0.0605, 0.0643],
        [0.0698, 0.0557],
        [0.0629, 0.0619],
        [0.0548, 0.0709],
        [0.0609, 0.0639],
        [0.0598, 0.0651],
        [0.0603, 0.0645],
        [0.0614, 0.0633],
        [0.0688, 0.0565],
        [0.0628, 0.0620],
        [0.0612, 0.0636]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.412624
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0630],
        [0.0591, 0.0660],
        [0.0600, 0.0650],
        [0.0615, 0.0634],
        [0.0626, 0.0623],
        [0.0651, 0.0599],
        [0.0594, 0.0657],
        [0.0661, 0.0590],
        [0.0652, 0.0598],
        [0.0627, 0.0622],
        [0.0578, 0.0675],
        [0.0659, 0.0592],
        [0.0635, 0.0614],
        [0.0643, 0.0607],
        [0.0611, 0.0639],
        [0.0638, 0.0611]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.446023
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0670, 0.0583],
        [0.0635, 0.0614],
        [0.0624, 0.0626],
        [0.0624, 0.0626],
        [0.0667, 0.0585],
        [0.0626, 0.0623],
        [0.0616, 0.0634],
        [0.0630, 0.0619],
        [0.0638, 0.0612],
        [0.0624, 0.0625],
        [0.0603, 0.0647],
        [0.0577, 0.0676],
        [0.0601, 0.0649],
        [0.0610, 0.0639],
        [0.0641, 0.0608],
        [0.0615, 0.0635]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.359580
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0012],
        [0.0004, 0.0006],
        [0.0006, 0.0007],
        [0.0006, 0.0018],
        [0.0003, 0.0008],
        [0.0005, 0.0005],
        [0.0005, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0010],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0607],
        [0.0630, 0.0618],
        [0.0667, 0.0583],
        [0.0567, 0.0686],
        [0.0588, 0.0661],
        [0.0713, 0.0546],
        [0.0675, 0.0576],
        [0.0596, 0.0652],
        [0.0572, 0.0680],
        [0.0658, 0.0591],
        [0.0623, 0.0624],
        [0.0634, 0.0613],
        [0.0559, 0.0696],
        [0.0660, 0.0590],
        [0.0632, 0.0615],
        [0.0586, 0.0664]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.328943
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0008, 0.0013],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0565, 0.0689],
        [0.0623, 0.0625],
        [0.0626, 0.0622],
        [0.0583, 0.0668],
        [0.0661, 0.0589],
        [0.0699, 0.0557],
        [0.0616, 0.0632],
        [0.0615, 0.0633],
        [0.0599, 0.0650],
        [0.0597, 0.0653],
        [0.0688, 0.0566],
        [0.0662, 0.0588],
        [0.0632, 0.0616],
        [0.0622, 0.0626],
        [0.0622, 0.0626],
        [0.0591, 0.0659]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.363036
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0006, 0.0011],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0001, 0.0004],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0603, 0.0647],
        [0.0648, 0.0601],
        [0.0625, 0.0624],
        [0.0635, 0.0614],
        [0.0655, 0.0595],
        [0.0557, 0.0700],
        [0.0580, 0.0671],
        [0.0617, 0.0631],
        [0.0674, 0.0578],
        [0.0629, 0.0619],
        [0.0625, 0.0624],
        [0.0665, 0.0586],
        [0.0614, 0.0635],
        [0.0626, 0.0623],
        [0.0596, 0.0654]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.452816
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0010],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0007, 0.0013],
        [0.0006, 0.0008],
        [0.0006, 0.0008],
        [0.0002, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0669, 0.0582],
        [0.0632, 0.0617],
        [0.0641, 0.0607],
        [0.0559, 0.0696],
        [0.0661, 0.0589],
        [0.0643, 0.0606],
        [0.0607, 0.0642],
        [0.0647, 0.0602],
        [0.0656, 0.0594],
        [0.0570, 0.0683],
        [0.0633, 0.0615],
        [0.0593, 0.0657],
        [0.0645, 0.0604],
        [0.0651, 0.0598],
        [0.0609, 0.0640],
        [0.0583, 0.0668]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.425075
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0004, 0.0008],
        [0.0007, 0.0011],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0002],
        [0.0004, 0.0005],
        [0.0009, 0.0014],
        [0.0002, 0.0005],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0587, 0.0662],
        [0.0607, 0.0640],
        [0.0582, 0.0667],
        [0.0678, 0.0573],
        [0.0639, 0.0608],
        [0.0588, 0.0661],
        [0.0630, 0.0617],
        [0.0600, 0.0647],
        [0.0613, 0.0634],
        [0.0607, 0.0640],
        [0.0640, 0.0607],
        [0.0752, 0.0517],
        [0.0690, 0.0563],
        [0.0643, 0.0605],
        [0.0580, 0.0670],
        [0.0563, 0.0690]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.362482
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0003],
        [0.0002, 0.0005],
        [0.0005, 0.0006],
        [0.0002, 0.0004],
        [0.0005, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0621],
        [0.0597, 0.0652],
        [0.0570, 0.0683],
        [0.0564, 0.0691],
        [0.0615, 0.0633],
        [0.0669, 0.0582],
        [0.0602, 0.0647],
        [0.0651, 0.0598],
        [0.0625, 0.0623],
        [0.0653, 0.0597],
        [0.0592, 0.0658],
        [0.0632, 0.0616],
        [0.0650, 0.0599],
        [0.0683, 0.0570],
        [0.0628, 0.0621],
        [0.0639, 0.0609]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.412233
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0007, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0643],
        [0.0652, 0.0597],
        [0.0647, 0.0602],
        [0.0658, 0.0592],
        [0.0673, 0.0579],
        [0.0612, 0.0636],
        [0.0602, 0.0647],
        [0.0669, 0.0582],
        [0.0615, 0.0634],
        [0.0644, 0.0605],
        [0.0665, 0.0586],
        [0.0586, 0.0664],
        [0.0583, 0.0668],
        [0.0562, 0.0693],
        [0.0602, 0.0647],
        [0.0624, 0.0625]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.548216
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0007, 0.0012],
        [0.0005, 0.0008],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0007, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0007, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0005, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0604],
        [0.0611, 0.0637],
        [0.0605, 0.0644],
        [0.0616, 0.0632],
        [0.0600, 0.0649],
        [0.0640, 0.0609],
        [0.0684, 0.0569],
        [0.0626, 0.0622],
        [0.0648, 0.0601],
        [0.0599, 0.0650],
        [0.0608, 0.0641],
        [0.0642, 0.0607],
        [0.0560, 0.0696],
        [0.0638, 0.0610],
        [0.0689, 0.0566],
        [0.0588, 0.0663]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.359357
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0007, 0.0007],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0013],
        [0.0004, 0.0005],
        [0.0003, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0008, 0.0015],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0594],
        [0.0708, 0.0550],
        [0.0645, 0.0603],
        [0.0616, 0.0632],
        [0.0594, 0.0655],
        [0.0556, 0.0699],
        [0.0665, 0.0585],
        [0.0566, 0.0688],
        [0.0621, 0.0627],
        [0.0609, 0.0638],
        [0.0611, 0.0637],
        [0.0636, 0.0612],
        [0.0650, 0.0598],
        [0.0578, 0.0673],
        [0.0621, 0.0627],
        [0.0669, 0.0581]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.311685
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0002],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0007, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1072, 0.1448],
        [0.1163, 0.1335],
        [0.1364, 0.1137],
        [0.1145, 0.1356],
        [0.1330, 0.1167],
        [0.1289, 0.1203],
        [0.1297, 0.1197],
        [0.1341, 0.1158]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.227407
acc:  0.46
Time taken to execute the en SA task with prompt type modal, variation 1 and batchsize 16: 0:00:05.031100
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([109, 2])
answers_probs just softmax dim 0: tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0003, 0.0011],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0006, 0.0016],
        [0.0003, 0.0007],
        [0.0003, 0.0013],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0011],
        [0.0006, 0.0016],
        [0.0001, 0.0002],
        [0.0004, 0.0008],
        [0.0007, 0.0014],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0589],
        [0.0563, 0.0692],
        [0.0613, 0.0635],
        [0.0637, 0.0611],
        [0.0614, 0.0634],
        [0.0622, 0.0626],
        [0.0557, 0.0699],
        [0.0658, 0.0591],
        [0.0595, 0.0654],
        [0.0654, 0.0595],
        [0.0596, 0.0653],
        [0.0593, 0.0656],
        [0.0690, 0.0564],
        [0.0629, 0.0619],
        [0.0642, 0.0606],
        [0.0678, 0.0574]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.437840
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0007, 0.0017],
        [0.0007, 0.0012],
        [0.0004, 0.0014],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0002, 0.0005],
        [0.0006, 0.0009],
        [0.0006, 0.0015],
        [0.0004, 0.0012],
        [0.0006, 0.0014],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0624],
        [0.0654, 0.0595],
        [0.0621, 0.0627],
        [0.0669, 0.0582],
        [0.0571, 0.0682],
        [0.0597, 0.0653],
        [0.0611, 0.0637],
        [0.0647, 0.0602],
        [0.0676, 0.0576],
        [0.0605, 0.0644],
        [0.0585, 0.0666],
        [0.0614, 0.0634],
        [0.0679, 0.0573],
        [0.0604, 0.0645],
        [0.0569, 0.0684],
        [0.0673, 0.0578]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.404324
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0004, 0.0010],
        [0.0002, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0011],
        [0.0007, 0.0016],
        [0.0005, 0.0010],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0021],
        [0.0003, 0.0008],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0594],
        [0.0614, 0.0635],
        [0.0611, 0.0638],
        [0.0609, 0.0641],
        [0.0639, 0.0610],
        [0.0666, 0.0585],
        [0.0609, 0.0640],
        [0.0562, 0.0693],
        [0.0647, 0.0603],
        [0.0636, 0.0613],
        [0.0620, 0.0629],
        [0.0659, 0.0592],
        [0.0666, 0.0585],
        [0.0590, 0.0661],
        [0.0596, 0.0654],
        [0.0621, 0.0628]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.363932
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0015],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0005, 0.0010],
        [0.0004, 0.0012],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0018],
        [0.0005, 0.0014],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0013],
        [0.0002, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0635],
        [0.0652, 0.0597],
        [0.0621, 0.0628],
        [0.0635, 0.0614],
        [0.0658, 0.0592],
        [0.0613, 0.0636],
        [0.0607, 0.0642],
        [0.0624, 0.0625],
        [0.0562, 0.0693],
        [0.0599, 0.0650],
        [0.0634, 0.0615],
        [0.0642, 0.0607],
        [0.0619, 0.0630],
        [0.0604, 0.0646],
        [0.0619, 0.0630],
        [0.0696, 0.0560]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.330803
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0020],
        [0.0002, 0.0008],
        [0.0004, 0.0014],
        [0.0005, 0.0014],
        [0.0007, 0.0019],
        [0.0007, 0.0022],
        [0.0005, 0.0013],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0004, 0.0010],
        [0.0005, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0573, 0.0679],
        [0.0596, 0.0653],
        [0.0582, 0.0669],
        [0.0604, 0.0645],
        [0.0617, 0.0631],
        [0.0594, 0.0655],
        [0.0633, 0.0615],
        [0.0645, 0.0604],
        [0.0611, 0.0637],
        [0.0649, 0.0600],
        [0.0633, 0.0615],
        [0.0675, 0.0576],
        [0.0738, 0.0528],
        [0.0620, 0.0628],
        [0.0618, 0.0630],
        [0.0612, 0.0636]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.429562
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0003, 0.0009],
        [0.0006, 0.0015],
        [0.0003, 0.0009],
        [0.0005, 0.0011],
        [0.0004, 0.0017],
        [0.0004, 0.0008],
        [0.0004, 0.0012],
        [0.0003, 0.0008],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0645],
        [0.0652, 0.0597],
        [0.0632, 0.0617],
        [0.0683, 0.0570],
        [0.0654, 0.0596],
        [0.0632, 0.0617],
        [0.0640, 0.0609],
        [0.0611, 0.0637],
        [0.0613, 0.0636],
        [0.0596, 0.0654],
        [0.0629, 0.0620],
        [0.0558, 0.0699],
        [0.0655, 0.0595],
        [0.0607, 0.0642],
        [0.0641, 0.0608],
        [0.0592, 0.0658]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.367382
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0010],
        [0.0003, 0.0012],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0002, 0.0003],
        [0.0005, 0.0013],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0012],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0651],
        [0.0617, 0.0631],
        [0.0598, 0.0652],
        [0.0586, 0.0665],
        [0.0636, 0.0613],
        [0.0595, 0.0655],
        [0.0710, 0.0549],
        [0.0617, 0.0631],
        [0.0660, 0.0590],
        [0.0635, 0.0614],
        [0.0609, 0.0640],
        [0.0606, 0.0643],
        [0.0659, 0.0591],
        [0.0639, 0.0610],
        [0.0610, 0.0638],
        [0.0625, 0.0623]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.422587
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0003, 0.0009],
        [0.0005, 0.0011],
        [0.0004, 0.0014],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0004, 0.0011],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0006, 0.0015],
        [0.0002, 0.0006],
        [0.0004, 0.0012],
        [0.0004, 0.0010],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0658, 0.0593],
        [0.0623, 0.0626],
        [0.0650, 0.0600],
        [0.0593, 0.0658],
        [0.0608, 0.0641],
        [0.0625, 0.0624],
        [0.0621, 0.0628],
        [0.0626, 0.0623],
        [0.0630, 0.0619],
        [0.0650, 0.0600],
        [0.0587, 0.0664],
        [0.0629, 0.0620],
        [0.0606, 0.0644],
        [0.0597, 0.0653],
        [0.0631, 0.0618],
        [0.0663, 0.0589]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.360713
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0012],
        [0.0004, 0.0011],
        [0.0002, 0.0006],
        [0.0005, 0.0012],
        [0.0006, 0.0021],
        [0.0005, 0.0013],
        [0.0003, 0.0005],
        [0.0006, 0.0021],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0622],
        [0.0628, 0.0621],
        [0.0587, 0.0665],
        [0.0632, 0.0617],
        [0.0683, 0.0571],
        [0.0628, 0.0621],
        [0.0652, 0.0598],
        [0.0605, 0.0645],
        [0.0622, 0.0627],
        [0.0608, 0.0642],
        [0.0629, 0.0620],
        [0.0587, 0.0665],
        [0.0622, 0.0627],
        [0.0682, 0.0572],
        [0.0590, 0.0661],
        [0.0620, 0.0629]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.447246
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0013],
        [0.0003, 0.0008],
        [0.0005, 0.0011],
        [0.0006, 0.0013],
        [0.0004, 0.0010],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0003, 0.0010],
        [0.0002, 0.0003],
        [0.0004, 0.0012],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0680, 0.0573],
        [0.0600, 0.0649],
        [0.0621, 0.0627],
        [0.0635, 0.0614],
        [0.0600, 0.0649],
        [0.0596, 0.0653],
        [0.0650, 0.0600],
        [0.0634, 0.0615],
        [0.0647, 0.0602],
        [0.0599, 0.0650],
        [0.0640, 0.0609],
        [0.0609, 0.0639],
        [0.0585, 0.0666],
        [0.0695, 0.0560],
        [0.0585, 0.0666],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.330982
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0017],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0011],
        [0.0004, 0.0014],
        [0.0003, 0.0006],
        [0.0005, 0.0016],
        [0.0005, 0.0016],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0004, 0.0012],
        [0.0004, 0.0008],
        [0.0003, 0.0012],
        [0.0005, 0.0012],
        [0.0004, 0.0010],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0596],
        [0.0625, 0.0624],
        [0.0639, 0.0611],
        [0.0573, 0.0681],
        [0.0594, 0.0657],
        [0.0674, 0.0578],
        [0.0598, 0.0652],
        [0.0606, 0.0643],
        [0.0638, 0.0611],
        [0.0620, 0.0629],
        [0.0611, 0.0638],
        [0.0666, 0.0586],
        [0.0590, 0.0661],
        [0.0646, 0.0604],
        [0.0629, 0.0619],
        [0.0638, 0.0611]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.403637
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0004, 0.0010],
        [0.0004, 0.0006],
        [0.0006, 0.0013],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0006, 0.0015],
        [0.0006, 0.0013],
        [0.0004, 0.0008],
        [0.0004, 0.0014],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0565, 0.0689],
        [0.0608, 0.0641],
        [0.0706, 0.0552],
        [0.0630, 0.0619],
        [0.0630, 0.0619],
        [0.0646, 0.0603],
        [0.0602, 0.0647],
        [0.0619, 0.0630],
        [0.0625, 0.0624],
        [0.0649, 0.0600],
        [0.0588, 0.0663],
        [0.0610, 0.0639],
        [0.0640, 0.0609],
        [0.0624, 0.0625],
        [0.0626, 0.0623],
        [0.0633, 0.0616]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.565175
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0014],
        [0.0005, 0.0009],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0004, 0.0011],
        [0.0002, 0.0003],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1188, 0.1314],
        [0.1317, 0.1185],
        [0.1174, 0.1329],
        [0.1234, 0.1264],
        [0.1278, 0.1221],
        [0.1238, 0.1260],
        [0.1314, 0.1187],
        [0.1257, 0.1241]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.164236
acc:  0.48
Time taken to execute the en SA task with prompt type modal, variation 2 and batchsize 16: 0:00:05.049329
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([128, 2])
answers_probs just softmax dim 0: tensor([[0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078]], device='cuda:0')
tensor([[0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0001, 0.0002],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0581, 0.0670],
        [0.0664, 0.0586],
        [0.0608, 0.0641],
        [0.0645, 0.0604],
        [0.0628, 0.0620],
        [0.0602, 0.0646],
        [0.0623, 0.0625],
        [0.0611, 0.0638],
        [0.0669, 0.0582],
        [0.0674, 0.0577],
        [0.0638, 0.0611],
        [0.0603, 0.0645],
        [0.0561, 0.0694],
        [0.0576, 0.0676],
        [0.0659, 0.0591],
        [0.0657, 0.0593]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.461308
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[3.2854e-04, 5.5885e-04],
        [5.7459e-04, 8.5592e-04],
        [2.7704e-04, 6.2418e-04],
        [5.5742e-04, 7.9250e-04],
        [3.6454e-04, 7.7772e-04],
        [3.1567e-04, 7.0000e-04],
        [6.7091e-04, 1.1063e-03],
        [2.1732e-04, 2.8133e-04],
        [3.5763e-04, 7.8678e-04],
        [2.5916e-04, 3.1257e-04],
        [4.9639e-04, 7.8726e-04],
        [3.4642e-04, 5.5361e-04],
        [4.3559e-04, 8.3303e-04],
        [9.7811e-05, 1.4853e-04],
        [4.0483e-04, 1.0252e-03],
        [3.3331e-04, 7.0000e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0620],
        [0.0648, 0.0601],
        [0.0590, 0.0660],
        [0.0656, 0.0594],
        [0.0597, 0.0653],
        [0.0592, 0.0658],
        [0.0633, 0.0616],
        [0.0671, 0.0581],
        [0.0593, 0.0657],
        [0.0683, 0.0571],
        [0.0639, 0.0610],
        [0.0638, 0.0611],
        [0.0612, 0.0637],
        [0.0645, 0.0604],
        [0.0576, 0.0677],
        [0.0599, 0.0650]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.407987
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0692, 0.0563],
        [0.0593, 0.0657],
        [0.0631, 0.0617],
        [0.0588, 0.0663],
        [0.0674, 0.0578],
        [0.0620, 0.0628],
        [0.0589, 0.0662],
        [0.0604, 0.0645],
        [0.0653, 0.0597],
        [0.0617, 0.0632],
        [0.0583, 0.0668],
        [0.0653, 0.0597],
        [0.0638, 0.0610],
        [0.0651, 0.0599],
        [0.0615, 0.0634],
        [0.0599, 0.0651]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.566470
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0008, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0598],
        [0.0637, 0.0612],
        [0.0624, 0.0625],
        [0.0665, 0.0586],
        [0.0607, 0.0642],
        [0.0606, 0.0643],
        [0.0592, 0.0659],
        [0.0621, 0.0627],
        [0.0627, 0.0622],
        [0.0559, 0.0697],
        [0.0635, 0.0614],
        [0.0656, 0.0594],
        [0.0661, 0.0590],
        [0.0609, 0.0640],
        [0.0600, 0.0650],
        [0.0649, 0.0601]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.407006
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0008],
        [0.0003, 0.0006],
        [0.0007, 0.0014],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0005],
        [0.0006, 0.0008],
        [0.0004, 0.0005],
        [0.0002, 0.0002],
        [0.0004, 0.0009],
        [0.0005, 0.0011],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0644, 0.0604],
        [0.0532, 0.0730],
        [0.0585, 0.0665],
        [0.0597, 0.0651],
        [0.0620, 0.0627],
        [0.0633, 0.0614],
        [0.0636, 0.0612],
        [0.0651, 0.0597],
        [0.0597, 0.0651],
        [0.0712, 0.0546],
        [0.0648, 0.0600],
        [0.0650, 0.0598],
        [0.0689, 0.0564],
        [0.0589, 0.0660],
        [0.0582, 0.0668],
        [0.0635, 0.0613]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.493825
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0003],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0008, 0.0015],
        [0.0004, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0001, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0663],
        [0.0583, 0.0668],
        [0.0637, 0.0611],
        [0.0714, 0.0545],
        [0.0613, 0.0635],
        [0.0631, 0.0617],
        [0.0608, 0.0641],
        [0.0660, 0.0590],
        [0.0628, 0.0620],
        [0.0636, 0.0613],
        [0.0657, 0.0592],
        [0.0613, 0.0635],
        [0.0650, 0.0599],
        [0.0622, 0.0626],
        [0.0578, 0.0674],
        [0.0581, 0.0670]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.422856
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0010, 0.0018],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0007, 0.0012],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0612],
        [0.0651, 0.0600],
        [0.0605, 0.0645],
        [0.0619, 0.0631],
        [0.0634, 0.0616],
        [0.0601, 0.0650],
        [0.0625, 0.0625],
        [0.0624, 0.0626],
        [0.0653, 0.0598],
        [0.0642, 0.0608],
        [0.0596, 0.0655],
        [0.0609, 0.0641],
        [0.0628, 0.0622],
        [0.0624, 0.0626],
        [0.0633, 0.0617],
        [0.0620, 0.0629]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.428577
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0007, 0.0011],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0002],
        [0.0002, 0.0003],
        [0.0007, 0.0009],
        [0.0005, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0637, 0.0612],
        [0.0614, 0.0635],
        [0.0650, 0.0600],
        [0.0604, 0.0646],
        [0.0638, 0.0612],
        [0.0586, 0.0666],
        [0.0644, 0.0606],
        [0.0652, 0.0598],
        [0.0618, 0.0632],
        [0.0577, 0.0676],
        [0.0642, 0.0607],
        [0.0626, 0.0624],
        [0.0618, 0.0632],
        [0.0607, 0.0643],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.342120
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0010],
        [0.0001, 0.0002],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0002, 0.0003],
        [0.0001, 0.0001]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0637],
        [0.0580, 0.0671],
        [0.0613, 0.0635],
        [0.0624, 0.0624],
        [0.0600, 0.0649],
        [0.0575, 0.0678],
        [0.0633, 0.0615],
        [0.0592, 0.0658],
        [0.0597, 0.0652],
        [0.0624, 0.0624],
        [0.0682, 0.0571],
        [0.0654, 0.0596],
        [0.0620, 0.0629],
        [0.0650, 0.0599],
        [0.0659, 0.0591],
        [0.0683, 0.0571]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.453538
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0007, 0.0010],
        [0.0003, 0.0003],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0009],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0001, 0.0002],
        [0.0004, 0.0009],
        [0.0010, 0.0015],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0642, 0.0606],
        [0.0626, 0.0622],
        [0.0650, 0.0599],
        [0.0603, 0.0646],
        [0.0635, 0.0613],
        [0.0677, 0.0576],
        [0.0626, 0.0622],
        [0.0589, 0.0661],
        [0.0546, 0.0714],
        [0.0658, 0.0592],
        [0.0613, 0.0635],
        [0.0590, 0.0660],
        [0.0656, 0.0594],
        [0.0590, 0.0660],
        [0.0641, 0.0607],
        [0.0657, 0.0593]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.450154
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0004, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0006, 0.0011],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0006, 0.0011],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0563, 0.0692],
        [0.0584, 0.0667],
        [0.0685, 0.0569],
        [0.0636, 0.0613],
        [0.0662, 0.0589],
        [0.0608, 0.0641],
        [0.0619, 0.0630],
        [0.0647, 0.0602],
        [0.0622, 0.0626],
        [0.0631, 0.0617],
        [0.0627, 0.0622],
        [0.0606, 0.0643],
        [0.0648, 0.0601],
        [0.0621, 0.0627],
        [0.0659, 0.0591],
        [0.0583, 0.0668]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.429420
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0004, 0.0004],
        [0.0006, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0006, 0.0013],
        [0.0004, 0.0004],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0585, 0.0666],
        [0.0619, 0.0630],
        [0.0659, 0.0591],
        [0.0608, 0.0641],
        [0.0617, 0.0632],
        [0.0611, 0.0638],
        [0.0665, 0.0586],
        [0.0669, 0.0582],
        [0.0623, 0.0625],
        [0.0627, 0.0622],
        [0.0619, 0.0630],
        [0.0614, 0.0634],
        [0.0569, 0.0685],
        [0.0588, 0.0663],
        [0.0682, 0.0571],
        [0.0645, 0.0604]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.362175
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0004, 0.0011],
        [0.0005, 0.0010],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0002],
        [0.0006, 0.0009],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1272, 0.1223],
        [0.1100, 0.1413],
        [0.1173, 0.1326],
        [0.1219, 0.1275],
        [0.1316, 0.1181],
        [0.1409, 0.1104],
        [0.1255, 0.1239],
        [0.1255, 0.1239]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.160731
acc:  0.41
Time taken to execute the en SA task with prompt type modal, variation 3 and batchsize 16: 0:00:05.407163
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([119, 2])
answers_probs just softmax dim 0: tensor([[0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084]], device='cuda:0')
tensor([[0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084],
        [0.0084, 0.0084]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0004],
        [0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0008, 0.0008],
        [0.0003, 0.0006],
        [0.0008, 0.0026],
        [0.0011, 0.0012],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0007, 0.0013],
        [0.0010, 0.0018]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0658],
        [0.0645, 0.0603],
        [0.0625, 0.0622],
        [0.0686, 0.0567],
        [0.0580, 0.0670],
        [0.0622, 0.0626],
        [0.0617, 0.0631],
        [0.0639, 0.0609],
        [0.0703, 0.0554],
        [0.0620, 0.0627],
        [0.0544, 0.0715],
        [0.0682, 0.0570],
        [0.0627, 0.0620],
        [0.0609, 0.0639],
        [0.0603, 0.0645],
        [0.0604, 0.0644]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.454374
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0006, 0.0008],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0008, 0.0011],
        [0.0008, 0.0011],
        [0.0008, 0.0011],
        [0.0003, 0.0005],
        [0.0010, 0.0013],
        [0.0004, 0.0007],
        [0.0007, 0.0015],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0652],
        [0.0658, 0.0592],
        [0.0600, 0.0650],
        [0.0611, 0.0637],
        [0.0637, 0.0611],
        [0.0598, 0.0651],
        [0.0635, 0.0614],
        [0.0652, 0.0598],
        [0.0652, 0.0598],
        [0.0663, 0.0588],
        [0.0668, 0.0583],
        [0.0610, 0.0639],
        [0.0657, 0.0593],
        [0.0604, 0.0645],
        [0.0600, 0.0650],
        [0.0558, 0.0699]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.363245
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0005, 0.0010],
        [0.0004, 0.0010],
        [0.0008, 0.0012],
        [0.0007, 0.0020],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0010, 0.0012],
        [0.0007, 0.0011],
        [0.0005, 0.0009],
        [0.0005, 0.0011],
        [0.0006, 0.0015],
        [0.0007, 0.0009],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0587],
        [0.0675, 0.0577],
        [0.0600, 0.0649],
        [0.0590, 0.0659],
        [0.0649, 0.0600],
        [0.0569, 0.0685],
        [0.0614, 0.0634],
        [0.0622, 0.0626],
        [0.0574, 0.0679],
        [0.0684, 0.0569],
        [0.0652, 0.0598],
        [0.0626, 0.0622],
        [0.0598, 0.0651],
        [0.0596, 0.0653],
        [0.0668, 0.0583],
        [0.0618, 0.0630]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.488542
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0005, 0.0006],
        [0.0010, 0.0017],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0008, 0.0018],
        [0.0006, 0.0010],
        [0.0005, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0006, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0592, 0.0658],
        [0.0685, 0.0569],
        [0.0640, 0.0609],
        [0.0622, 0.0627],
        [0.0629, 0.0620],
        [0.0616, 0.0633],
        [0.0591, 0.0661],
        [0.0629, 0.0620],
        [0.0617, 0.0632],
        [0.0604, 0.0646],
        [0.0666, 0.0586],
        [0.0634, 0.0615],
        [0.0642, 0.0607],
        [0.0617, 0.0632],
        [0.0616, 0.0633],
        [0.0598, 0.0652]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.369360
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0008, 0.0013],
        [0.0006, 0.0014],
        [0.0008, 0.0013],
        [0.0006, 0.0010],
        [0.0006, 0.0011],
        [0.0011, 0.0013],
        [0.0002, 0.0005],
        [0.0009, 0.0011],
        [0.0007, 0.0009],
        [0.0005, 0.0007],
        [0.0007, 0.0011],
        [0.0005, 0.0011],
        [0.0009, 0.0013],
        [0.0005, 0.0012],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0636, 0.0612],
        [0.0597, 0.0653],
        [0.0627, 0.0621],
        [0.0616, 0.0633],
        [0.0612, 0.0636],
        [0.0681, 0.0572],
        [0.0570, 0.0684],
        [0.0675, 0.0577],
        [0.0660, 0.0590],
        [0.0660, 0.0590],
        [0.0630, 0.0618],
        [0.0600, 0.0650],
        [0.0646, 0.0603],
        [0.0578, 0.0674],
        [0.0617, 0.0632]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.361970
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0006, 0.0007],
        [0.0005, 0.0009],
        [0.0007, 0.0008],
        [0.0005, 0.0007],
        [0.0006, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0011],
        [0.0006, 0.0010],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0007, 0.0010],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0644],
        [0.0667, 0.0584],
        [0.0608, 0.0641],
        [0.0677, 0.0576],
        [0.0633, 0.0616],
        [0.0660, 0.0591],
        [0.0602, 0.0648],
        [0.0594, 0.0656],
        [0.0627, 0.0622],
        [0.0621, 0.0628],
        [0.0592, 0.0658],
        [0.0626, 0.0623],
        [0.0650, 0.0600],
        [0.0609, 0.0640],
        [0.0598, 0.0652],
        [0.0629, 0.0620]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.338771
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0005, 0.0010],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0007, 0.0012],
        [0.0006, 0.0013],
        [0.0004, 0.0007],
        [0.0006, 0.0015],
        [0.0004, 0.0008],
        [0.0010, 0.0020],
        [0.0006, 0.0009],
        [0.0007, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0598],
        [0.0621, 0.0628],
        [0.0692, 0.0564],
        [0.0638, 0.0611],
        [0.0630, 0.0619],
        [0.0620, 0.0629],
        [0.0630, 0.0619],
        [0.0579, 0.0673],
        [0.0634, 0.0615],
        [0.0600, 0.0650],
        [0.0637, 0.0612],
        [0.0579, 0.0673],
        [0.0613, 0.0636],
        [0.0617, 0.0632],
        [0.0656, 0.0594],
        [0.0603, 0.0647]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.335320
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0003, 0.0003],
        [0.0006, 0.0011],
        [0.0007, 0.0009],
        [0.0010, 0.0012],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0008, 0.0012],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0008, 0.0011],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0618],
        [0.0632, 0.0617],
        [0.0728, 0.0535],
        [0.0598, 0.0652],
        [0.0638, 0.0611],
        [0.0655, 0.0595],
        [0.0603, 0.0646],
        [0.0563, 0.0692],
        [0.0623, 0.0625],
        [0.0618, 0.0631],
        [0.0599, 0.0650],
        [0.0645, 0.0604],
        [0.0632, 0.0617],
        [0.0620, 0.0628],
        [0.0596, 0.0654],
        [0.0621, 0.0627]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.445877
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0014],
        [0.0005, 0.0008],
        [0.0008, 0.0012],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0007, 0.0011],
        [0.0005, 0.0008],
        [0.0008, 0.0013],
        [0.0006, 0.0010],
        [0.0004, 0.0010],
        [0.0005, 0.0007],
        [0.0004, 0.0010],
        [0.0006, 0.0009],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0611, 0.0638],
        [0.0557, 0.0700],
        [0.0628, 0.0621],
        [0.0647, 0.0603],
        [0.0637, 0.0612],
        [0.0627, 0.0622],
        [0.0621, 0.0628],
        [0.0630, 0.0619],
        [0.0627, 0.0622],
        [0.0634, 0.0616],
        [0.0637, 0.0612],
        [0.0600, 0.0650],
        [0.0665, 0.0586],
        [0.0600, 0.0650],
        [0.0641, 0.0609],
        [0.0641, 0.0609]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.407429
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0014],
        [0.0008, 0.0010],
        [0.0004, 0.0010],
        [0.0008, 0.0018],
        [0.0006, 0.0013],
        [0.0005, 0.0009],
        [0.0010, 0.0012],
        [0.0005, 0.0007],
        [0.0005, 0.0011],
        [0.0006, 0.0012],
        [0.0011, 0.0018],
        [0.0011, 0.0016],
        [0.0006, 0.0009],
        [0.0007, 0.0012],
        [0.0004, 0.0008],
        [0.0006, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0631],
        [0.0665, 0.0586],
        [0.0584, 0.0667],
        [0.0582, 0.0669],
        [0.0593, 0.0657],
        [0.0628, 0.0621],
        [0.0679, 0.0574],
        [0.0649, 0.0601],
        [0.0598, 0.0652],
        [0.0615, 0.0634],
        [0.0637, 0.0612],
        [0.0643, 0.0607],
        [0.0650, 0.0600],
        [0.0633, 0.0615],
        [0.0597, 0.0653],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.562288
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0009, 0.0014],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0006, 0.0013],
        [0.0011, 0.0015],
        [0.0005, 0.0010],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0006, 0.0014],
        [0.0005, 0.0010],
        [0.0006, 0.0007],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0595],
        [0.0680, 0.0573],
        [0.0644, 0.0605],
        [0.0607, 0.0642],
        [0.0614, 0.0634],
        [0.0588, 0.0662],
        [0.0666, 0.0585],
        [0.0618, 0.0631],
        [0.0625, 0.0623],
        [0.0562, 0.0693],
        [0.0586, 0.0665],
        [0.0596, 0.0654],
        [0.0683, 0.0570],
        [0.0633, 0.0615],
        [0.0636, 0.0613],
        [0.0606, 0.0643]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.323648
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0008, 0.0015],
        [0.0010, 0.0011],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0006, 0.0009],
        [0.0007, 0.0014],
        [0.0009, 0.0011],
        [0.0014, 0.0021],
        [0.0008, 0.0015],
        [0.0006, 0.0010],
        [0.0003, 0.0007],
        [0.0009, 0.0017],
        [0.0005, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0600, 0.0649],
        [0.0688, 0.0566],
        [0.0548, 0.0710],
        [0.0593, 0.0657],
        [0.0629, 0.0619],
        [0.0654, 0.0595],
        [0.0596, 0.0653],
        [0.0667, 0.0584],
        [0.0634, 0.0614],
        [0.0613, 0.0635],
        [0.0616, 0.0632],
        [0.0600, 0.0649],
        [0.0600, 0.0649],
        [0.0681, 0.0571],
        [0.0629, 0.0619]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.423733
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0007, 0.0012],
        [0.0015, 0.0020],
        [0.0011, 0.0015],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0007, 0.0015],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1249, 0.1249],
        [0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1251, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1138, 0.1369],
        [0.1250, 0.1246],
        [0.1347, 0.1157],
        [0.1347, 0.1157],
        [0.1264, 0.1233],
        [0.1233, 0.1264],
        [0.1222, 0.1275],
        [0.1199, 0.1299]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.219484
acc:  0.5
Time taken to execute the en SA task with prompt type modal, variation 4 and batchsize 16: 0:00:05.115314
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([110, 2])
answers_probs just softmax dim 0: tensor([[0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091]], device='cuda:0')
tensor([[0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091],
        [0.0091, 0.0091]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0609, 0.0640],
        [0.0629, 0.0620],
        [0.0573, 0.0680],
        [0.0623, 0.0626],
        [0.0616, 0.0634],
        [0.0617, 0.0633],
        [0.0657, 0.0593],
        [0.0627, 0.0623],
        [0.0620, 0.0629],
        [0.0621, 0.0628],
        [0.0613, 0.0636],
        [0.0623, 0.0626],
        [0.0628, 0.0621],
        [0.0615, 0.0635],
        [0.0648, 0.0602],
        [0.0680, 0.0573]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.566537
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0001, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0008, 0.0016],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0623],
        [0.0640, 0.0609],
        [0.0612, 0.0636],
        [0.0621, 0.0628],
        [0.0594, 0.0656],
        [0.0685, 0.0568],
        [0.0634, 0.0615],
        [0.0583, 0.0668],
        [0.0620, 0.0629],
        [0.0702, 0.0555],
        [0.0563, 0.0692],
        [0.0624, 0.0624],
        [0.0634, 0.0614],
        [0.0596, 0.0654],
        [0.0620, 0.0628],
        [0.0648, 0.0601]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.411618
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0001, 0.0002],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0644, 0.0605],
        [0.0628, 0.0621],
        [0.0593, 0.0658],
        [0.0635, 0.0614],
        [0.0653, 0.0597],
        [0.0599, 0.0651],
        [0.0603, 0.0647],
        [0.0666, 0.0586],
        [0.0622, 0.0627],
        [0.0610, 0.0639],
        [0.0627, 0.0622],
        [0.0584, 0.0668],
        [0.0594, 0.0657],
        [0.0667, 0.0585],
        [0.0622, 0.0626],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.315118
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0615, 0.0634],
        [0.0614, 0.0635],
        [0.0654, 0.0597],
        [0.0625, 0.0624],
        [0.0594, 0.0657],
        [0.0626, 0.0623],
        [0.0615, 0.0634],
        [0.0615, 0.0634],
        [0.0648, 0.0602],
        [0.0601, 0.0650],
        [0.0656, 0.0594],
        [0.0591, 0.0660],
        [0.0611, 0.0639],
        [0.0649, 0.0601],
        [0.0644, 0.0605]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.404797
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0014],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0685, 0.0569],
        [0.0604, 0.0645],
        [0.0614, 0.0634],
        [0.0590, 0.0660],
        [0.0666, 0.0586],
        [0.0608, 0.0641],
        [0.0617, 0.0632],
        [0.0632, 0.0617],
        [0.0560, 0.0696],
        [0.0651, 0.0599],
        [0.0637, 0.0612],
        [0.0611, 0.0638],
        [0.0634, 0.0615],
        [0.0652, 0.0598],
        [0.0624, 0.0625],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.320108
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0007, 0.0010],
        [0.0002, 0.0003],
        [0.0006, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0637],
        [0.0623, 0.0627],
        [0.0587, 0.0665],
        [0.0621, 0.0628],
        [0.0642, 0.0608],
        [0.0654, 0.0596],
        [0.0633, 0.0617],
        [0.0628, 0.0621],
        [0.0613, 0.0637],
        [0.0586, 0.0666],
        [0.0621, 0.0628],
        [0.0651, 0.0600],
        [0.0615, 0.0635],
        [0.0655, 0.0596],
        [0.0620, 0.0629],
        [0.0638, 0.0612]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.444615
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0585, 0.0667],
        [0.0627, 0.0622],
        [0.0614, 0.0636],
        [0.0623, 0.0627],
        [0.0635, 0.0614],
        [0.0616, 0.0633],
        [0.0627, 0.0622],
        [0.0658, 0.0593],
        [0.0628, 0.0621],
        [0.0622, 0.0628],
        [0.0668, 0.0584],
        [0.0613, 0.0637],
        [0.0626, 0.0623],
        [0.0595, 0.0656],
        [0.0625, 0.0624],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.430996
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0002],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0618, 0.0631],
        [0.0642, 0.0607],
        [0.0654, 0.0596],
        [0.0643, 0.0606],
        [0.0631, 0.0617],
        [0.0649, 0.0600],
        [0.0627, 0.0622],
        [0.0613, 0.0635],
        [0.0611, 0.0638],
        [0.0627, 0.0622],
        [0.0598, 0.0651],
        [0.0598, 0.0651],
        [0.0583, 0.0669],
        [0.0710, 0.0549],
        [0.0578, 0.0675]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.410882
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0658],
        [0.0646, 0.0603],
        [0.0670, 0.0582],
        [0.0610, 0.0640],
        [0.0638, 0.0611],
        [0.0656, 0.0594],
        [0.0581, 0.0672],
        [0.0644, 0.0606],
        [0.0629, 0.0620],
        [0.0631, 0.0618],
        [0.0586, 0.0665],
        [0.0642, 0.0608],
        [0.0618, 0.0631],
        [0.0612, 0.0637],
        [0.0646, 0.0603],
        [0.0598, 0.0653]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.336357
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0003],
        [0.0006, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0582, 0.0670],
        [0.0690, 0.0565],
        [0.0605, 0.0644],
        [0.0643, 0.0606],
        [0.0641, 0.0608],
        [0.0615, 0.0634],
        [0.0674, 0.0578],
        [0.0630, 0.0618],
        [0.0629, 0.0620],
        [0.0597, 0.0653],
        [0.0606, 0.0643],
        [0.0638, 0.0610],
        [0.0646, 0.0604],
        [0.0569, 0.0685],
        [0.0618, 0.0631],
        [0.0617, 0.0632]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.425453
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0001, 0.0002],
        [0.0002, 0.0006],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0620],
        [0.0663, 0.0588],
        [0.0571, 0.0682],
        [0.0599, 0.0650],
        [0.0660, 0.0590],
        [0.0596, 0.0653],
        [0.0636, 0.0612],
        [0.0628, 0.0620],
        [0.0612, 0.0637],
        [0.0680, 0.0572],
        [0.0615, 0.0634],
        [0.0631, 0.0617],
        [0.0676, 0.0576],
        [0.0647, 0.0602],
        [0.0562, 0.0693],
        [0.0596, 0.0653]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.365751
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0687, 0.0567],
        [0.0577, 0.0675],
        [0.0635, 0.0613],
        [0.0661, 0.0589],
        [0.0640, 0.0609],
        [0.0654, 0.0596],
        [0.0622, 0.0627],
        [0.0661, 0.0589],
        [0.0583, 0.0668],
        [0.0602, 0.0647],
        [0.0615, 0.0633],
        [0.0649, 0.0601],
        [0.0572, 0.0681],
        [0.0597, 0.0652],
        [0.0610, 0.0639],
        [0.0635, 0.0613]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.335525
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1243, 0.1254],
        [0.1261, 0.1236],
        [0.1304, 0.1196],
        [0.1128, 0.1382],
        [0.1349, 0.1156],
        [0.1215, 0.1282],
        [0.1237, 0.1260],
        [0.1263, 0.1234]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.210979
acc:  0.42
Time taken to execute the en SA task with prompt type modal, variation 5 and batchsize 16: 0:00:04.999779
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([151, 2])
answers_probs just softmax dim 0: tensor([[0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066]], device='cuda:0')
tensor([[0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066],
        [0.0066, 0.0066]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0007, 0.0008],
        [0.0006, 0.0008],
        [0.0004, 0.0005],
        [0.0005, 0.0008],
        [0.0005, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0572, 0.0681],
        [0.0598, 0.0651],
        [0.0638, 0.0611],
        [0.0660, 0.0590],
        [0.0657, 0.0593],
        [0.0598, 0.0651],
        [0.0647, 0.0603],
        [0.0645, 0.0604],
        [0.0622, 0.0626],
        [0.0627, 0.0622],
        [0.0615, 0.0633],
        [0.0660, 0.0590],
        [0.0558, 0.0699],
        [0.0628, 0.0620],
        [0.0617, 0.0631],
        [0.0657, 0.0593]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.419696
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0008],
        [0.0006, 0.0010],
        [0.0006, 0.0008],
        [0.0006, 0.0007],
        [0.0003, 0.0004],
        [0.0004, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0006],
        [0.0006, 0.0007],
        [0.0003, 0.0006],
        [0.0007, 0.0008],
        [0.0006, 0.0006],
        [0.0006, 0.0007],
        [0.0006, 0.0006],
        [0.0004, 0.0006],
        [0.0007, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0596, 0.0654],
        [0.0621, 0.0628],
        [0.0631, 0.0618],
        [0.0609, 0.0640],
        [0.0641, 0.0609],
        [0.0564, 0.0692],
        [0.0620, 0.0629],
        [0.0634, 0.0614],
        [0.0577, 0.0676],
        [0.0639, 0.0610],
        [0.0674, 0.0578],
        [0.0626, 0.0623],
        [0.0652, 0.0598],
        [0.0621, 0.0628],
        [0.0654, 0.0596]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.367334
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0003, 0.0002],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0003],
        [0.0007, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0620],
        [0.0628, 0.0621],
        [0.0697, 0.0559],
        [0.0627, 0.0622],
        [0.0631, 0.0618],
        [0.0619, 0.0630],
        [0.0621, 0.0628],
        [0.0614, 0.0636],
        [0.0628, 0.0621],
        [0.0600, 0.0650],
        [0.0613, 0.0637],
        [0.0614, 0.0636],
        [0.0645, 0.0605],
        [0.0654, 0.0597],
        [0.0588, 0.0663],
        [0.0593, 0.0657]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.496121
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0007, 0.0016],
        [0.0005, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0006, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0006, 0.0007],
        [0.0002, 0.0003],
        [0.0006, 0.0010],
        [0.0007, 0.0009],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0651],
        [0.0558, 0.0698],
        [0.0660, 0.0590],
        [0.0618, 0.0630],
        [0.0682, 0.0571],
        [0.0613, 0.0636],
        [0.0624, 0.0624],
        [0.0671, 0.0581],
        [0.0615, 0.0634],
        [0.0614, 0.0635],
        [0.0614, 0.0635],
        [0.0654, 0.0596],
        [0.0604, 0.0645],
        [0.0593, 0.0657],
        [0.0633, 0.0616],
        [0.0649, 0.0601]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.595527
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0005, 0.0007],
        [0.0008, 0.0011],
        [0.0005, 0.0006],
        [0.0005, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0003],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0656, 0.0594],
        [0.0634, 0.0614],
        [0.0618, 0.0631],
        [0.0637, 0.0612],
        [0.0657, 0.0593],
        [0.0609, 0.0640],
        [0.0581, 0.0671],
        [0.0652, 0.0598],
        [0.0588, 0.0663],
        [0.0588, 0.0663],
        [0.0641, 0.0608],
        [0.0609, 0.0640],
        [0.0599, 0.0651],
        [0.0604, 0.0646],
        [0.0694, 0.0562],
        [0.0634, 0.0614]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.499817
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0004],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0006],
        [0.0006, 0.0006],
        [0.0007, 0.0009],
        [0.0004, 0.0004],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0590],
        [0.0564, 0.0691],
        [0.0667, 0.0584],
        [0.0624, 0.0625],
        [0.0580, 0.0672],
        [0.0623, 0.0626],
        [0.0612, 0.0637],
        [0.0608, 0.0641],
        [0.0588, 0.0663],
        [0.0605, 0.0644],
        [0.0638, 0.0610],
        [0.0631, 0.0618],
        [0.0670, 0.0582],
        [0.0638, 0.0610],
        [0.0656, 0.0594],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.402267
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0006, 0.0010],
        [0.0003, 0.0004],
        [0.0007, 0.0009],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0004],
        [0.0002, 0.0003],
        [0.0005, 0.0004],
        [0.0004, 0.0007],
        [0.0012, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0689, 0.0566],
        [0.0591, 0.0659],
        [0.0596, 0.0653],
        [0.0632, 0.0616],
        [0.0631, 0.0617],
        [0.0588, 0.0663],
        [0.0645, 0.0604],
        [0.0641, 0.0608],
        [0.0595, 0.0654],
        [0.0601, 0.0648],
        [0.0600, 0.0649],
        [0.0642, 0.0607],
        [0.0636, 0.0613],
        [0.0697, 0.0559],
        [0.0571, 0.0682],
        [0.0646, 0.0603]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.362127
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0004],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0008, 0.0010],
        [0.0004, 0.0004],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0595],
        [0.0614, 0.0636],
        [0.0627, 0.0622],
        [0.0646, 0.0603],
        [0.0602, 0.0648],
        [0.0605, 0.0645],
        [0.0624, 0.0625],
        [0.0608, 0.0642],
        [0.0634, 0.0615],
        [0.0623, 0.0626],
        [0.0595, 0.0656],
        [0.0586, 0.0666],
        [0.0640, 0.0609],
        [0.0627, 0.0622],
        [0.0687, 0.0568],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.433821
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0003],
        [0.0006, 0.0008],
        [0.0008, 0.0008],
        [0.0004, 0.0004],
        [0.0003, 0.0003],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0623],
        [0.0626, 0.0623],
        [0.0609, 0.0640],
        [0.0615, 0.0634],
        [0.0638, 0.0612],
        [0.0633, 0.0616],
        [0.0614, 0.0636],
        [0.0622, 0.0627],
        [0.0604, 0.0645],
        [0.0579, 0.0674],
        [0.0667, 0.0585],
        [0.0624, 0.0625],
        [0.0666, 0.0586],
        [0.0662, 0.0589],
        [0.0627, 0.0622],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.453757
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0007, 0.0010],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0006, 0.0007],
        [0.0008, 0.0009],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0623],
        [0.0640, 0.0610],
        [0.0652, 0.0598],
        [0.0622, 0.0628],
        [0.0623, 0.0627],
        [0.0629, 0.0621],
        [0.0591, 0.0660],
        [0.0596, 0.0655],
        [0.0624, 0.0625],
        [0.0654, 0.0596],
        [0.0651, 0.0600],
        [0.0644, 0.0606],
        [0.0629, 0.0621],
        [0.0607, 0.0643],
        [0.0622, 0.0628],
        [0.0592, 0.0659]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.430997
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0005, 0.0011],
        [0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0009, 0.0012],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0006, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0612],
        [0.0573, 0.0680],
        [0.0606, 0.0643],
        [0.0619, 0.0630],
        [0.0637, 0.0612],
        [0.0671, 0.0581],
        [0.0611, 0.0638],
        [0.0637, 0.0612],
        [0.0632, 0.0617],
        [0.0614, 0.0635],
        [0.0658, 0.0592],
        [0.0590, 0.0661],
        [0.0645, 0.0604],
        [0.0615, 0.0634],
        [0.0684, 0.0570],
        [0.0574, 0.0679]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.457187
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0007, 0.0010],
        [0.0005, 0.0007],
        [0.0005, 0.0011],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0006, 0.0008],
        [0.0006, 0.0006],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0618, 0.0631],
        [0.0641, 0.0609],
        [0.0569, 0.0686],
        [0.0639, 0.0610],
        [0.0591, 0.0660],
        [0.0614, 0.0635],
        [0.0636, 0.0613],
        [0.0617, 0.0632],
        [0.0611, 0.0638],
        [0.0631, 0.0618],
        [0.0631, 0.0618],
        [0.0645, 0.0604],
        [0.0640, 0.0609],
        [0.0690, 0.0565],
        [0.0590, 0.0661]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.408978
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0007, 0.0011],
        [0.0003, 0.0003],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0006, 0.0007],
        [0.0008, 0.0009],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1219, 0.1278],
        [0.1321, 0.1180],
        [0.1219, 0.1278],
        [0.1161, 0.1342],
        [0.1161, 0.1342],
        [0.1303, 0.1196],
        [0.1318, 0.1182],
        [0.1298, 0.1201]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.189747
acc:  0.495
Time taken to execute the en SA task with prompt type modal, variation 6 and batchsize 16: 0:00:05.538931
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_6']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([131, 2])
answers_probs just softmax dim 0: tensor([[0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076]], device='cuda:0')
tensor([[0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 7 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0002, 0.0006],
        [0.0005, 0.0009],
        [0.0004, 0.0013],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0014],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0623],
        [0.0598, 0.0652],
        [0.0645, 0.0604],
        [0.0582, 0.0669],
        [0.0609, 0.0640],
        [0.0624, 0.0625],
        [0.0619, 0.0630],
        [0.0611, 0.0638],
        [0.0624, 0.0625],
        [0.0691, 0.0564],
        [0.0587, 0.0664],
        [0.0646, 0.0603],
        [0.0614, 0.0635],
        [0.0665, 0.0586],
        [0.0611, 0.0638],
        [0.0650, 0.0600]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.462990
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0004, 0.0010],
        [0.0001, 0.0004],
        [0.0004, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0010],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0005, 0.0012],
        [0.0006, 0.0018]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0595, 0.0653],
        [0.0573, 0.0679],
        [0.0603, 0.0644],
        [0.0599, 0.0649],
        [0.0621, 0.0626],
        [0.0623, 0.0624],
        [0.0693, 0.0561],
        [0.0611, 0.0636],
        [0.0602, 0.0645],
        [0.0624, 0.0623],
        [0.0667, 0.0583],
        [0.0577, 0.0674],
        [0.0747, 0.0520],
        [0.0660, 0.0589],
        [0.0616, 0.0631],
        [0.0587, 0.0662]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.341265
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0015],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0005, 0.0013],
        [0.0003, 0.0008],
        [0.0007, 0.0013],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0009],
        [0.0005, 0.0016],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0578, 0.0674],
        [0.0633, 0.0615],
        [0.0647, 0.0602],
        [0.0614, 0.0634],
        [0.0631, 0.0617],
        [0.0604, 0.0645],
        [0.0580, 0.0672],
        [0.0641, 0.0608],
        [0.0678, 0.0575],
        [0.0634, 0.0614],
        [0.0643, 0.0606],
        [0.0568, 0.0686],
        [0.0586, 0.0665],
        [0.0650, 0.0599],
        [0.0665, 0.0585],
        [0.0647, 0.0602]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.425389
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0005, 0.0012],
        [0.0005, 0.0011],
        [0.0003, 0.0010],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0005, 0.0017]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0632, 0.0617],
        [0.0649, 0.0601],
        [0.0602, 0.0648],
        [0.0607, 0.0642],
        [0.0631, 0.0618],
        [0.0572, 0.0682],
        [0.0615, 0.0634],
        [0.0640, 0.0609],
        [0.0613, 0.0636],
        [0.0643, 0.0606],
        [0.0681, 0.0572],
        [0.0652, 0.0598],
        [0.0625, 0.0624],
        [0.0611, 0.0638],
        [0.0582, 0.0670]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.566044
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0013],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0006],
        [0.0004, 0.0011],
        [0.0004, 0.0012],
        [0.0006, 0.0015],
        [0.0001, 0.0003],
        [0.0005, 0.0011],
        [0.0004, 0.0011],
        [0.0004, 0.0011],
        [0.0006, 0.0009],
        [0.0004, 0.0012],
        [0.0002, 0.0002],
        [0.0004, 0.0009],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0587, 0.0663],
        [0.0613, 0.0635],
        [0.0651, 0.0598],
        [0.0576, 0.0675],
        [0.0590, 0.0659],
        [0.0583, 0.0668],
        [0.0622, 0.0625],
        [0.0647, 0.0601],
        [0.0630, 0.0618],
        [0.0609, 0.0640],
        [0.0610, 0.0638],
        [0.0687, 0.0566],
        [0.0604, 0.0645],
        [0.0732, 0.0532],
        [0.0643, 0.0606],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.370121
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0008, 0.0013],
        [0.0004, 0.0006],
        [0.0004, 0.0010],
        [0.0004, 0.0012],
        [0.0002, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0011],
        [0.0003, 0.0004],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0624],
        [0.0595, 0.0653],
        [0.0665, 0.0585],
        [0.0685, 0.0568],
        [0.0607, 0.0641],
        [0.0597, 0.0651],
        [0.0588, 0.0661],
        [0.0731, 0.0532],
        [0.0598, 0.0650],
        [0.0658, 0.0591],
        [0.0616, 0.0632],
        [0.0664, 0.0586],
        [0.0613, 0.0635],
        [0.0576, 0.0675],
        [0.0588, 0.0661],
        [0.0594, 0.0654]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.404152
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0008],
        [0.0007, 0.0017],
        [0.0006, 0.0015],
        [0.0005, 0.0014],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0004, 0.0011],
        [0.0004, 0.0014],
        [0.0002, 0.0003],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0011],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0582, 0.0670],
        [0.0628, 0.0622],
        [0.0623, 0.0626],
        [0.0601, 0.0648],
        [0.0600, 0.0650],
        [0.0630, 0.0619],
        [0.0606, 0.0644],
        [0.0616, 0.0633],
        [0.0589, 0.0662],
        [0.0632, 0.0617],
        [0.0669, 0.0583],
        [0.0662, 0.0589],
        [0.0646, 0.0604],
        [0.0648, 0.0602],
        [0.0641, 0.0608],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.315890
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0015],
        [0.0004, 0.0010],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0003],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0006, 0.0013],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0005, 0.0008],
        [0.0005, 0.0016],
        [0.0004, 0.0008],
        [0.0006, 0.0017],
        [0.0004, 0.0007],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0632],
        [0.0599, 0.0650],
        [0.0568, 0.0684],
        [0.0592, 0.0657],
        [0.0733, 0.0531],
        [0.0604, 0.0644],
        [0.0674, 0.0577],
        [0.0629, 0.0619],
        [0.0612, 0.0636],
        [0.0609, 0.0639],
        [0.0658, 0.0591],
        [0.0578, 0.0673],
        [0.0630, 0.0618],
        [0.0586, 0.0664],
        [0.0651, 0.0598],
        [0.0661, 0.0589]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.448569
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0006, 0.0011],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0013],
        [0.0005, 0.0013],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0584],
        [0.0615, 0.0633],
        [0.0582, 0.0669],
        [0.0590, 0.0661],
        [0.0643, 0.0606],
        [0.0624, 0.0625],
        [0.0702, 0.0555],
        [0.0614, 0.0634],
        [0.0672, 0.0580],
        [0.0640, 0.0608],
        [0.0590, 0.0661],
        [0.0581, 0.0671],
        [0.0620, 0.0628],
        [0.0603, 0.0646],
        [0.0617, 0.0631],
        [0.0641, 0.0607]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.427651
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0009, 0.0012],
        [0.0006, 0.0009],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0005, 0.0013],
        [0.0004, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0004],
        [0.0006, 0.0015],
        [0.0008, 0.0017],
        [0.0003, 0.0004],
        [0.0006, 0.0014],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0001, 0.0001]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0682, 0.0570],
        [0.0661, 0.0588],
        [0.0582, 0.0668],
        [0.0582, 0.0668],
        [0.0573, 0.0678],
        [0.0645, 0.0603],
        [0.0594, 0.0654],
        [0.0656, 0.0593],
        [0.0590, 0.0659],
        [0.0606, 0.0641],
        [0.0666, 0.0584],
        [0.0587, 0.0662],
        [0.0597, 0.0651],
        [0.0618, 0.0629],
        [0.0616, 0.0631],
        [0.0745, 0.0522]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.365037
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0011],
        [0.0004, 0.0009],
        [0.0006, 0.0015],
        [0.0005, 0.0013],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0591],
        [0.0588, 0.0663],
        [0.0581, 0.0671],
        [0.0640, 0.0609],
        [0.0605, 0.0644],
        [0.0647, 0.0602],
        [0.0699, 0.0558],
        [0.0642, 0.0608],
        [0.0644, 0.0605],
        [0.0608, 0.0641],
        [0.0603, 0.0646],
        [0.0605, 0.0644],
        [0.0642, 0.0608],
        [0.0618, 0.0630],
        [0.0595, 0.0655],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.404862
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0005, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0012],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0006],
        [0.0003, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0610, 0.0638],
        [0.0726, 0.0536],
        [0.0610, 0.0638],
        [0.0583, 0.0668],
        [0.0605, 0.0643],
        [0.0634, 0.0614],
        [0.0655, 0.0594],
        [0.0583, 0.0668],
        [0.0612, 0.0636],
        [0.0590, 0.0659],
        [0.0679, 0.0573],
        [0.0669, 0.0581],
        [0.0652, 0.0597],
        [0.0618, 0.0630],
        [0.0606, 0.0642],
        [0.0569, 0.0684]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.494561
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0002, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0008, 0.0020],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1333, 0.1167],
        [0.1107, 0.1407],
        [0.1348, 0.1155],
        [0.1257, 0.1238],
        [0.1213, 0.1284],
        [0.1316, 0.1183],
        [0.1203, 0.1294],
        [0.1222, 0.1273]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.193103
acc:  0.495
Time taken to execute the en SA task with prompt type modal, variation 7 and batchsize 16: 0:00:05.242073
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_7']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([112, 2])
answers_probs just softmax dim 0: tensor([[0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089]], device='cuda:0')
tensor([[0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 8 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0004, 0.0012],
        [0.0001, 0.0002],
        [0.0004, 0.0011],
        [0.0008, 0.0019],
        [0.0007, 0.0015],
        [0.0004, 0.0009],
        [0.0004, 0.0011],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0013],
        [0.0007, 0.0019],
        [0.0003, 0.0007],
        [0.0004, 0.0016],
        [0.0005, 0.0015],
        [0.0011, 0.0030]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0674, 0.0578],
        [0.0593, 0.0657],
        [0.0707, 0.0551],
        [0.0618, 0.0630],
        [0.0620, 0.0628],
        [0.0637, 0.0612],
        [0.0615, 0.0634],
        [0.0615, 0.0634],
        [0.0670, 0.0582],
        [0.0626, 0.0622],
        [0.0594, 0.0656],
        [0.0609, 0.0640],
        [0.0634, 0.0615],
        [0.0581, 0.0671],
        [0.0592, 0.0658],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.417588
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0006, 0.0010],
        [0.0006, 0.0012],
        [0.0003, 0.0010],
        [0.0006, 0.0020],
        [0.0002, 0.0005],
        [0.0005, 0.0013],
        [0.0002, 0.0005],
        [0.0005, 0.0017],
        [0.0007, 0.0020],
        [0.0005, 0.0018],
        [0.0005, 0.0007],
        [0.0005, 0.0012],
        [0.0007, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0573, 0.0679],
        [0.0640, 0.0608],
        [0.0599, 0.0649],
        [0.0667, 0.0584],
        [0.0662, 0.0588],
        [0.0590, 0.0660],
        [0.0591, 0.0659],
        [0.0625, 0.0623],
        [0.0614, 0.0634],
        [0.0655, 0.0594],
        [0.0585, 0.0665],
        [0.0608, 0.0641],
        [0.0593, 0.0656],
        [0.0711, 0.0548],
        [0.0616, 0.0632],
        [0.0670, 0.0581]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.406291
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0014],
        [0.0004, 0.0010],
        [0.0007, 0.0012],
        [0.0004, 0.0013],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0005, 0.0014],
        [0.0004, 0.0013],
        [0.0004, 0.0010],
        [0.0003, 0.0009],
        [0.0005, 0.0014],
        [0.0003, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0630, 0.0618],
        [0.0649, 0.0600],
        [0.0609, 0.0640],
        [0.0614, 0.0635],
        [0.0694, 0.0562],
        [0.0604, 0.0645],
        [0.0625, 0.0623],
        [0.0645, 0.0604],
        [0.0639, 0.0610],
        [0.0621, 0.0628],
        [0.0591, 0.0659],
        [0.0637, 0.0612],
        [0.0612, 0.0637],
        [0.0624, 0.0625],
        [0.0567, 0.0688]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.316110
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0011, 0.0028],
        [0.0004, 0.0010],
        [0.0004, 0.0017],
        [0.0003, 0.0012],
        [0.0006, 0.0012],
        [0.0006, 0.0020],
        [0.0011, 0.0027],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0004, 0.0012],
        [0.0010, 0.0019],
        [0.0006, 0.0020],
        [0.0004, 0.0012],
        [0.0006, 0.0013],
        [0.0003, 0.0008],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0628, 0.0620],
        [0.0573, 0.0681],
        [0.0582, 0.0669],
        [0.0662, 0.0589],
        [0.0598, 0.0652],
        [0.0634, 0.0615],
        [0.0673, 0.0580],
        [0.0620, 0.0629],
        [0.0609, 0.0640],
        [0.0666, 0.0586],
        [0.0597, 0.0653],
        [0.0607, 0.0642],
        [0.0655, 0.0595],
        [0.0641, 0.0608],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.452071
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0012],
        [0.0007, 0.0014],
        [0.0006, 0.0029],
        [0.0002, 0.0006],
        [0.0005, 0.0008],
        [0.0007, 0.0020],
        [0.0006, 0.0018],
        [0.0005, 0.0020],
        [0.0005, 0.0011],
        [0.0005, 0.0010],
        [0.0004, 0.0015],
        [0.0006, 0.0019],
        [0.0006, 0.0011],
        [0.0004, 0.0013],
        [0.0002, 0.0008],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0661],
        [0.0664, 0.0586],
        [0.0567, 0.0686],
        [0.0626, 0.0621],
        [0.0696, 0.0559],
        [0.0609, 0.0639],
        [0.0619, 0.0629],
        [0.0587, 0.0663],
        [0.0637, 0.0610],
        [0.0669, 0.0582],
        [0.0579, 0.0672],
        [0.0603, 0.0645],
        [0.0676, 0.0576],
        [0.0606, 0.0642],
        [0.0591, 0.0658],
        [0.0683, 0.0570]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.362960
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0019],
        [0.0004, 0.0018],
        [0.0006, 0.0014],
        [0.0003, 0.0009],
        [0.0003, 0.0011],
        [0.0009, 0.0020],
        [0.0005, 0.0014],
        [0.0006, 0.0021],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0003, 0.0010],
        [0.0008, 0.0017],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0004, 0.0015],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0576, 0.0677],
        [0.0646, 0.0603],
        [0.0603, 0.0647],
        [0.0607, 0.0642],
        [0.0650, 0.0599],
        [0.0624, 0.0625],
        [0.0589, 0.0662],
        [0.0621, 0.0628],
        [0.0649, 0.0600],
        [0.0611, 0.0638],
        [0.0660, 0.0590],
        [0.0672, 0.0580],
        [0.0625, 0.0624],
        [0.0583, 0.0668],
        [0.0646, 0.0603]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.431094
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0012],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0007, 0.0016],
        [0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0008, 0.0016],
        [0.0010, 0.0020],
        [0.0004, 0.0012],
        [0.0006, 0.0014],
        [0.0005, 0.0013],
        [0.0004, 0.0014],
        [0.0007, 0.0018],
        [0.0005, 0.0011],
        [0.0005, 0.0018],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0612],
        [0.0613, 0.0636],
        [0.0612, 0.0637],
        [0.0616, 0.0633],
        [0.0686, 0.0568],
        [0.0685, 0.0569],
        [0.0639, 0.0610],
        [0.0641, 0.0608],
        [0.0606, 0.0643],
        [0.0613, 0.0636],
        [0.0602, 0.0648],
        [0.0576, 0.0676],
        [0.0601, 0.0649],
        [0.0643, 0.0606],
        [0.0581, 0.0671],
        [0.0651, 0.0599]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.364675
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0006, 0.0013],
        [0.0004, 0.0012],
        [0.0006, 0.0020],
        [0.0005, 0.0009],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0006, 0.0018],
        [0.0005, 0.0011],
        [0.0006, 0.0014],
        [0.0004, 0.0009],
        [0.0006, 0.0012],
        [0.0005, 0.0008],
        [0.0006, 0.0015],
        [0.0007, 0.0012],
        [0.0007, 0.0017]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0586, 0.0665],
        [0.0636, 0.0612],
        [0.0603, 0.0646],
        [0.0585, 0.0666],
        [0.0657, 0.0593],
        [0.0583, 0.0669],
        [0.0641, 0.0608],
        [0.0592, 0.0658],
        [0.0630, 0.0619],
        [0.0624, 0.0625],
        [0.0623, 0.0626],
        [0.0648, 0.0601],
        [0.0686, 0.0568],
        [0.0619, 0.0630],
        [0.0670, 0.0581],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.294966
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0016],
        [0.0008, 0.0018],
        [0.0005, 0.0012],
        [0.0006, 0.0021],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0006, 0.0019],
        [0.0002, 0.0005],
        [0.0010, 0.0030],
        [0.0007, 0.0019],
        [0.0004, 0.0020],
        [0.0005, 0.0011],
        [0.0006, 0.0019],
        [0.0008, 0.0015],
        [0.0003, 0.0010],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0650],
        [0.0654, 0.0596],
        [0.0646, 0.0604],
        [0.0594, 0.0656],
        [0.0650, 0.0600],
        [0.0680, 0.0573],
        [0.0608, 0.0641],
        [0.0618, 0.0631],
        [0.0608, 0.0642],
        [0.0622, 0.0626],
        [0.0567, 0.0688],
        [0.0645, 0.0605],
        [0.0607, 0.0642],
        [0.0672, 0.0580],
        [0.0608, 0.0641],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.340492
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0003, 0.0007],
        [0.0005, 0.0020],
        [0.0006, 0.0016],
        [0.0006, 0.0019],
        [0.0004, 0.0011],
        [0.0006, 0.0019],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0012],
        [0.0003, 0.0011],
        [0.0005, 0.0014],
        [0.0005, 0.0008],
        [0.0006, 0.0014],
        [0.0006, 0.0019],
        [0.0003, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0630],
        [0.0648, 0.0601],
        [0.0591, 0.0659],
        [0.0624, 0.0625],
        [0.0606, 0.0643],
        [0.0635, 0.0613],
        [0.0606, 0.0643],
        [0.0679, 0.0574],
        [0.0628, 0.0621],
        [0.0620, 0.0629],
        [0.0600, 0.0650],
        [0.0620, 0.0629],
        [0.0697, 0.0559],
        [0.0650, 0.0599],
        [0.0604, 0.0645],
        [0.0575, 0.0678]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.563872
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0022],
        [0.0006, 0.0015],
        [0.0005, 0.0012],
        [0.0002, 0.0007],
        [0.0005, 0.0018],
        [0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0006, 0.0015],
        [0.0005, 0.0012],
        [0.0005, 0.0016],
        [0.0007, 0.0026],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0004, 0.0012],
        [0.0006, 0.0014],
        [0.0008, 0.0019]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0653],
        [0.0632, 0.0617],
        [0.0652, 0.0599],
        [0.0605, 0.0645],
        [0.0600, 0.0650],
        [0.0615, 0.0635],
        [0.0631, 0.0618],
        [0.0630, 0.0619],
        [0.0633, 0.0616],
        [0.0616, 0.0633],
        [0.0603, 0.0648],
        [0.0633, 0.0616],
        [0.0650, 0.0601],
        [0.0622, 0.0628],
        [0.0635, 0.0614],
        [0.0642, 0.0608]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.406214
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0003, 0.0005],
        [0.0007, 0.0016],
        [0.0010, 0.0016],
        [0.0006, 0.0013],
        [0.0006, 0.0021],
        [0.0004, 0.0010],
        [0.0004, 0.0018],
        [0.0005, 0.0015],
        [0.0007, 0.0017],
        [0.0003, 0.0010],
        [0.0003, 0.0010],
        [0.0005, 0.0012],
        [0.0005, 0.0015],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0608],
        [0.0614, 0.0635],
        [0.0673, 0.0579],
        [0.0634, 0.0615],
        [0.0685, 0.0568],
        [0.0645, 0.0604],
        [0.0582, 0.0670],
        [0.0637, 0.0612],
        [0.0564, 0.0691],
        [0.0615, 0.0634],
        [0.0624, 0.0625],
        [0.0604, 0.0645],
        [0.0582, 0.0670],
        [0.0641, 0.0608],
        [0.0599, 0.0651],
        [0.0661, 0.0589]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.480055
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0014],
        [0.0010, 0.0021],
        [0.0003, 0.0007],
        [0.0001, 0.0003],
        [0.0004, 0.0017],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0006, 0.0013]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1249],
        [0.1250, 0.1249],
        [0.1250, 0.1251],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1173, 0.1329],
        [0.1285, 0.1213],
        [0.1254, 0.1243],
        [0.1316, 0.1184],
        [0.1126, 0.1384],
        [0.1305, 0.1194],
        [0.1283, 0.1215],
        [0.1260, 0.1237]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.190846
acc:  0.51
Time taken to execute the en SA task with prompt type modal, variation 8 and batchsize 16: 0:00:05.048694
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_8']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([115, 2])
answers_probs just softmax dim 0: tensor([[0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087]], device='cuda:0')
tensor([[0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087],
        [0.0087, 0.0087]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA modal 9 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0004, 0.0011],
        [0.0002, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0008],
        [0.0002, 0.0008],
        [0.0002, 0.0004],
        [0.0002, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0006, 0.0017],
        [0.0003, 0.0013],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0614],
        [0.0638, 0.0611],
        [0.0570, 0.0683],
        [0.0627, 0.0622],
        [0.0648, 0.0601],
        [0.0573, 0.0680],
        [0.0594, 0.0655],
        [0.0665, 0.0586],
        [0.0604, 0.0645],
        [0.0665, 0.0586],
        [0.0609, 0.0640],
        [0.0665, 0.0586],
        [0.0658, 0.0592],
        [0.0620, 0.0629],
        [0.0587, 0.0664],
        [0.0642, 0.0607]], device='cuda:0')
 Batch: 0 of modal classification Duration: 0:00:00.418659
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0005, 0.0009],
        [0.0002, 0.0006],
        [0.0007, 0.0017],
        [0.0006, 0.0014],
        [0.0004, 0.0011],
        [0.0003, 0.0009],
        [0.0007, 0.0015],
        [0.0006, 0.0013],
        [0.0004, 0.0012],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0604],
        [0.0655, 0.0596],
        [0.0594, 0.0656],
        [0.0616, 0.0634],
        [0.0626, 0.0623],
        [0.0601, 0.0650],
        [0.0589, 0.0662],
        [0.0642, 0.0608],
        [0.0629, 0.0620],
        [0.0594, 0.0656],
        [0.0622, 0.0627],
        [0.0639, 0.0611],
        [0.0639, 0.0611],
        [0.0662, 0.0590],
        [0.0626, 0.0623],
        [0.0621, 0.0629]], device='cuda:0')
 Batch: 1 of modal classification Duration: 0:00:00.332739
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0007, 0.0011],
        [0.0002, 0.0008],
        [0.0002, 0.0006],
        [0.0005, 0.0015],
        [0.0005, 0.0013],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0010],
        [0.0008, 0.0017],
        [0.0004, 0.0010],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0648],
        [0.0672, 0.0581],
        [0.0576, 0.0677],
        [0.0616, 0.0633],
        [0.0600, 0.0650],
        [0.0620, 0.0629],
        [0.0621, 0.0628],
        [0.0657, 0.0593],
        [0.0634, 0.0615],
        [0.0634, 0.0615],
        [0.0619, 0.0630],
        [0.0637, 0.0612],
        [0.0608, 0.0641],
        [0.0669, 0.0583],
        [0.0604, 0.0645],
        [0.0632, 0.0617]], device='cuda:0')
 Batch: 2 of modal classification Duration: 0:00:00.430726
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0011, 0.0024],
        [0.0003, 0.0008],
        [0.0003, 0.0010],
        [0.0006, 0.0013],
        [0.0004, 0.0011],
        [0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0004, 0.0009],
        [0.0006, 0.0012],
        [0.0002, 0.0004],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0625],
        [0.0628, 0.0621],
        [0.0637, 0.0612],
        [0.0622, 0.0627],
        [0.0632, 0.0617],
        [0.0619, 0.0630],
        [0.0614, 0.0635],
        [0.0568, 0.0686],
        [0.0628, 0.0621],
        [0.0595, 0.0656],
        [0.0674, 0.0579],
        [0.0682, 0.0572],
        [0.0603, 0.0646],
        [0.0637, 0.0612],
        [0.0622, 0.0627],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 3 of modal classification Duration: 0:00:00.567999
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0013],
        [0.0005, 0.0012],
        [0.0003, 0.0006],
        [0.0006, 0.0017],
        [0.0006, 0.0012],
        [0.0003, 0.0011],
        [0.0005, 0.0014],
        [0.0005, 0.0013],
        [0.0004, 0.0011],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0017],
        [0.0003, 0.0005],
        [0.0009, 0.0013],
        [0.0004, 0.0007],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0657],
        [0.0620, 0.0629],
        [0.0638, 0.0611],
        [0.0605, 0.0644],
        [0.0648, 0.0602],
        [0.0578, 0.0674],
        [0.0605, 0.0645],
        [0.0620, 0.0629],
        [0.0617, 0.0632],
        [0.0610, 0.0639],
        [0.0636, 0.0613],
        [0.0584, 0.0667],
        [0.0651, 0.0599],
        [0.0692, 0.0563],
        [0.0655, 0.0595],
        [0.0649, 0.0601]], device='cuda:0')
 Batch: 4 of modal classification Duration: 0:00:00.338169
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0010],
        [0.0004, 0.0016],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0008, 0.0015],
        [0.0009, 0.0018],
        [0.0006, 0.0010],
        [0.0004, 0.0010],
        [0.0008, 0.0018],
        [0.0005, 0.0011],
        [0.0006, 0.0019],
        [0.0010, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0677, 0.0575],
        [0.0555, 0.0701],
        [0.0638, 0.0610],
        [0.0595, 0.0654],
        [0.0622, 0.0626],
        [0.0642, 0.0606],
        [0.0598, 0.0651],
        [0.0606, 0.0643],
        [0.0646, 0.0603],
        [0.0639, 0.0609],
        [0.0662, 0.0588],
        [0.0616, 0.0632],
        [0.0623, 0.0625],
        [0.0617, 0.0631],
        [0.0580, 0.0672],
        [0.0682, 0.0571]], device='cuda:0')
 Batch: 5 of modal classification Duration: 0:00:00.423828
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0011],
        [0.0003, 0.0010],
        [0.0008, 0.0014],
        [0.0007, 0.0011],
        [0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0005, 0.0014],
        [0.0001, 0.0005],
        [0.0003, 0.0012],
        [0.0003, 0.0010],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0622, 0.0626],
        [0.0584, 0.0667],
        [0.0607, 0.0642],
        [0.0682, 0.0571],
        [0.0695, 0.0560],
        [0.0650, 0.0599],
        [0.0636, 0.0612],
        [0.0625, 0.0623],
        [0.0667, 0.0584],
        [0.0667, 0.0584],
        [0.0600, 0.0649],
        [0.0611, 0.0637],
        [0.0589, 0.0661],
        [0.0585, 0.0666],
        [0.0580, 0.0671],
        [0.0600, 0.0649]], device='cuda:0')
 Batch: 6 of modal classification Duration: 0:00:00.361230
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0005, 0.0013],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0008, 0.0015],
        [0.0004, 0.0011],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0006, 0.0010],
        [0.0007, 0.0013],
        [0.0004, 0.0010],
        [0.0010, 0.0018],
        [0.0003, 0.0008],
        [0.0007, 0.0010],
        [0.0007, 0.0014],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0620],
        [0.0611, 0.0638],
        [0.0613, 0.0637],
        [0.0627, 0.0622],
        [0.0640, 0.0609],
        [0.0601, 0.0649],
        [0.0612, 0.0637],
        [0.0580, 0.0672],
        [0.0662, 0.0589],
        [0.0646, 0.0604],
        [0.0599, 0.0651],
        [0.0650, 0.0600],
        [0.0606, 0.0644],
        [0.0687, 0.0567],
        [0.0638, 0.0611],
        [0.0599, 0.0651]], device='cuda:0')
 Batch: 7 of modal classification Duration: 0:00:00.405833
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0020],
        [0.0002, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0010],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0018],
        [0.0007, 0.0027],
        [0.0003, 0.0006],
        [0.0007, 0.0011],
        [0.0002, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0006, 0.0020],
        [0.0005, 0.0010],
        [0.0003, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0631],
        [0.0630, 0.0618],
        [0.0652, 0.0596],
        [0.0629, 0.0619],
        [0.0716, 0.0543],
        [0.0667, 0.0583],
        [0.0592, 0.0657],
        [0.0579, 0.0671],
        [0.0649, 0.0599],
        [0.0684, 0.0568],
        [0.0556, 0.0699],
        [0.0609, 0.0638],
        [0.0595, 0.0653],
        [0.0594, 0.0654],
        [0.0666, 0.0584],
        [0.0567, 0.0686]], device='cuda:0')
 Batch: 8 of modal classification Duration: 0:00:00.453353
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0015],
        [0.0002, 0.0006],
        [0.0004, 0.0011],
        [0.0001, 0.0003],
        [0.0007, 0.0016],
        [0.0004, 0.0014],
        [0.0004, 0.0008],
        [0.0008, 0.0017],
        [0.0004, 0.0006],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0586, 0.0666],
        [0.0647, 0.0602],
        [0.0648, 0.0601],
        [0.0618, 0.0631],
        [0.0611, 0.0638],
        [0.0619, 0.0630],
        [0.0604, 0.0645],
        [0.0612, 0.0637],
        [0.0621, 0.0628],
        [0.0663, 0.0588],
        [0.0625, 0.0624],
        [0.0576, 0.0677],
        [0.0638, 0.0612],
        [0.0638, 0.0612],
        [0.0681, 0.0572],
        [0.0612, 0.0638]], device='cuda:0')
 Batch: 9 of modal classification Duration: 0:00:00.365969
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0005],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0006, 0.0013],
        [0.0003, 0.0006],
        [0.0007, 0.0018],
        [0.0003, 0.0009],
        [0.0007, 0.0016],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0007, 0.0014],
        [0.0005, 0.0009],
        [0.0002, 0.0007],
        [0.0002, 0.0007],
        [0.0002, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0661],
        [0.0661, 0.0589],
        [0.0654, 0.0596],
        [0.0642, 0.0606],
        [0.0650, 0.0599],
        [0.0614, 0.0634],
        [0.0587, 0.0664],
        [0.0622, 0.0626],
        [0.0624, 0.0624],
        [0.0640, 0.0608],
        [0.0645, 0.0604],
        [0.0656, 0.0594],
        [0.0601, 0.0648],
        [0.0598, 0.0651],
        [0.0542, 0.0719],
        [0.0674, 0.0578]], device='cuda:0')
 Batch: 10 of modal classification Duration: 0:00:00.336054
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0002, 0.0008],
        [0.0005, 0.0014],
        [0.0007, 0.0011],
        [0.0010, 0.0018],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0007, 0.0022],
        [0.0007, 0.0018],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0002, 0.0009],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0652],
        [0.0658, 0.0592],
        [0.0642, 0.0608],
        [0.0588, 0.0663],
        [0.0606, 0.0643],
        [0.0690, 0.0565],
        [0.0662, 0.0589],
        [0.0630, 0.0619],
        [0.0613, 0.0636],
        [0.0595, 0.0655],
        [0.0616, 0.0633],
        [0.0612, 0.0636],
        [0.0661, 0.0590],
        [0.0640, 0.0609],
        [0.0583, 0.0668],
        [0.0605, 0.0644]], device='cuda:0')
 Batch: 11 of modal classification Duration: 0:00:00.331967
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249]], device='cuda:0')
tensor([[0.1222, 0.1272],
        [0.1178, 0.1320],
        [0.1278, 0.1217],
        [0.1284, 0.1210],
        [0.1144, 0.1359],
        [0.1224, 0.1270],
        [0.1204, 0.1291],
        [0.1466, 0.1060]], device='cuda:0')
 Batch: 12 of modal classification Duration: 0:00:00.214040
acc:  0.515
Time taken to execute the en SA task with prompt type modal, variation 9 and batchsize 16: 0:00:05.001499
path ['42', 'en', 'bloom-big', 'SA', 'modal', 'prompt_id_9']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

prompt_type common has 7 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([106, 2])
answers_probs just softmax dim 0: tensor([[0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094]], device='cuda:0')
tensor([[0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094],
        [0.0094, 0.0094]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0011],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0643],
        [0.0593, 0.0658],
        [0.0646, 0.0604],
        [0.0673, 0.0580],
        [0.0582, 0.0670],
        [0.0595, 0.0656],
        [0.0628, 0.0621],
        [0.0622, 0.0627],
        [0.0620, 0.0630],
        [0.0621, 0.0628],
        [0.0644, 0.0606],
        [0.0674, 0.0579],
        [0.0630, 0.0619],
        [0.0622, 0.0627],
        [0.0618, 0.0631],
        [0.0629, 0.0620]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.377221
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0006, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0599],
        [0.0660, 0.0591],
        [0.0641, 0.0608],
        [0.0629, 0.0620],
        [0.0615, 0.0634],
        [0.0585, 0.0666],
        [0.0661, 0.0590],
        [0.0639, 0.0610],
        [0.0590, 0.0661],
        [0.0613, 0.0636],
        [0.0649, 0.0601],
        [0.0592, 0.0658],
        [0.0609, 0.0640],
        [0.0631, 0.0618],
        [0.0628, 0.0621],
        [0.0605, 0.0645]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.363132
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0001, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0008],
        [0.0007, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0005],
        [0.0002, 0.0007],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0564, 0.0690],
        [0.0627, 0.0621],
        [0.0660, 0.0590],
        [0.0590, 0.0660],
        [0.0639, 0.0609],
        [0.0645, 0.0604],
        [0.0591, 0.0659],
        [0.0652, 0.0597],
        [0.0632, 0.0616],
        [0.0637, 0.0611],
        [0.0569, 0.0684],
        [0.0682, 0.0571],
        [0.0612, 0.0637],
        [0.0694, 0.0561],
        [0.0591, 0.0659],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.569316
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0001, 0.0003],
        [0.0007, 0.0017],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0015],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0621, 0.0628],
        [0.0611, 0.0638],
        [0.0663, 0.0588],
        [0.0607, 0.0642],
        [0.0618, 0.0631],
        [0.0613, 0.0636],
        [0.0620, 0.0629],
        [0.0634, 0.0616],
        [0.0572, 0.0682],
        [0.0671, 0.0582],
        [0.0619, 0.0630],
        [0.0633, 0.0617],
        [0.0614, 0.0635],
        [0.0637, 0.0612],
        [0.0623, 0.0626],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.450637
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0001, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0010],
        [0.0004, 0.0005],
        [0.0002, 0.0006],
        [0.0006, 0.0013],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0577, 0.0675],
        [0.0643, 0.0606],
        [0.0620, 0.0629],
        [0.0600, 0.0649],
        [0.0647, 0.0602],
        [0.0635, 0.0613],
        [0.0684, 0.0569],
        [0.0600, 0.0649],
        [0.0630, 0.0618],
        [0.0595, 0.0655],
        [0.0714, 0.0546],
        [0.0591, 0.0659],
        [0.0628, 0.0620],
        [0.0606, 0.0643],
        [0.0633, 0.0615],
        [0.0598, 0.0651]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.432365
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0645],
        [0.0645, 0.0604],
        [0.0619, 0.0629],
        [0.0663, 0.0588],
        [0.0598, 0.0652],
        [0.0612, 0.0637],
        [0.0600, 0.0650],
        [0.0623, 0.0625],
        [0.0667, 0.0585],
        [0.0591, 0.0660],
        [0.0642, 0.0607],
        [0.0670, 0.0581],
        [0.0588, 0.0663],
        [0.0609, 0.0640],
        [0.0593, 0.0657],
        [0.0676, 0.0576]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.322210
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0006, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0010],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0012],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0624],
        [0.0683, 0.0570],
        [0.0675, 0.0576],
        [0.0580, 0.0671],
        [0.0660, 0.0589],
        [0.0593, 0.0656],
        [0.0614, 0.0633],
        [0.0548, 0.0710],
        [0.0606, 0.0642],
        [0.0635, 0.0613],
        [0.0627, 0.0621],
        [0.0708, 0.0549],
        [0.0617, 0.0630],
        [0.0638, 0.0610],
        [0.0599, 0.0649],
        [0.0592, 0.0657]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.427238
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0006, 0.0013],
        [0.0004, 0.0013],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0001, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0550, 0.0707],
        [0.0630, 0.0618],
        [0.0585, 0.0665],
        [0.0658, 0.0592],
        [0.0620, 0.0628],
        [0.0661, 0.0589],
        [0.0601, 0.0648],
        [0.0588, 0.0662],
        [0.0609, 0.0639],
        [0.0665, 0.0585],
        [0.0579, 0.0672],
        [0.0659, 0.0591],
        [0.0617, 0.0631],
        [0.0662, 0.0588],
        [0.0648, 0.0600],
        [0.0666, 0.0584]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.259527
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0008, 0.0011],
        [0.0003, 0.0010],
        [0.0004, 0.0008],
        [0.0002, 0.0007],
        [0.0005, 0.0011],
        [0.0002, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0632],
        [0.0608, 0.0640],
        [0.0661, 0.0589],
        [0.0602, 0.0647],
        [0.0628, 0.0620],
        [0.0610, 0.0638],
        [0.0699, 0.0557],
        [0.0572, 0.0681],
        [0.0619, 0.0629],
        [0.0591, 0.0659],
        [0.0615, 0.0633],
        [0.0585, 0.0665],
        [0.0693, 0.0562],
        [0.0645, 0.0604],
        [0.0658, 0.0592],
        [0.0598, 0.0652]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.367351
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0004, 0.0014],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0009],
        [0.0002, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0001, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0605],
        [0.0625, 0.0624],
        [0.0600, 0.0651],
        [0.0596, 0.0654],
        [0.0629, 0.0620],
        [0.0628, 0.0622],
        [0.0676, 0.0577],
        [0.0627, 0.0622],
        [0.0602, 0.0648],
        [0.0600, 0.0650],
        [0.0590, 0.0661],
        [0.0647, 0.0603],
        [0.0647, 0.0603],
        [0.0641, 0.0608],
        [0.0643, 0.0606],
        [0.0606, 0.0644]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.365688
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0002, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0012],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0701, 0.0555],
        [0.0588, 0.0661],
        [0.0616, 0.0631],
        [0.0621, 0.0626],
        [0.0685, 0.0568],
        [0.0651, 0.0597],
        [0.0606, 0.0641],
        [0.0612, 0.0635],
        [0.0632, 0.0615],
        [0.0700, 0.0556],
        [0.0594, 0.0654],
        [0.0644, 0.0604],
        [0.0539, 0.0721],
        [0.0597, 0.0651],
        [0.0593, 0.0655],
        [0.0619, 0.0628]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.407742
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0002],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0614],
        [0.0612, 0.0636],
        [0.0592, 0.0657],
        [0.0651, 0.0598],
        [0.0633, 0.0615],
        [0.0596, 0.0652],
        [0.0765, 0.0509],
        [0.0588, 0.0661],
        [0.0593, 0.0656],
        [0.0612, 0.0636],
        [0.0646, 0.0602],
        [0.0603, 0.0645],
        [0.0633, 0.0615],
        [0.0596, 0.0653],
        [0.0644, 0.0604],
        [0.0603, 0.0645]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.481883
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1281, 0.1219],
        [0.1296, 0.1204],
        [0.1248, 0.1251],
        [0.1259, 0.1240],
        [0.1261, 0.1238],
        [0.1232, 0.1268],
        [0.1232, 0.1267],
        [0.1190, 0.1312]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.193117
acc:  0.565
Time taken to execute the en SA task with prompt type common, variation 0 and batchsize 16: 0:00:05.038261
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([100, 2])
answers_probs just softmax dim 0: tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
tensor([[0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100],
        [0.0100, 0.0100]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[1.5616e-04, 1.9503e-04],
        [3.7313e-04, 9.2363e-04],
        [4.0555e-04, 8.5831e-04],
        [1.9252e-04, 2.7370e-04],
        [2.9111e-04, 6.5088e-04],
        [3.0231e-04, 7.5388e-04],
        [3.4380e-04, 3.7169e-04],
        [4.9496e-04, 9.6941e-04],
        [3.0446e-04, 4.0030e-04],
        [2.0278e-04, 6.3419e-04],
        [6.5184e-04, 1.2083e-03],
        [3.5334e-04, 9.0218e-04],
        [2.6870e-04, 3.9411e-04],
        [9.9957e-05, 1.2434e-04],
        [2.1577e-04, 3.1137e-04],
        [4.0245e-04, 5.4598e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0674, 0.0577],
        [0.0576, 0.0675],
        [0.0595, 0.0653],
        [0.0653, 0.0595],
        [0.0588, 0.0661],
        [0.0575, 0.0676],
        [0.0698, 0.0556],
        [0.0606, 0.0642],
        [0.0665, 0.0584],
        [0.0550, 0.0706],
        [0.0613, 0.0634],
        [0.0572, 0.0679],
        [0.0648, 0.0600],
        [0.0675, 0.0576],
        [0.0650, 0.0598],
        [0.0660, 0.0589]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.411474
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0001, 0.0002],
        [0.0005, 0.0012],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0005, 0.0012],
        [0.0003, 0.0010],
        [0.0001, 0.0001],
        [0.0002, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0610],
        [0.0700, 0.0555],
        [0.0666, 0.0584],
        [0.0610, 0.0637],
        [0.0641, 0.0607],
        [0.0616, 0.0631],
        [0.0602, 0.0645],
        [0.0607, 0.0640],
        [0.0583, 0.0667],
        [0.0620, 0.0627],
        [0.0602, 0.0645],
        [0.0672, 0.0578],
        [0.0598, 0.0650],
        [0.0565, 0.0687],
        [0.0727, 0.0534],
        [0.0553, 0.0702]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.433367
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0003, 0.0003],
        [0.0002, 0.0004],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0007],
        [0.0002, 0.0006],
        [0.0007, 0.0018],
        [0.0003, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0005, 0.0013],
        [0.0003, 0.0010],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0581, 0.0670],
        [0.0710, 0.0549],
        [0.0664, 0.0586],
        [0.0670, 0.0581],
        [0.0614, 0.0634],
        [0.0687, 0.0566],
        [0.0610, 0.0638],
        [0.0589, 0.0661],
        [0.0616, 0.0632],
        [0.0620, 0.0628],
        [0.0574, 0.0678],
        [0.0635, 0.0613],
        [0.0633, 0.0614],
        [0.0617, 0.0631],
        [0.0595, 0.0654],
        [0.0584, 0.0666]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.340274
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0001, 0.0002],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0001, 0.0003],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0001, 0.0001],
        [0.0003, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0012],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0678, 0.0574],
        [0.0622, 0.0626],
        [0.0609, 0.0639],
        [0.0651, 0.0597],
        [0.0628, 0.0620],
        [0.0625, 0.0623],
        [0.0654, 0.0595],
        [0.0630, 0.0617],
        [0.0614, 0.0634],
        [0.0629, 0.0618],
        [0.0577, 0.0675],
        [0.0730, 0.0533],
        [0.0628, 0.0620],
        [0.0586, 0.0664],
        [0.0567, 0.0687],
        [0.0573, 0.0679]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.410708
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0004, 0.0013],
        [0.0004, 0.0010],
        [0.0004, 0.0012],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0005, 0.0010],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0614, 0.0634],
        [0.0581, 0.0671],
        [0.0637, 0.0611],
        [0.0675, 0.0577],
        [0.0582, 0.0669],
        [0.0624, 0.0625],
        [0.0587, 0.0664],
        [0.0669, 0.0582],
        [0.0617, 0.0631],
        [0.0691, 0.0564],
        [0.0631, 0.0618],
        [0.0591, 0.0659],
        [0.0625, 0.0624],
        [0.0610, 0.0639],
        [0.0615, 0.0633]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.546756
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0004, 0.0011],
        [0.0003, 0.0008],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0589],
        [0.0630, 0.0618],
        [0.0597, 0.0653],
        [0.0617, 0.0631],
        [0.0579, 0.0672],
        [0.0707, 0.0551],
        [0.0628, 0.0620],
        [0.0587, 0.0663],
        [0.0646, 0.0603],
        [0.0640, 0.0609],
        [0.0615, 0.0634],
        [0.0617, 0.0631],
        [0.0687, 0.0567],
        [0.0609, 0.0640],
        [0.0598, 0.0652],
        [0.0582, 0.0669]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.486890
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0001, 0.0002],
        [0.0003, 0.0006],
        [0.0006, 0.0015],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0005, 0.0012],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0007, 0.0013],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0642, 0.0606],
        [0.0590, 0.0659],
        [0.0687, 0.0566],
        [0.0607, 0.0641],
        [0.0582, 0.0668],
        [0.0614, 0.0633],
        [0.0581, 0.0669],
        [0.0636, 0.0611],
        [0.0697, 0.0558],
        [0.0603, 0.0645],
        [0.0619, 0.0628],
        [0.0604, 0.0644],
        [0.0604, 0.0644],
        [0.0589, 0.0661],
        [0.0614, 0.0633],
        [0.0731, 0.0532]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.431870
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0001, 0.0002],
        [0.0003, 0.0008],
        [0.0002, 0.0002],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0002, 0.0004],
        [0.0003, 0.0010],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0611, 0.0637],
        [0.0595, 0.0655],
        [0.0603, 0.0646],
        [0.0604, 0.0645],
        [0.0684, 0.0569],
        [0.0616, 0.0631],
        [0.0608, 0.0640],
        [0.0652, 0.0597],
        [0.0583, 0.0667],
        [0.0737, 0.0528],
        [0.0603, 0.0646],
        [0.0601, 0.0648],
        [0.0615, 0.0632],
        [0.0588, 0.0661],
        [0.0648, 0.0601]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.360456
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0002, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0006, 0.0011],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0006, 0.0013],
        [0.0003, 0.0007],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0678, 0.0575],
        [0.0623, 0.0626],
        [0.0623, 0.0626],
        [0.0581, 0.0671],
        [0.0583, 0.0669],
        [0.0622, 0.0627],
        [0.0629, 0.0620],
        [0.0635, 0.0614],
        [0.0590, 0.0661],
        [0.0616, 0.0632],
        [0.0633, 0.0616],
        [0.0639, 0.0610],
        [0.0634, 0.0615],
        [0.0615, 0.0634],
        [0.0614, 0.0635],
        [0.0684, 0.0570]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.447687
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0007, 0.0015],
        [0.0004, 0.0012],
        [0.0001, 0.0002],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0008, 0.0018],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0610],
        [0.0580, 0.0671],
        [0.0614, 0.0634],
        [0.0642, 0.0606],
        [0.0717, 0.0543],
        [0.0619, 0.0629],
        [0.0661, 0.0589],
        [0.0596, 0.0653],
        [0.0576, 0.0675],
        [0.0700, 0.0556],
        [0.0629, 0.0619],
        [0.0603, 0.0646],
        [0.0623, 0.0625],
        [0.0617, 0.0631],
        [0.0606, 0.0643],
        [0.0579, 0.0672]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.334403
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0002],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0013],
        [0.0005, 0.0013],
        [0.0003, 0.0009],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0608],
        [0.0618, 0.0630],
        [0.0643, 0.0606],
        [0.0662, 0.0589],
        [0.0667, 0.0584],
        [0.0590, 0.0660],
        [0.0619, 0.0629],
        [0.0617, 0.0631],
        [0.0651, 0.0598],
        [0.0606, 0.0643],
        [0.0634, 0.0615],
        [0.0672, 0.0580],
        [0.0573, 0.0680],
        [0.0584, 0.0667],
        [0.0575, 0.0677],
        [0.0646, 0.0603]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.367957
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0003, 0.0010],
        [0.0005, 0.0006],
        [0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0003, 0.0004],
        [0.0001, 0.0002],
        [0.0005, 0.0009],
        [0.0002, 0.0002],
        [0.0004, 0.0012],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0564, 0.0690],
        [0.0680, 0.0573],
        [0.0609, 0.0639],
        [0.0612, 0.0636],
        [0.0637, 0.0612],
        [0.0630, 0.0618],
        [0.0671, 0.0580],
        [0.0607, 0.0641],
        [0.0605, 0.0643],
        [0.0656, 0.0594],
        [0.0638, 0.0610],
        [0.0631, 0.0617],
        [0.0675, 0.0577],
        [0.0573, 0.0680],
        [0.0563, 0.0692]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.333166
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0002, 0.0004],
        [0.0002, 0.0008],
        [0.0003, 0.0009],
        [0.0005, 0.0012],
        [0.0005, 0.0010],
        [0.0002, 0.0003],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1251, 0.1243],
        [0.1311, 0.1187],
        [0.1134, 0.1372],
        [0.1185, 0.1313],
        [0.1233, 0.1262],
        [0.1268, 0.1227],
        [0.1420, 0.1096],
        [0.1197, 0.1300]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.154830
acc:  0.485
Time taken to execute the en SA task with prompt type common, variation 1 and batchsize 16: 0:00:05.080699
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([124, 2])
answers_probs just softmax dim 0: tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0006, 0.0011],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0609, 0.0640],
        [0.0609, 0.0640],
        [0.0654, 0.0596],
        [0.0603, 0.0646],
        [0.0641, 0.0608],
        [0.0625, 0.0624],
        [0.0640, 0.0609],
        [0.0625, 0.0624],
        [0.0607, 0.0642],
        [0.0627, 0.0622],
        [0.0602, 0.0647],
        [0.0668, 0.0584],
        [0.0580, 0.0673],
        [0.0648, 0.0602],
        [0.0594, 0.0657],
        [0.0665, 0.0586]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.454717
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0005],
        [0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0001, 0.0004],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0683, 0.0570],
        [0.0642, 0.0606],
        [0.0628, 0.0620],
        [0.0605, 0.0644],
        [0.0687, 0.0567],
        [0.0670, 0.0581],
        [0.0614, 0.0634],
        [0.0660, 0.0590],
        [0.0555, 0.0701],
        [0.0595, 0.0654],
        [0.0578, 0.0673],
        [0.0654, 0.0595],
        [0.0589, 0.0661],
        [0.0630, 0.0617],
        [0.0588, 0.0662],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.427680
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0002, 0.0010],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0686, 0.0567],
        [0.0616, 0.0631],
        [0.0599, 0.0649],
        [0.0613, 0.0634],
        [0.0634, 0.0614],
        [0.0588, 0.0662],
        [0.0652, 0.0597],
        [0.0552, 0.0705],
        [0.0659, 0.0590],
        [0.0591, 0.0658],
        [0.0613, 0.0635],
        [0.0586, 0.0664],
        [0.0709, 0.0549],
        [0.0623, 0.0625],
        [0.0612, 0.0635],
        [0.0666, 0.0584]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.458074
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0005, 0.0013],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0001, 0.0004],
        [0.0001, 0.0002],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0004, 0.0008],
        [0.0003, 0.0010],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0620],
        [0.0604, 0.0646],
        [0.0618, 0.0630],
        [0.0615, 0.0633],
        [0.0612, 0.0636],
        [0.0648, 0.0602],
        [0.0603, 0.0647],
        [0.0641, 0.0608],
        [0.0598, 0.0652],
        [0.0678, 0.0575],
        [0.0693, 0.0562],
        [0.0631, 0.0618],
        [0.0625, 0.0624],
        [0.0633, 0.0616],
        [0.0571, 0.0682],
        [0.0601, 0.0649]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.573215
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0002, 0.0006],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0006, 0.0012],
        [0.0003, 0.0013],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0591],
        [0.0581, 0.0670],
        [0.0637, 0.0612],
        [0.0639, 0.0610],
        [0.0655, 0.0595],
        [0.0605, 0.0644],
        [0.0599, 0.0650],
        [0.0628, 0.0621],
        [0.0655, 0.0595],
        [0.0631, 0.0618],
        [0.0568, 0.0686],
        [0.0592, 0.0658],
        [0.0627, 0.0622],
        [0.0638, 0.0611],
        [0.0674, 0.0578],
        [0.0609, 0.0640]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.338514
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0015],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0001, 0.0004],
        [0.0006, 0.0016],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0595, 0.0655],
        [0.0608, 0.0642],
        [0.0670, 0.0582],
        [0.0612, 0.0638],
        [0.0663, 0.0589],
        [0.0608, 0.0642],
        [0.0640, 0.0610],
        [0.0600, 0.0650],
        [0.0604, 0.0646],
        [0.0604, 0.0646],
        [0.0666, 0.0586],
        [0.0650, 0.0600],
        [0.0624, 0.0625],
        [0.0631, 0.0618],
        [0.0599, 0.0652],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.369381
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0001, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0002, 0.0006],
        [0.0002, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0622, 0.0627],
        [0.0653, 0.0597],
        [0.0619, 0.0630],
        [0.0637, 0.0612],
        [0.0626, 0.0623],
        [0.0602, 0.0647],
        [0.0581, 0.0671],
        [0.0685, 0.0569],
        [0.0646, 0.0603],
        [0.0613, 0.0636],
        [0.0614, 0.0634],
        [0.0600, 0.0650],
        [0.0659, 0.0591],
        [0.0578, 0.0674],
        [0.0601, 0.0648],
        [0.0664, 0.0587]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.414431
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0650],
        [0.0572, 0.0681],
        [0.0699, 0.0557],
        [0.0647, 0.0602],
        [0.0641, 0.0607],
        [0.0659, 0.0591],
        [0.0653, 0.0596],
        [0.0652, 0.0597],
        [0.0651, 0.0598],
        [0.0636, 0.0613],
        [0.0580, 0.0672],
        [0.0603, 0.0646],
        [0.0615, 0.0633],
        [0.0612, 0.0637],
        [0.0577, 0.0675],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.290893
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0002, 0.0008],
        [0.0004, 0.0008],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0584, 0.0666],
        [0.0590, 0.0658],
        [0.0660, 0.0589],
        [0.0634, 0.0613],
        [0.0606, 0.0641],
        [0.0630, 0.0617],
        [0.0633, 0.0614],
        [0.0719, 0.0541],
        [0.0600, 0.0648],
        [0.0538, 0.0722],
        [0.0595, 0.0653],
        [0.0661, 0.0588],
        [0.0649, 0.0599],
        [0.0563, 0.0690],
        [0.0665, 0.0584],
        [0.0673, 0.0578]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.233838
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0001, 0.0004],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0652],
        [0.0612, 0.0636],
        [0.0653, 0.0596],
        [0.0604, 0.0644],
        [0.0622, 0.0625],
        [0.0649, 0.0599],
        [0.0601, 0.0648],
        [0.0603, 0.0646],
        [0.0633, 0.0615],
        [0.0621, 0.0626],
        [0.0572, 0.0680],
        [0.0631, 0.0617],
        [0.0606, 0.0642],
        [0.0763, 0.0510],
        [0.0641, 0.0607],
        [0.0592, 0.0657]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.488844
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0001, 0.0002],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0011],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0007, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0599, 0.0649],
        [0.0596, 0.0652],
        [0.0626, 0.0621],
        [0.0723, 0.0538],
        [0.0584, 0.0666],
        [0.0679, 0.0573],
        [0.0590, 0.0659],
        [0.0576, 0.0675],
        [0.0606, 0.0642],
        [0.0638, 0.0609],
        [0.0628, 0.0619],
        [0.0589, 0.0660],
        [0.0597, 0.0651],
        [0.0711, 0.0547],
        [0.0629, 0.0618],
        [0.0628, 0.0619]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.403019
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0002, 0.0002],
        [0.0002, 0.0009],
        [0.0005, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0020],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0595],
        [0.0756, 0.0514],
        [0.0554, 0.0700],
        [0.0735, 0.0528],
        [0.0628, 0.0618],
        [0.0595, 0.0653],
        [0.0593, 0.0655],
        [0.0614, 0.0632],
        [0.0632, 0.0614],
        [0.0580, 0.0670],
        [0.0612, 0.0634],
        [0.0634, 0.0612],
        [0.0611, 0.0635],
        [0.0605, 0.0642],
        [0.0571, 0.0680],
        [0.0630, 0.0617]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.433552
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0008, 0.0017],
        [0.0002, 0.0003],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0002, 0.0003],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1225, 0.1271],
        [0.1235, 0.1260],
        [0.1389, 0.1120],
        [0.1158, 0.1344],
        [0.1265, 0.1230],
        [0.1174, 0.1326],
        [0.1361, 0.1144],
        [0.1194, 0.1304]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.230833
acc:  0.545
Time taken to execute the en SA task with prompt type common, variation 2 and batchsize 16: 0:00:05.137952
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([155, 2])
answers_probs just softmax dim 0: tensor([[0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065]], device='cuda:0')
tensor([[0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065],
        [0.0065, 0.0065]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0015],
        [0.0006, 0.0010],
        [0.0006, 0.0012],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0010],
        [0.0006, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0009],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0641],
        [0.0627, 0.0622],
        [0.0590, 0.0661],
        [0.0604, 0.0646],
        [0.0609, 0.0640],
        [0.0639, 0.0610],
        [0.0624, 0.0625],
        [0.0626, 0.0623],
        [0.0628, 0.0621],
        [0.0678, 0.0575],
        [0.0662, 0.0589],
        [0.0585, 0.0666],
        [0.0677, 0.0576],
        [0.0606, 0.0644],
        [0.0595, 0.0655],
        [0.0644, 0.0606]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.444690
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0006, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0007, 0.0012],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0005, 0.0009],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0620, 0.0629],
        [0.0686, 0.0569],
        [0.0613, 0.0636],
        [0.0633, 0.0616],
        [0.0623, 0.0626],
        [0.0645, 0.0604],
        [0.0611, 0.0638],
        [0.0590, 0.0661],
        [0.0618, 0.0632],
        [0.0616, 0.0633],
        [0.0642, 0.0608],
        [0.0600, 0.0650],
        [0.0624, 0.0625],
        [0.0598, 0.0652],
        [0.0619, 0.0631],
        [0.0660, 0.0591]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.434008
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0007, 0.0012],
        [0.0007, 0.0020],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0006, 0.0013],
        [0.0006, 0.0012],
        [0.0006, 0.0009],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0006, 0.0009],
        [0.0005, 0.0005],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0607, 0.0642],
        [0.0611, 0.0638],
        [0.0634, 0.0615],
        [0.0568, 0.0686],
        [0.0596, 0.0654],
        [0.0661, 0.0590],
        [0.0597, 0.0653],
        [0.0609, 0.0640],
        [0.0646, 0.0604],
        [0.0630, 0.0618],
        [0.0644, 0.0605],
        [0.0621, 0.0627],
        [0.0593, 0.0658],
        [0.0654, 0.0596],
        [0.0681, 0.0572],
        [0.0648, 0.0601]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.433181
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0006, 0.0013],
        [0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0005, 0.0010],
        [0.0005, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0632],
        [0.0587, 0.0664],
        [0.0635, 0.0614],
        [0.0650, 0.0600],
        [0.0612, 0.0637],
        [0.0684, 0.0571],
        [0.0635, 0.0614],
        [0.0605, 0.0645],
        [0.0612, 0.0637],
        [0.0663, 0.0588],
        [0.0630, 0.0619],
        [0.0608, 0.0642],
        [0.0606, 0.0644],
        [0.0614, 0.0635],
        [0.0605, 0.0645],
        [0.0637, 0.0612]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.507121
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0009, 0.0015],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0006, 0.0009],
        [0.0005, 0.0008],
        [0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0006, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0005, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0716, 0.0544],
        [0.0630, 0.0619],
        [0.0645, 0.0604],
        [0.0607, 0.0642],
        [0.0638, 0.0611],
        [0.0640, 0.0608],
        [0.0666, 0.0585],
        [0.0605, 0.0644],
        [0.0616, 0.0632],
        [0.0577, 0.0675],
        [0.0583, 0.0668],
        [0.0620, 0.0628],
        [0.0613, 0.0636],
        [0.0632, 0.0616],
        [0.0637, 0.0612],
        [0.0575, 0.0678]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.407028
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0003, 0.0004],
        [0.0008, 0.0010],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0006, 0.0009],
        [0.0006, 0.0008],
        [0.0006, 0.0010],
        [0.0006, 0.0007],
        [0.0006, 0.0011],
        [0.0005, 0.0013],
        [0.0004, 0.0008],
        [0.0006, 0.0008],
        [0.0002, 0.0002],
        [0.0007, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0648],
        [0.0645, 0.0604],
        [0.0665, 0.0586],
        [0.0596, 0.0654],
        [0.0620, 0.0629],
        [0.0619, 0.0630],
        [0.0623, 0.0625],
        [0.0652, 0.0597],
        [0.0615, 0.0633],
        [0.0655, 0.0595],
        [0.0598, 0.0652],
        [0.0567, 0.0687],
        [0.0605, 0.0644],
        [0.0652, 0.0597],
        [0.0687, 0.0567],
        [0.0599, 0.0651]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.597884
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0010],
        [0.0005, 0.0007],
        [0.0011, 0.0015],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0007, 0.0012],
        [0.0005, 0.0010],
        [0.0006, 0.0013],
        [0.0005, 0.0008],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0006, 0.0012],
        [0.0003, 0.0005],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0655, 0.0595],
        [0.0663, 0.0588],
        [0.0618, 0.0630],
        [0.0621, 0.0628],
        [0.0623, 0.0626],
        [0.0605, 0.0644],
        [0.0588, 0.0663],
        [0.0614, 0.0635],
        [0.0585, 0.0666],
        [0.0592, 0.0658],
        [0.0638, 0.0611],
        [0.0620, 0.0629],
        [0.0609, 0.0640],
        [0.0633, 0.0615],
        [0.0706, 0.0552]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.428683
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0008, 0.0013],
        [0.0009, 0.0011],
        [0.0004, 0.0005],
        [0.0008, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0009],
        [0.0007, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0615],
        [0.0650, 0.0600],
        [0.0616, 0.0634],
        [0.0623, 0.0627],
        [0.0652, 0.0599],
        [0.0649, 0.0601],
        [0.0662, 0.0590],
        [0.0615, 0.0635],
        [0.0597, 0.0653],
        [0.0609, 0.0641],
        [0.0635, 0.0615],
        [0.0613, 0.0637],
        [0.0632, 0.0617],
        [0.0595, 0.0656],
        [0.0592, 0.0659],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.493202
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0017],
        [0.0003, 0.0004],
        [0.0003, 0.0003],
        [0.0004, 0.0007],
        [0.0008, 0.0015],
        [0.0007, 0.0009],
        [0.0005, 0.0008],
        [0.0006, 0.0010],
        [0.0006, 0.0008],
        [0.0007, 0.0011],
        [0.0004, 0.0004],
        [0.0007, 0.0012],
        [0.0004, 0.0005],
        [0.0006, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0564, 0.0691],
        [0.0662, 0.0589],
        [0.0684, 0.0570],
        [0.0616, 0.0633],
        [0.0597, 0.0653],
        [0.0654, 0.0596],
        [0.0606, 0.0644],
        [0.0619, 0.0630],
        [0.0640, 0.0609],
        [0.0619, 0.0630],
        [0.0659, 0.0591],
        [0.0602, 0.0647],
        [0.0633, 0.0616],
        [0.0638, 0.0611],
        [0.0601, 0.0648],
        [0.0606, 0.0644]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.426965
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0010],
        [0.0005, 0.0014],
        [0.0004, 0.0009],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0561, 0.0695],
        [0.0584, 0.0667],
        [0.0656, 0.0594],
        [0.0636, 0.0612],
        [0.0666, 0.0585],
        [0.0625, 0.0624],
        [0.0608, 0.0641],
        [0.0619, 0.0630],
        [0.0598, 0.0651],
        [0.0639, 0.0610],
        [0.0614, 0.0634],
        [0.0670, 0.0581],
        [0.0598, 0.0651],
        [0.0603, 0.0646],
        [0.0685, 0.0569]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.345950
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0007],
        [0.0002, 0.0003],
        [0.0006, 0.0010],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0005, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0006],
        [0.0003, 0.0003],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0006, 0.0016],
        [0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0007, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0597],
        [0.0632, 0.0616],
        [0.0613, 0.0636],
        [0.0581, 0.0670],
        [0.0586, 0.0665],
        [0.0616, 0.0633],
        [0.0631, 0.0617],
        [0.0657, 0.0593],
        [0.0675, 0.0577],
        [0.0636, 0.0613],
        [0.0588, 0.0662],
        [0.0639, 0.0609],
        [0.0559, 0.0697],
        [0.0647, 0.0603],
        [0.0638, 0.0610],
        [0.0649, 0.0600]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.411014
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0014],
        [0.0003, 0.0009],
        [0.0002, 0.0002],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0003],
        [0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0006, 0.0011],
        [0.0006, 0.0010],
        [0.0006, 0.0010],
        [0.0003, 0.0004],
        [0.0006, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0564, 0.0690],
        [0.0554, 0.0702],
        [0.0676, 0.0576],
        [0.0644, 0.0604],
        [0.0658, 0.0591],
        [0.0588, 0.0662],
        [0.0704, 0.0553],
        [0.0640, 0.0608],
        [0.0632, 0.0616],
        [0.0645, 0.0603],
        [0.0641, 0.0606],
        [0.0611, 0.0636],
        [0.0612, 0.0635],
        [0.0612, 0.0635],
        [0.0658, 0.0591],
        [0.0561, 0.0693]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.455007
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0007, 0.0011],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1273, 0.1227],
        [0.1252, 0.1248],
        [0.1216, 0.1284],
        [0.1229, 0.1271],
        [0.1275, 0.1225],
        [0.1256, 0.1243],
        [0.1264, 0.1236],
        [0.1234, 0.1266]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.157543
acc:  0.575
Time taken to execute the en SA task with prompt type common, variation 3 and batchsize 16: 0:00:05.563046
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([128, 2])
answers_probs just softmax dim 0: tensor([[0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078]], device='cuda:0')
tensor([[0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078],
        [0.0078, 0.0078]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0005, 0.0013],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0006, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0006, 0.0011],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0007, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0646, 0.0603],
        [0.0585, 0.0666],
        [0.0614, 0.0635],
        [0.0626, 0.0622],
        [0.0672, 0.0581],
        [0.0620, 0.0629],
        [0.0642, 0.0608],
        [0.0612, 0.0637],
        [0.0650, 0.0600],
        [0.0630, 0.0619],
        [0.0651, 0.0599],
        [0.0596, 0.0654],
        [0.0613, 0.0636],
        [0.0578, 0.0675],
        [0.0666, 0.0585],
        [0.0597, 0.0653]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.439813
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0008, 0.0012],
        [0.0007, 0.0009],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0005, 0.0006],
        [0.0004, 0.0008],
        [0.0007, 0.0010],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0008, 0.0013],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0649],
        [0.0642, 0.0607],
        [0.0644, 0.0605],
        [0.0653, 0.0597],
        [0.0591, 0.0660],
        [0.0650, 0.0599],
        [0.0671, 0.0581],
        [0.0677, 0.0576],
        [0.0611, 0.0638],
        [0.0649, 0.0601],
        [0.0579, 0.0673],
        [0.0626, 0.0623],
        [0.0587, 0.0664],
        [0.0583, 0.0669],
        [0.0615, 0.0634],
        [0.0625, 0.0624]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.574464
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0003, 0.0003],
        [0.0005, 0.0006],
        [0.0013, 0.0017],
        [0.0005, 0.0007],
        [0.0007, 0.0011],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0007, 0.0013],
        [0.0008, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0586],
        [0.0589, 0.0661],
        [0.0634, 0.0614],
        [0.0649, 0.0600],
        [0.0532, 0.0732],
        [0.0593, 0.0656],
        [0.0638, 0.0611],
        [0.0675, 0.0577],
        [0.0643, 0.0606],
        [0.0639, 0.0609],
        [0.0628, 0.0620],
        [0.0628, 0.0620],
        [0.0641, 0.0607],
        [0.0623, 0.0625],
        [0.0592, 0.0657],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.456154
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0001, 0.0002],
        [0.0003, 0.0005],
        [0.0008, 0.0008],
        [0.0004, 0.0008],
        [0.0011, 0.0019],
        [0.0007, 0.0012],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0009, 0.0013],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0615],
        [0.0612, 0.0637],
        [0.0594, 0.0656],
        [0.0660, 0.0590],
        [0.0618, 0.0630],
        [0.0700, 0.0557],
        [0.0602, 0.0647],
        [0.0621, 0.0628],
        [0.0622, 0.0627],
        [0.0601, 0.0648],
        [0.0644, 0.0605],
        [0.0638, 0.0611],
        [0.0640, 0.0609],
        [0.0638, 0.0611],
        [0.0559, 0.0697],
        [0.0617, 0.0631]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.408162
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0004],
        [0.0006, 0.0011],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0004, 0.0006],
        [0.0004, 0.0004],
        [0.0005, 0.0007],
        [0.0007, 0.0011],
        [0.0004, 0.0006],
        [0.0005, 0.0010],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0596],
        [0.0558, 0.0697],
        [0.0655, 0.0594],
        [0.0600, 0.0649],
        [0.0583, 0.0668],
        [0.0571, 0.0681],
        [0.0581, 0.0670],
        [0.0665, 0.0585],
        [0.0579, 0.0672],
        [0.0669, 0.0582],
        [0.0675, 0.0576],
        [0.0656, 0.0593],
        [0.0644, 0.0604],
        [0.0644, 0.0604],
        [0.0594, 0.0654],
        [0.0676, 0.0575]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.458463
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0006, 0.0009],
        [0.0003, 0.0004],
        [0.0009, 0.0012],
        [0.0002, 0.0004],
        [0.0001, 0.0002],
        [0.0004, 0.0006],
        [0.0008, 0.0013],
        [0.0005, 0.0007],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0612],
        [0.0598, 0.0653],
        [0.0616, 0.0633],
        [0.0584, 0.0668],
        [0.0637, 0.0612],
        [0.0592, 0.0659],
        [0.0600, 0.0650],
        [0.0637, 0.0612],
        [0.0641, 0.0609],
        [0.0653, 0.0597],
        [0.0605, 0.0645],
        [0.0632, 0.0617],
        [0.0622, 0.0627],
        [0.0622, 0.0627],
        [0.0662, 0.0589],
        [0.0663, 0.0588]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.369424
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0003, 0.0004],
        [0.0006, 0.0012],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0012],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0008, 0.0013],
        [0.0002, 0.0003],
        [0.0007, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0610],
        [0.0636, 0.0613],
        [0.0642, 0.0608],
        [0.0595, 0.0656],
        [0.0636, 0.0613],
        [0.0631, 0.0618],
        [0.0599, 0.0651],
        [0.0646, 0.0604],
        [0.0576, 0.0677],
        [0.0627, 0.0623],
        [0.0640, 0.0610],
        [0.0602, 0.0648],
        [0.0609, 0.0641],
        [0.0629, 0.0620],
        [0.0641, 0.0609],
        [0.0651, 0.0600]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.456638
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0003],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0005, 0.0010],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0614],
        [0.0625, 0.0624],
        [0.0616, 0.0633],
        [0.0632, 0.0617],
        [0.0617, 0.0632],
        [0.0606, 0.0644],
        [0.0641, 0.0608],
        [0.0598, 0.0653],
        [0.0627, 0.0622],
        [0.0596, 0.0655],
        [0.0675, 0.0578],
        [0.0601, 0.0649],
        [0.0639, 0.0611],
        [0.0649, 0.0601],
        [0.0609, 0.0641],
        [0.0632, 0.0617]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.426271
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0008, 0.0013],
        [0.0005, 0.0007],
        [0.0005, 0.0012],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0005, 0.0010],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0007, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0700, 0.0557],
        [0.0595, 0.0655],
        [0.0658, 0.0592],
        [0.0619, 0.0630],
        [0.0637, 0.0612],
        [0.0640, 0.0609],
        [0.0568, 0.0686],
        [0.0622, 0.0627],
        [0.0622, 0.0627],
        [0.0621, 0.0628],
        [0.0611, 0.0638],
        [0.0609, 0.0640],
        [0.0614, 0.0635],
        [0.0637, 0.0612],
        [0.0631, 0.0618],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.366201
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0007, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0007, 0.0008],
        [0.0006, 0.0010],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0006, 0.0007],
        [0.0005, 0.0006],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0650, 0.0599],
        [0.0658, 0.0592],
        [0.0633, 0.0615],
        [0.0624, 0.0624],
        [0.0643, 0.0606],
        [0.0620, 0.0628],
        [0.0653, 0.0596],
        [0.0686, 0.0568],
        [0.0613, 0.0635],
        [0.0582, 0.0669],
        [0.0568, 0.0685],
        [0.0594, 0.0656],
        [0.0590, 0.0660],
        [0.0658, 0.0592],
        [0.0654, 0.0595],
        [0.0573, 0.0679]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.259361
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0009],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0653, 0.0597],
        [0.0660, 0.0591],
        [0.0602, 0.0647],
        [0.0598, 0.0652],
        [0.0658, 0.0593],
        [0.0601, 0.0648],
        [0.0649, 0.0601],
        [0.0614, 0.0635],
        [0.0592, 0.0658],
        [0.0567, 0.0687],
        [0.0656, 0.0594],
        [0.0625, 0.0623],
        [0.0648, 0.0602],
        [0.0601, 0.0648],
        [0.0645, 0.0604]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.496954
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0002, 0.0004],
        [0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0006, 0.0010],
        [0.0003, 0.0004],
        [0.0005, 0.0009],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0003, 0.0008],
        [0.0007, 0.0014],
        [0.0004, 0.0009],
        [0.0004, 0.0005],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0592, 0.0658],
        [0.0618, 0.0630],
        [0.0639, 0.0610],
        [0.0642, 0.0607],
        [0.0616, 0.0632],
        [0.0655, 0.0595],
        [0.0610, 0.0638],
        [0.0663, 0.0588],
        [0.0606, 0.0643],
        [0.0689, 0.0565],
        [0.0648, 0.0601],
        [0.0559, 0.0697],
        [0.0600, 0.0650],
        [0.0587, 0.0663],
        [0.0654, 0.0596],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.292217
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0007, 0.0015],
        [0.0006, 0.0011],
        [0.0004, 0.0005],
        [0.0004, 0.0011],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1249],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1415, 0.1098],
        [0.1170, 0.1328],
        [0.1201, 0.1293],
        [0.1322, 0.1176],
        [0.1125, 0.1382],
        [0.1180, 0.1316],
        [0.1241, 0.1252],
        [0.1345, 0.1155]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.218458
acc:  0.395
Time taken to execute the en SA task with prompt type common, variation 4 and batchsize 16: 0:00:05.244997
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([101, 2])
answers_probs just softmax dim 0: tensor([[0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099]], device='cuda:0')
tensor([[0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099],
        [0.0099, 0.0099]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0012],
        [0.0001, 0.0005],
        [0.0005, 0.0014],
        [0.0005, 0.0007],
        [0.0003, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0010],
        [0.0003, 0.0008],
        [0.0003, 0.0011],
        [0.0001, 0.0003],
        [0.0006, 0.0010],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0617],
        [0.0584, 0.0667],
        [0.0616, 0.0632],
        [0.0695, 0.0561],
        [0.0590, 0.0661],
        [0.0643, 0.0605],
        [0.0660, 0.0590],
        [0.0616, 0.0632],
        [0.0590, 0.0660],
        [0.0621, 0.0627],
        [0.0594, 0.0656],
        [0.0605, 0.0644],
        [0.0685, 0.0569],
        [0.0578, 0.0674],
        [0.0636, 0.0612],
        [0.0658, 0.0592]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.491151
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0002, 0.0007],
        [0.0003, 0.0010],
        [0.0005, 0.0010],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0001, 0.0003],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0005, 0.0008],
        [0.0011, 0.0013],
        [0.0005, 0.0011],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0634],
        [0.0595, 0.0655],
        [0.0594, 0.0656],
        [0.0556, 0.0700],
        [0.0582, 0.0669],
        [0.0661, 0.0589],
        [0.0615, 0.0633],
        [0.0637, 0.0611],
        [0.0653, 0.0596],
        [0.0625, 0.0623],
        [0.0636, 0.0612],
        [0.0596, 0.0653],
        [0.0661, 0.0589],
        [0.0718, 0.0542],
        [0.0622, 0.0626],
        [0.0636, 0.0612]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.402295
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0016],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0014],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0007],
        [0.0002, 0.0004],
        [0.0006, 0.0015],
        [0.0003, 0.0013],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0660],
        [0.0606, 0.0643],
        [0.0625, 0.0624],
        [0.0609, 0.0639],
        [0.0680, 0.0573],
        [0.0627, 0.0621],
        [0.0627, 0.0622],
        [0.0637, 0.0612],
        [0.0584, 0.0667],
        [0.0670, 0.0581],
        [0.0639, 0.0610],
        [0.0618, 0.0631],
        [0.0695, 0.0560],
        [0.0623, 0.0625],
        [0.0576, 0.0676],
        [0.0593, 0.0657]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.432253
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0013],
        [0.0003, 0.0008],
        [0.0003, 0.0014],
        [0.0003, 0.0008],
        [0.0005, 0.0007],
        [0.0003, 0.0010],
        [0.0005, 0.0012],
        [0.0004, 0.0012],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0012],
        [0.0006, 0.0015],
        [0.0001, 0.0004],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0623, 0.0625],
        [0.0601, 0.0648],
        [0.0645, 0.0604],
        [0.0564, 0.0691],
        [0.0635, 0.0614],
        [0.0710, 0.0549],
        [0.0596, 0.0653],
        [0.0647, 0.0602],
        [0.0598, 0.0652],
        [0.0657, 0.0593],
        [0.0616, 0.0632],
        [0.0643, 0.0606],
        [0.0637, 0.0612],
        [0.0573, 0.0680],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.408388
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0013],
        [0.0003, 0.0008],
        [0.0005, 0.0011],
        [0.0005, 0.0008],
        [0.0003, 0.0014],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0013],
        [0.0005, 0.0020],
        [0.0002, 0.0006],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0011],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0595, 0.0654],
        [0.0633, 0.0615],
        [0.0670, 0.0581],
        [0.0695, 0.0560],
        [0.0579, 0.0673],
        [0.0634, 0.0614],
        [0.0628, 0.0620],
        [0.0625, 0.0623],
        [0.0626, 0.0623],
        [0.0568, 0.0685],
        [0.0599, 0.0650],
        [0.0604, 0.0644],
        [0.0608, 0.0641],
        [0.0628, 0.0620],
        [0.0609, 0.0639],
        [0.0698, 0.0558]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.294782
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0007, 0.0011],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0003, 0.0010],
        [0.0002, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0006, 0.0016],
        [0.0003, 0.0015],
        [0.0003, 0.0010],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0660],
        [0.0685, 0.0568],
        [0.0639, 0.0608],
        [0.0687, 0.0566],
        [0.0707, 0.0550],
        [0.0580, 0.0670],
        [0.0589, 0.0660],
        [0.0627, 0.0620],
        [0.0557, 0.0698],
        [0.0665, 0.0585],
        [0.0626, 0.0621],
        [0.0609, 0.0638],
        [0.0634, 0.0613],
        [0.0562, 0.0691],
        [0.0606, 0.0641],
        [0.0637, 0.0610]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.361003
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0014],
        [0.0002, 0.0007],
        [0.0006, 0.0013],
        [0.0005, 0.0013],
        [0.0003, 0.0008],
        [0.0003, 0.0010],
        [0.0004, 0.0013],
        [0.0003, 0.0006],
        [0.0007, 0.0019],
        [0.0002, 0.0006],
        [0.0008, 0.0017],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0609],
        [0.0609, 0.0640],
        [0.0575, 0.0678],
        [0.0582, 0.0670],
        [0.0642, 0.0607],
        [0.0643, 0.0606],
        [0.0610, 0.0639],
        [0.0601, 0.0648],
        [0.0605, 0.0644],
        [0.0636, 0.0613],
        [0.0617, 0.0632],
        [0.0591, 0.0659],
        [0.0647, 0.0602],
        [0.0672, 0.0580],
        [0.0676, 0.0577],
        [0.0654, 0.0596]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.450699
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0012],
        [0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0009],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0002, 0.0006],
        [0.0006, 0.0014],
        [0.0004, 0.0012],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0663],
        [0.0638, 0.0611],
        [0.0631, 0.0618],
        [0.0644, 0.0605],
        [0.0606, 0.0643],
        [0.0615, 0.0634],
        [0.0627, 0.0622],
        [0.0618, 0.0630],
        [0.0581, 0.0671],
        [0.0643, 0.0606],
        [0.0650, 0.0599],
        [0.0702, 0.0556],
        [0.0603, 0.0647],
        [0.0644, 0.0605],
        [0.0618, 0.0630],
        [0.0592, 0.0659]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.371762
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0008, 0.0012],
        [0.0003, 0.0009],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0003, 0.0012],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0003],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0650],
        [0.0687, 0.0566],
        [0.0580, 0.0670],
        [0.0640, 0.0607],
        [0.0627, 0.0620],
        [0.0570, 0.0682],
        [0.0597, 0.0651],
        [0.0608, 0.0639],
        [0.0645, 0.0603],
        [0.0634, 0.0613],
        [0.0759, 0.0512],
        [0.0639, 0.0608],
        [0.0626, 0.0621],
        [0.0605, 0.0642],
        [0.0628, 0.0619],
        [0.0556, 0.0698]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.410537
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0007],
        [0.0003, 0.0011],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0010],
        [0.0006, 0.0015],
        [0.0005, 0.0007],
        [0.0003, 0.0012],
        [0.0005, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0008],
        [0.0005, 0.0013],
        [0.0003, 0.0008],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0590, 0.0660],
        [0.0587, 0.0663],
        [0.0628, 0.0620],
        [0.0649, 0.0600],
        [0.0609, 0.0639],
        [0.0599, 0.0650],
        [0.0645, 0.0604],
        [0.0616, 0.0632],
        [0.0710, 0.0548],
        [0.0581, 0.0670],
        [0.0715, 0.0544],
        [0.0634, 0.0614],
        [0.0617, 0.0631],
        [0.0607, 0.0642],
        [0.0609, 0.0639],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.547674
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0004, 0.0014],
        [0.0002, 0.0006],
        [0.0003, 0.0011],
        [0.0003, 0.0009],
        [0.0006, 0.0016],
        [0.0002, 0.0005],
        [0.0003, 0.0010],
        [0.0005, 0.0012],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0001, 0.0005],
        [0.0001, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0604, 0.0646],
        [0.0631, 0.0619],
        [0.0617, 0.0633],
        [0.0622, 0.0627],
        [0.0636, 0.0614],
        [0.0629, 0.0621],
        [0.0613, 0.0637],
        [0.0637, 0.0613],
        [0.0660, 0.0591],
        [0.0631, 0.0619],
        [0.0600, 0.0650],
        [0.0646, 0.0604],
        [0.0641, 0.0609],
        [0.0600, 0.0650],
        [0.0593, 0.0658]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.337518
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0008],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0008],
        [0.0003, 0.0011],
        [0.0002, 0.0007],
        [0.0002, 0.0006],
        [0.0001, 0.0004],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0653],
        [0.0607, 0.0642],
        [0.0643, 0.0606],
        [0.0624, 0.0624],
        [0.0601, 0.0648],
        [0.0694, 0.0562],
        [0.0643, 0.0606],
        [0.0612, 0.0637],
        [0.0581, 0.0670],
        [0.0624, 0.0624],
        [0.0614, 0.0635],
        [0.0612, 0.0637],
        [0.0635, 0.0614],
        [0.0683, 0.0571],
        [0.0631, 0.0618],
        [0.0596, 0.0654]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.367524
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0010],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0008],
        [0.0002, 0.0009]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1341, 0.1161],
        [0.1218, 0.1279],
        [0.1316, 0.1183],
        [0.1296, 0.1201],
        [0.1197, 0.1301],
        [0.1323, 0.1177],
        [0.1138, 0.1368],
        [0.1172, 0.1329]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.215219
acc:  0.53
Time taken to execute the en SA task with prompt type common, variation 5 and batchsize 16: 0:00:05.112579
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([109, 2])
answers_probs just softmax dim 0: tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
tensor([[0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092],
        [0.0092, 0.0092]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA common 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0009, 0.0015],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0585],
        [0.0678, 0.0575],
        [0.0639, 0.0611],
        [0.0588, 0.0663],
        [0.0620, 0.0629],
        [0.0584, 0.0668],
        [0.0624, 0.0624],
        [0.0619, 0.0630],
        [0.0601, 0.0649],
        [0.0621, 0.0627],
        [0.0612, 0.0637],
        [0.0635, 0.0614],
        [0.0668, 0.0584],
        [0.0610, 0.0639],
        [0.0598, 0.0652],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 0 of common classification Duration: 0:00:00.414046
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0002, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0001, 0.0002],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0634],
        [0.0626, 0.0623],
        [0.0666, 0.0586],
        [0.0640, 0.0609],
        [0.0576, 0.0677],
        [0.0645, 0.0605],
        [0.0628, 0.0621],
        [0.0616, 0.0633],
        [0.0667, 0.0585],
        [0.0648, 0.0602],
        [0.0620, 0.0629],
        [0.0618, 0.0631],
        [0.0581, 0.0671],
        [0.0604, 0.0646],
        [0.0633, 0.0616],
        [0.0617, 0.0632]], device='cuda:0')
 Batch: 1 of common classification Duration: 0:00:00.409235
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0006, 0.0011],
        [0.0003, 0.0007],
        [0.0001, 0.0002],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0001, 0.0003],
        [0.0003, 0.0011],
        [0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0001, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0632],
        [0.0617, 0.0631],
        [0.0647, 0.0601],
        [0.0605, 0.0643],
        [0.0623, 0.0625],
        [0.0641, 0.0607],
        [0.0591, 0.0658],
        [0.0608, 0.0640],
        [0.0561, 0.0694],
        [0.0636, 0.0612],
        [0.0580, 0.0671],
        [0.0655, 0.0594],
        [0.0600, 0.0649],
        [0.0611, 0.0636],
        [0.0675, 0.0576],
        [0.0733, 0.0531]], device='cuda:0')
 Batch: 2 of common classification Duration: 0:00:00.365716
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0001, 0.0004],
        [0.0001, 0.0002],
        [0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0001, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0611],
        [0.0593, 0.0658],
        [0.0652, 0.0598],
        [0.0596, 0.0654],
        [0.0612, 0.0637],
        [0.0631, 0.0618],
        [0.0630, 0.0619],
        [0.0610, 0.0639],
        [0.0630, 0.0619],
        [0.0653, 0.0597],
        [0.0577, 0.0676],
        [0.0652, 0.0598],
        [0.0629, 0.0620],
        [0.0612, 0.0637],
        [0.0663, 0.0589],
        [0.0622, 0.0628]], device='cuda:0')
 Batch: 3 of common classification Duration: 0:00:00.481186
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0006, 0.0013],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0634, 0.0616],
        [0.0608, 0.0642],
        [0.0597, 0.0654],
        [0.0635, 0.0615],
        [0.0621, 0.0629],
        [0.0595, 0.0656],
        [0.0616, 0.0634],
        [0.0645, 0.0606],
        [0.0628, 0.0621],
        [0.0632, 0.0618],
        [0.0648, 0.0602],
        [0.0628, 0.0621],
        [0.0626, 0.0623],
        [0.0628, 0.0621],
        [0.0618, 0.0632]], device='cuda:0')
 Batch: 4 of common classification Duration: 0:00:00.453779
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0001, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0015],
        [0.0003, 0.0006],
        [0.0005, 0.0011],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0597],
        [0.0628, 0.0621],
        [0.0612, 0.0637],
        [0.0639, 0.0610],
        [0.0679, 0.0574],
        [0.0608, 0.0641],
        [0.0640, 0.0609],
        [0.0565, 0.0691],
        [0.0632, 0.0617],
        [0.0605, 0.0644],
        [0.0629, 0.0620],
        [0.0617, 0.0632],
        [0.0620, 0.0629],
        [0.0596, 0.0655],
        [0.0624, 0.0625],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 5 of common classification Duration: 0:00:00.433428
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[3.6097e-04, 1.0118e-03],
        [3.3069e-04, 1.1272e-03],
        [2.7823e-04, 3.6311e-04],
        [5.2691e-04, 8.4829e-04],
        [3.4499e-04, 7.3576e-04],
        [1.4138e-04, 3.2878e-04],
        [1.5604e-04, 3.2783e-04],
        [2.0778e-04, 6.7568e-04],
        [2.5296e-04, 6.0225e-04],
        [1.4496e-04, 3.0208e-04],
        [4.8423e-04, 6.6710e-04],
        [8.3864e-05, 1.8096e-04],
        [3.1090e-04, 7.9393e-04],
        [1.7083e-04, 4.3964e-04],
        [2.2852e-04, 4.3368e-04],
        [2.7680e-04, 6.5374e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0592, 0.0658],
        [0.0571, 0.0682],
        [0.0702, 0.0554],
        [0.0668, 0.0583],
        [0.0626, 0.0622],
        [0.0615, 0.0633],
        [0.0628, 0.0620],
        [0.0576, 0.0676],
        [0.0612, 0.0636],
        [0.0630, 0.0618],
        [0.0693, 0.0562],
        [0.0625, 0.0623],
        [0.0603, 0.0646],
        [0.0602, 0.0647],
        [0.0643, 0.0606],
        [0.0613, 0.0635]], device='cuda:0')
 Batch: 6 of common classification Duration: 0:00:00.433814
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0001, 0.0002],
        [0.0001, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0689, 0.0566],
        [0.0629, 0.0620],
        [0.0605, 0.0644],
        [0.0634, 0.0615],
        [0.0580, 0.0672],
        [0.0634, 0.0615],
        [0.0625, 0.0623],
        [0.0621, 0.0627],
        [0.0582, 0.0670],
        [0.0664, 0.0587],
        [0.0617, 0.0632],
        [0.0634, 0.0615],
        [0.0610, 0.0639],
        [0.0591, 0.0660],
        [0.0631, 0.0618],
        [0.0653, 0.0597]], device='cuda:0')
 Batch: 7 of common classification Duration: 0:00:00.568968
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0001, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0615],
        [0.0631, 0.0617],
        [0.0602, 0.0647],
        [0.0567, 0.0687],
        [0.0615, 0.0634],
        [0.0617, 0.0632],
        [0.0639, 0.0609],
        [0.0679, 0.0574],
        [0.0654, 0.0595],
        [0.0613, 0.0636],
        [0.0577, 0.0675],
        [0.0635, 0.0613],
        [0.0666, 0.0585],
        [0.0679, 0.0574],
        [0.0599, 0.0650],
        [0.0594, 0.0656]], device='cuda:0')
 Batch: 8 of common classification Duration: 0:00:00.292160
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0001, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0014],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0002, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0645],
        [0.0631, 0.0618],
        [0.0599, 0.0651],
        [0.0648, 0.0602],
        [0.0662, 0.0589],
        [0.0632, 0.0617],
        [0.0626, 0.0623],
        [0.0623, 0.0626],
        [0.0621, 0.0628],
        [0.0630, 0.0619],
        [0.0582, 0.0670],
        [0.0625, 0.0624],
        [0.0640, 0.0609],
        [0.0623, 0.0626],
        [0.0586, 0.0666],
        [0.0666, 0.0586]], device='cuda:0')
 Batch: 9 of common classification Duration: 0:00:00.365557
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0013],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0001, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0651, 0.0599],
        [0.0597, 0.0653],
        [0.0604, 0.0646],
        [0.0619, 0.0630],
        [0.0649, 0.0601],
        [0.0620, 0.0629],
        [0.0624, 0.0625],
        [0.0638, 0.0611],
        [0.0609, 0.0641],
        [0.0635, 0.0614],
        [0.0633, 0.0616],
        [0.0623, 0.0626],
        [0.0699, 0.0558],
        [0.0624, 0.0625],
        [0.0580, 0.0672]], device='cuda:0')
 Batch: 10 of common classification Duration: 0:00:00.334990
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.3317e-04, 5.2118e-04],
        [1.8191e-04, 4.5371e-04],
        [5.8651e-04, 8.0776e-04],
        [2.6417e-04, 5.5504e-04],
        [8.7798e-05, 2.8682e-04],
        [2.8801e-04, 4.9782e-04],
        [2.0111e-04, 2.7490e-04],
        [2.6345e-04, 5.8460e-04],
        [3.1471e-04, 6.7663e-04],
        [1.6308e-04, 5.4312e-04],
        [1.7703e-04, 3.1805e-04],
        [1.5903e-04, 3.5548e-04],
        [5.5170e-04, 1.3237e-03],
        [1.8609e-04, 4.3249e-04],
        [2.4843e-04, 6.8617e-04],
        [3.3188e-04, 6.3992e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0630],
        [0.0605, 0.0644],
        [0.0692, 0.0563],
        [0.0627, 0.0621],
        [0.0574, 0.0679],
        [0.0655, 0.0595],
        [0.0693, 0.0562],
        [0.0619, 0.0629],
        [0.0624, 0.0625],
        [0.0572, 0.0681],
        [0.0649, 0.0600],
        [0.0618, 0.0630],
        [0.0609, 0.0639],
        [0.0613, 0.0635],
        [0.0592, 0.0658],
        [0.0639, 0.0610]], device='cuda:0')
 Batch: 11 of common classification Duration: 0:00:00.334531
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[1.3554e-04, 3.1281e-04],
        [9.3937e-05, 1.8179e-04],
        [3.1233e-04, 6.4039e-04],
        [2.2054e-04, 4.9305e-04],
        [3.6883e-04, 8.0585e-04],
        [4.3297e-04, 9.4604e-04],
        [1.9121e-04, 5.3644e-04],
        [2.0134e-04, 4.7183e-04]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1242, 0.1258],
        [0.1290, 0.1210],
        [0.1274, 0.1226],
        [0.1250, 0.1249],
        [0.1256, 0.1243],
        [0.1256, 0.1243],
        [0.1194, 0.1308],
        [0.1238, 0.1262]], device='cuda:0')
 Batch: 12 of common classification Duration: 0:00:00.159860
acc:  0.555
Time taken to execute the en SA task with prompt type common, variation 6 and batchsize 16: 0:00:05.068285
path ['42', 'en', 'bloom-big', 'SA', 'common', 'prompt_id_6']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

prompt_type rare_synonyms has 7 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([107, 2])
answers_probs just softmax dim 0: tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0007],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0003],
        [0.0005, 0.0008],
        [0.0007, 0.0007],
        [0.0006, 0.0011],
        [0.0005, 0.0006],
        [0.0013, 0.0013],
        [0.0008, 0.0011],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0003],
        [0.0006, 0.0009],
        [0.0004, 0.0005],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0668, 0.0583],
        [0.0638, 0.0611],
        [0.0612, 0.0637],
        [0.0655, 0.0595],
        [0.0583, 0.0668],
        [0.0654, 0.0596],
        [0.0569, 0.0685],
        [0.0623, 0.0626],
        [0.0657, 0.0594],
        [0.0598, 0.0652],
        [0.0623, 0.0626],
        [0.0604, 0.0645],
        [0.0641, 0.0608],
        [0.0600, 0.0650],
        [0.0630, 0.0618],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.414739
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0009],
        [0.0011, 0.0011],
        [0.0006, 0.0009],
        [0.0009, 0.0009],
        [0.0004, 0.0006],
        [0.0008, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0007],
        [0.0008, 0.0009],
        [0.0004, 0.0004],
        [0.0004, 0.0006],
        [0.0007, 0.0007],
        [0.0009, 0.0011],
        [0.0005, 0.0007],
        [0.0006, 0.0012],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0633, 0.0616],
        [0.0649, 0.0601],
        [0.0607, 0.0643],
        [0.0652, 0.0598],
        [0.0608, 0.0641],
        [0.0693, 0.0562],
        [0.0624, 0.0624],
        [0.0593, 0.0657],
        [0.0627, 0.0622],
        [0.0637, 0.0612],
        [0.0615, 0.0634],
        [0.0641, 0.0608],
        [0.0621, 0.0628],
        [0.0614, 0.0635],
        [0.0559, 0.0698],
        [0.0629, 0.0620]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.408152
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0005],
        [0.0007, 0.0016],
        [0.0006, 0.0010],
        [0.0009, 0.0011],
        [0.0006, 0.0008],
        [0.0008, 0.0009],
        [0.0009, 0.0012],
        [0.0006, 0.0009],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0008, 0.0013],
        [0.0006, 0.0006],
        [0.0006, 0.0006],
        [0.0007, 0.0008],
        [0.0006, 0.0009],
        [0.0009, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0661, 0.0590],
        [0.0548, 0.0711],
        [0.0585, 0.0665],
        [0.0649, 0.0600],
        [0.0615, 0.0633],
        [0.0648, 0.0601],
        [0.0628, 0.0620],
        [0.0602, 0.0647],
        [0.0605, 0.0644],
        [0.0639, 0.0609],
        [0.0596, 0.0653],
        [0.0680, 0.0573],
        [0.0676, 0.0576],
        [0.0645, 0.0603],
        [0.0599, 0.0650],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.494838
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0010, 0.0017],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0005],
        [0.0011, 0.0014],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0007, 0.0014],
        [0.0007, 0.0009],
        [0.0011, 0.0018],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0676, 0.0576],
        [0.0596, 0.0654],
        [0.0608, 0.0641],
        [0.0619, 0.0629],
        [0.0625, 0.0623],
        [0.0600, 0.0650],
        [0.0599, 0.0651],
        [0.0647, 0.0602],
        [0.0712, 0.0547],
        [0.0652, 0.0598],
        [0.0601, 0.0648],
        [0.0603, 0.0646],
        [0.0584, 0.0667],
        [0.0636, 0.0613],
        [0.0602, 0.0647],
        [0.0642, 0.0607]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.447615
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0005, 0.0006],
        [0.0004, 0.0004],
        [0.0008, 0.0011],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0003],
        [0.0006, 0.0008],
        [0.0005, 0.0006],
        [0.0009, 0.0008],
        [0.0005, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0008, 0.0010],
        [0.0007, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0588, 0.0663],
        [0.0640, 0.0609],
        [0.0666, 0.0585],
        [0.0611, 0.0638],
        [0.0606, 0.0643],
        [0.0631, 0.0618],
        [0.0648, 0.0601],
        [0.0622, 0.0626],
        [0.0624, 0.0625],
        [0.0677, 0.0576],
        [0.0666, 0.0585],
        [0.0562, 0.0693],
        [0.0621, 0.0627],
        [0.0572, 0.0681],
        [0.0623, 0.0625],
        [0.0643, 0.0606]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.366008
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0009],
        [0.0009, 0.0010],
        [0.0005, 0.0013],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0007],
        [0.0003, 0.0004],
        [0.0010, 0.0010],
        [0.0005, 0.0006],
        [0.0013, 0.0014],
        [0.0007, 0.0011],
        [0.0004, 0.0005],
        [0.0009, 0.0012],
        [0.0007, 0.0010],
        [0.0007, 0.0007],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0614],
        [0.0642, 0.0606],
        [0.0531, 0.0733],
        [0.0619, 0.0629],
        [0.0585, 0.0666],
        [0.0652, 0.0597],
        [0.0636, 0.0612],
        [0.0668, 0.0583],
        [0.0624, 0.0624],
        [0.0662, 0.0589],
        [0.0605, 0.0643],
        [0.0645, 0.0604],
        [0.0625, 0.0623],
        [0.0616, 0.0632],
        [0.0664, 0.0586],
        [0.0591, 0.0659]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.563937
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0006],
        [0.0004, 0.0006],
        [0.0009, 0.0013],
        [0.0006, 0.0008],
        [0.0006, 0.0007],
        [0.0007, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0006, 0.0013],
        [0.0009, 0.0014],
        [0.0003, 0.0004],
        [0.0007, 0.0018],
        [0.0006, 0.0005],
        [0.0006, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0673, 0.0578],
        [0.0607, 0.0641],
        [0.0617, 0.0630],
        [0.0611, 0.0636],
        [0.0656, 0.0593],
        [0.0666, 0.0584],
        [0.0601, 0.0647],
        [0.0603, 0.0645],
        [0.0632, 0.0615],
        [0.0586, 0.0664],
        [0.0575, 0.0677],
        [0.0620, 0.0627],
        [0.0643, 0.0605],
        [0.0540, 0.0720],
        [0.0709, 0.0548],
        [0.0660, 0.0590]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.435828
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0008, 0.0008],
        [0.0008, 0.0011],
        [0.0005, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0007, 0.0011],
        [0.0006, 0.0009],
        [0.0010, 0.0009],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0005],
        [0.0007, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0646],
        [0.0635, 0.0612],
        [0.0657, 0.0592],
        [0.0671, 0.0579],
        [0.0633, 0.0614],
        [0.0656, 0.0593],
        [0.0563, 0.0690],
        [0.0574, 0.0678],
        [0.0613, 0.0635],
        [0.0621, 0.0626],
        [0.0699, 0.0556],
        [0.0650, 0.0598],
        [0.0645, 0.0603],
        [0.0534, 0.0727],
        [0.0665, 0.0585],
        [0.0583, 0.0666]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.452457
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0007, 0.0009],
        [0.0005, 0.0007],
        [0.0008, 0.0009],
        [0.0006, 0.0014],
        [0.0006, 0.0008],
        [0.0007, 0.0012],
        [0.0010, 0.0014],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0007, 0.0010],
        [0.0003, 0.0003],
        [0.0006, 0.0007],
        [0.0009, 0.0011],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0622, 0.0627],
        [0.0633, 0.0616],
        [0.0636, 0.0613],
        [0.0660, 0.0590],
        [0.0552, 0.0706],
        [0.0633, 0.0616],
        [0.0598, 0.0652],
        [0.0627, 0.0622],
        [0.0640, 0.0609],
        [0.0620, 0.0629],
        [0.0594, 0.0657],
        [0.0617, 0.0632],
        [0.0659, 0.0592],
        [0.0639, 0.0610],
        [0.0646, 0.0603],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.427240
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0009, 0.0009],
        [0.0007, 0.0013],
        [0.0006, 0.0009],
        [0.0008, 0.0012],
        [0.0006, 0.0005],
        [0.0005, 0.0008],
        [0.0006, 0.0010],
        [0.0008, 0.0007],
        [0.0009, 0.0011],
        [0.0006, 0.0010],
        [0.0006, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0006, 0.0009],
        [0.0009, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0650],
        [0.0670, 0.0582],
        [0.0582, 0.0669],
        [0.0612, 0.0637],
        [0.0612, 0.0637],
        [0.0679, 0.0574],
        [0.0613, 0.0636],
        [0.0605, 0.0644],
        [0.0688, 0.0566],
        [0.0631, 0.0618],
        [0.0593, 0.0657],
        [0.0607, 0.0642],
        [0.0613, 0.0635],
        [0.0588, 0.0662],
        [0.0623, 0.0625],
        [0.0686, 0.0568]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.365274
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0005],
        [0.0008, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0006],
        [0.0006, 0.0010],
        [0.0007, 0.0009],
        [0.0006, 0.0008],
        [0.0006, 0.0007],
        [0.0006, 0.0009],
        [0.0012, 0.0017],
        [0.0004, 0.0005],
        [0.0003, 0.0003],
        [0.0005, 0.0007],
        [0.0006, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0675, 0.0578],
        [0.0633, 0.0617],
        [0.0594, 0.0657],
        [0.0615, 0.0635],
        [0.0593, 0.0658],
        [0.0624, 0.0625],
        [0.0619, 0.0630],
        [0.0630, 0.0619],
        [0.0604, 0.0646],
        [0.0611, 0.0639],
        [0.0630, 0.0619],
        [0.0640, 0.0610],
        [0.0625, 0.0624],
        [0.0656, 0.0595],
        [0.0628, 0.0622],
        [0.0623, 0.0627]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.321810
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0007, 0.0010],
        [0.0004, 0.0004],
        [0.0007, 0.0009],
        [0.0009, 0.0009],
        [0.0003, 0.0002],
        [0.0006, 0.0009],
        [0.0005, 0.0008],
        [0.0007, 0.0008],
        [0.0008, 0.0010],
        [0.0006, 0.0008],
        [0.0008, 0.0010],
        [0.0005, 0.0006],
        [0.0008, 0.0012],
        [0.0004, 0.0008],
        [0.0008, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0640],
        [0.0613, 0.0636],
        [0.0679, 0.0573],
        [0.0622, 0.0626],
        [0.0657, 0.0593],
        [0.0724, 0.0538],
        [0.0586, 0.0665],
        [0.0584, 0.0667],
        [0.0632, 0.0616],
        [0.0618, 0.0631],
        [0.0627, 0.0621],
        [0.0629, 0.0619],
        [0.0622, 0.0626],
        [0.0595, 0.0655],
        [0.0578, 0.0673],
        [0.0627, 0.0621]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.428786
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0006, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0007, 0.0010],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1166, 0.1337],
        [0.1358, 0.1147],
        [0.1170, 0.1332],
        [0.1289, 0.1209],
        [0.1284, 0.1214],
        [0.1197, 0.1302],
        [0.1282, 0.1216],
        [0.1253, 0.1244]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.191961
acc:  0.49
Time taken to execute the en SA task with prompt type rare_synonyms, variation 0 and batchsize 16: 0:00:05.338113
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([107, 2])
answers_probs just softmax dim 0: tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
tensor([[0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093],
        [0.0093, 0.0093]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0009, 0.0020],
        [0.0005, 0.0013],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0016],
        [0.0008, 0.0018],
        [0.0005, 0.0013],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0009],
        [0.0005, 0.0016],
        [0.0009, 0.0016],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0605, 0.0643],
        [0.0607, 0.0641],
        [0.0663, 0.0588],
        [0.0678, 0.0575],
        [0.0711, 0.0548],
        [0.0583, 0.0668],
        [0.0612, 0.0636],
        [0.0608, 0.0640],
        [0.0630, 0.0618],
        [0.0631, 0.0617],
        [0.0595, 0.0655],
        [0.0572, 0.0681],
        [0.0646, 0.0603],
        [0.0659, 0.0591],
        [0.0595, 0.0655],
        [0.0605, 0.0643]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.443190
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0012],
        [0.0007, 0.0015],
        [0.0004, 0.0008],
        [0.0005, 0.0015],
        [0.0004, 0.0011],
        [0.0002, 0.0004],
        [0.0002, 0.0002],
        [0.0008, 0.0024],
        [0.0006, 0.0011],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0009],
        [0.0004, 0.0009],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0622],
        [0.0638, 0.0610],
        [0.0601, 0.0648],
        [0.0617, 0.0630],
        [0.0629, 0.0619],
        [0.0584, 0.0667],
        [0.0590, 0.0659],
        [0.0653, 0.0596],
        [0.0735, 0.0529],
        [0.0587, 0.0663],
        [0.0651, 0.0597],
        [0.0671, 0.0580],
        [0.0642, 0.0606],
        [0.0584, 0.0666],
        [0.0617, 0.0630],
        [0.0576, 0.0676]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.316858
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0016],
        [0.0004, 0.0012],
        [0.0005, 0.0013],
        [0.0007, 0.0011],
        [0.0006, 0.0016],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0011],
        [0.0005, 0.0011],
        [0.0004, 0.0008],
        [0.0007, 0.0018],
        [0.0006, 0.0014],
        [0.0006, 0.0011],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0594],
        [0.0580, 0.0672],
        [0.0597, 0.0653],
        [0.0605, 0.0644],
        [0.0681, 0.0572],
        [0.0611, 0.0637],
        [0.0617, 0.0631],
        [0.0576, 0.0676],
        [0.0629, 0.0620],
        [0.0602, 0.0647],
        [0.0619, 0.0629],
        [0.0641, 0.0608],
        [0.0606, 0.0643],
        [0.0628, 0.0621],
        [0.0661, 0.0589],
        [0.0692, 0.0563]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.492909
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0017],
        [0.0004, 0.0015],
        [0.0004, 0.0011],
        [0.0005, 0.0020],
        [0.0006, 0.0016],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0011],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0004, 0.0010],
        [0.0005, 0.0009],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0576, 0.0676],
        [0.0604, 0.0645],
        [0.0565, 0.0690],
        [0.0607, 0.0642],
        [0.0682, 0.0571],
        [0.0637, 0.0612],
        [0.0643, 0.0607],
        [0.0637, 0.0612],
        [0.0657, 0.0593],
        [0.0625, 0.0624],
        [0.0636, 0.0613],
        [0.0621, 0.0628],
        [0.0618, 0.0631],
        [0.0659, 0.0592],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.409228
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0013],
        [0.0004, 0.0006],
        [0.0004, 0.0014],
        [0.0005, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0005, 0.0015],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0648, 0.0601],
        [0.0597, 0.0653],
        [0.0674, 0.0579],
        [0.0562, 0.0693],
        [0.0663, 0.0588],
        [0.0609, 0.0640],
        [0.0609, 0.0640],
        [0.0658, 0.0593],
        [0.0630, 0.0619],
        [0.0628, 0.0621],
        [0.0620, 0.0628],
        [0.0603, 0.0646],
        [0.0642, 0.0607],
        [0.0658, 0.0593],
        [0.0585, 0.0666],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.427632
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0014],
        [0.0004, 0.0011],
        [0.0007, 0.0015],
        [0.0004, 0.0013],
        [0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0005, 0.0012],
        [0.0004, 0.0009],
        [0.0006, 0.0014],
        [0.0005, 0.0011],
        [0.0006, 0.0012],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0604, 0.0646],
        [0.0619, 0.0631],
        [0.0584, 0.0668],
        [0.0652, 0.0599],
        [0.0623, 0.0626],
        [0.0631, 0.0619],
        [0.0615, 0.0635],
        [0.0627, 0.0622],
        [0.0603, 0.0647],
        [0.0628, 0.0621],
        [0.0636, 0.0614],
        [0.0644, 0.0606],
        [0.0639, 0.0610],
        [0.0610, 0.0640],
        [0.0655, 0.0595]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.448818
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0006, 0.0023],
        [0.0004, 0.0010],
        [0.0004, 0.0009],
        [0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0007, 0.0016],
        [0.0004, 0.0013],
        [0.0007, 0.0012],
        [0.0004, 0.0008],
        [0.0004, 0.0013],
        [0.0004, 0.0008],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0629],
        [0.0670, 0.0581],
        [0.0556, 0.0700],
        [0.0590, 0.0659],
        [0.0611, 0.0636],
        [0.0633, 0.0614],
        [0.0646, 0.0602],
        [0.0644, 0.0604],
        [0.0651, 0.0598],
        [0.0608, 0.0639],
        [0.0579, 0.0672],
        [0.0657, 0.0592],
        [0.0630, 0.0617],
        [0.0563, 0.0691],
        [0.0618, 0.0629],
        [0.0725, 0.0537]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.365394
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0005, 0.0011],
        [0.0003, 0.0009],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0004, 0.0007],
        [0.0007, 0.0021],
        [0.0005, 0.0007],
        [0.0005, 0.0013],
        [0.0003, 0.0012],
        [0.0011, 0.0029],
        [0.0004, 0.0010],
        [0.0004, 0.0012],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0591],
        [0.0635, 0.0614],
        [0.0610, 0.0639],
        [0.0665, 0.0587],
        [0.0613, 0.0636],
        [0.0645, 0.0604],
        [0.0598, 0.0652],
        [0.0683, 0.0571],
        [0.0618, 0.0631],
        [0.0580, 0.0672],
        [0.0611, 0.0638],
        [0.0612, 0.0637],
        [0.0602, 0.0648],
        [0.0602, 0.0648],
        [0.0638, 0.0612],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.411313
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0007, 0.0013],
        [0.0005, 0.0010],
        [0.0006, 0.0009],
        [0.0005, 0.0015],
        [0.0010, 0.0022],
        [0.0004, 0.0012],
        [0.0007, 0.0015],
        [0.0004, 0.0008],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0629, 0.0620],
        [0.0626, 0.0623],
        [0.0619, 0.0629],
        [0.0630, 0.0619],
        [0.0693, 0.0562],
        [0.0625, 0.0624],
        [0.0626, 0.0623],
        [0.0645, 0.0605],
        [0.0627, 0.0622],
        [0.0681, 0.0572],
        [0.0573, 0.0680],
        [0.0610, 0.0639],
        [0.0588, 0.0663],
        [0.0615, 0.0633],
        [0.0631, 0.0618],
        [0.0582, 0.0669]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.453165
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0009, 0.0019],
        [0.0005, 0.0017],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0006, 0.0014],
        [0.0004, 0.0011],
        [0.0006, 0.0013],
        [0.0004, 0.0012],
        [0.0002, 0.0002],
        [0.0004, 0.0009],
        [0.0008, 0.0011],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0011],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0651],
        [0.0634, 0.0614],
        [0.0562, 0.0692],
        [0.0636, 0.0612],
        [0.0636, 0.0612],
        [0.0622, 0.0625],
        [0.0591, 0.0658],
        [0.0623, 0.0624],
        [0.0587, 0.0663],
        [0.0716, 0.0543],
        [0.0601, 0.0647],
        [0.0684, 0.0569],
        [0.0585, 0.0665],
        [0.0677, 0.0575],
        [0.0629, 0.0619],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.368821
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0014],
        [0.0005, 0.0016],
        [0.0004, 0.0014],
        [0.0003, 0.0008],
        [0.0005, 0.0012],
        [0.0003, 0.0005],
        [0.0010, 0.0022],
        [0.0007, 0.0014],
        [0.0004, 0.0014],
        [0.0003, 0.0008],
        [0.0008, 0.0024],
        [0.0007, 0.0016],
        [0.0004, 0.0013],
        [0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0633],
        [0.0596, 0.0654],
        [0.0580, 0.0671],
        [0.0617, 0.0631],
        [0.0617, 0.0631],
        [0.0675, 0.0577],
        [0.0632, 0.0616],
        [0.0649, 0.0600],
        [0.0586, 0.0664],
        [0.0624, 0.0624],
        [0.0603, 0.0646],
        [0.0631, 0.0617],
        [0.0596, 0.0653],
        [0.0617, 0.0631],
        [0.0627, 0.0621],
        [0.0737, 0.0529]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.405336
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0004, 0.0013],
        [0.0006, 0.0012],
        [0.0006, 0.0012],
        [0.0005, 0.0010],
        [0.0006, 0.0012],
        [0.0004, 0.0012],
        [0.0008, 0.0018],
        [0.0007, 0.0017],
        [0.0003, 0.0007],
        [0.0006, 0.0020],
        [0.0004, 0.0012],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0012],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0609, 0.0641],
        [0.0597, 0.0653],
        [0.0634, 0.0615],
        [0.0642, 0.0608],
        [0.0659, 0.0592],
        [0.0641, 0.0609],
        [0.0600, 0.0650],
        [0.0631, 0.0618],
        [0.0614, 0.0636],
        [0.0617, 0.0632],
        [0.0591, 0.0660],
        [0.0591, 0.0660],
        [0.0673, 0.0579],
        [0.0672, 0.0580],
        [0.0627, 0.0622],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.567033
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0006, 0.0015],
        [0.0004, 0.0008],
        [0.0007, 0.0017],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0005, 0.0012],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1245, 0.1255],
        [0.1277, 0.1223],
        [0.1229, 0.1271],
        [0.1270, 0.1230],
        [0.1281, 0.1219],
        [0.1255, 0.1244],
        [0.1225, 0.1275],
        [0.1218, 0.1283]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.197122
acc:  0.515
Time taken to execute the en SA task with prompt type rare_synonyms, variation 1 and batchsize 16: 0:00:05.328084
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([132, 2])
answers_probs just softmax dim 0: tensor([[0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076]], device='cuda:0')
tensor([[0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076],
        [0.0076, 0.0076]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0003, 0.0013],
        [0.0006, 0.0012],
        [0.0002, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0011],
        [0.0003, 0.0004],
        [0.0002, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0011],
        [0.0004, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0645],
        [0.0623, 0.0624],
        [0.0589, 0.0660],
        [0.0678, 0.0574],
        [0.0575, 0.0676],
        [0.0721, 0.0539],
        [0.0649, 0.0599],
        [0.0603, 0.0644],
        [0.0644, 0.0604],
        [0.0609, 0.0638],
        [0.0600, 0.0648],
        [0.0723, 0.0538],
        [0.0611, 0.0636],
        [0.0603, 0.0644],
        [0.0584, 0.0666],
        [0.0584, 0.0665]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.415662
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0002, 0.0006],
        [0.0002, 0.0009],
        [0.0002, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0009],
        [0.0010, 0.0017],
        [0.0003, 0.0008],
        [0.0003, 0.0008],
        [0.0006, 0.0015],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0002, 0.0009],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0769, 0.0506],
        [0.0590, 0.0659],
        [0.0569, 0.0683],
        [0.0591, 0.0658],
        [0.0638, 0.0610],
        [0.0658, 0.0591],
        [0.0640, 0.0607],
        [0.0582, 0.0668],
        [0.0677, 0.0574],
        [0.0616, 0.0630],
        [0.0625, 0.0622],
        [0.0615, 0.0631],
        [0.0610, 0.0637],
        [0.0640, 0.0607],
        [0.0571, 0.0681],
        [0.0612, 0.0635]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.453004
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0013],
        [0.0002, 0.0002],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0004, 0.0015],
        [0.0005, 0.0011],
        [0.0004, 0.0019],
        [0.0003, 0.0007],
        [0.0003, 0.0013],
        [0.0004, 0.0009],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0584],
        [0.0677, 0.0574],
        [0.0629, 0.0617],
        [0.0633, 0.0613],
        [0.0569, 0.0683],
        [0.0716, 0.0542],
        [0.0655, 0.0593],
        [0.0669, 0.0580],
        [0.0592, 0.0656],
        [0.0561, 0.0693],
        [0.0620, 0.0627],
        [0.0542, 0.0716],
        [0.0620, 0.0626],
        [0.0563, 0.0689],
        [0.0616, 0.0631],
        [0.0674, 0.0576]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.317567
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0018],
        [0.0003, 0.0007],
        [0.0002, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0007],
        [0.0005, 0.0010],
        [0.0005, 0.0015],
        [0.0008, 0.0023],
        [0.0002, 0.0004],
        [0.0002, 0.0010],
        [0.0003, 0.0004],
        [0.0004, 0.0011],
        [0.0006, 0.0012],
        [0.0002, 0.0003],
        [0.0004, 0.0013],
        [0.0003, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0616],
        [0.0619, 0.0628],
        [0.0605, 0.0643],
        [0.0599, 0.0649],
        [0.0690, 0.0564],
        [0.0638, 0.0610],
        [0.0588, 0.0661],
        [0.0603, 0.0645],
        [0.0639, 0.0609],
        [0.0566, 0.0687],
        [0.0720, 0.0541],
        [0.0601, 0.0647],
        [0.0637, 0.0611],
        [0.0693, 0.0561],
        [0.0591, 0.0658],
        [0.0580, 0.0671]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.406219
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0005, 0.0011],
        [0.0006, 0.0018],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0011],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0002, 0.0009],
        [0.0006, 0.0008],
        [0.0002, 0.0007],
        [0.0003, 0.0009],
        [0.0002, 0.0011],
        [0.0005, 0.0010],
        [0.0002, 0.0003],
        [0.0006, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0622],
        [0.0633, 0.0615],
        [0.0597, 0.0652],
        [0.0662, 0.0588],
        [0.0669, 0.0582],
        [0.0592, 0.0657],
        [0.0624, 0.0623],
        [0.0647, 0.0602],
        [0.0570, 0.0683],
        [0.0709, 0.0549],
        [0.0592, 0.0657],
        [0.0594, 0.0655],
        [0.0554, 0.0702],
        [0.0642, 0.0606],
        [0.0656, 0.0593],
        [0.0634, 0.0614]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.361257
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0014],
        [0.0003, 0.0008],
        [0.0002, 0.0006],
        [0.0003, 0.0014],
        [0.0004, 0.0009],
        [0.0004, 0.0009],
        [0.0006, 0.0011],
        [0.0004, 0.0006],
        [0.0003, 0.0015],
        [0.0005, 0.0012],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0010],
        [0.0005, 0.0013],
        [0.0004, 0.0014],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0565, 0.0689],
        [0.0626, 0.0622],
        [0.0601, 0.0648],
        [0.0583, 0.0668],
        [0.0646, 0.0602],
        [0.0661, 0.0588],
        [0.0688, 0.0566],
        [0.0700, 0.0555],
        [0.0555, 0.0701],
        [0.0636, 0.0612],
        [0.0590, 0.0659],
        [0.0631, 0.0617],
        [0.0611, 0.0637],
        [0.0621, 0.0626],
        [0.0611, 0.0637],
        [0.0678, 0.0574]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.364621
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0004, 0.0015],
        [0.0003, 0.0003],
        [0.0007, 0.0010],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0012],
        [0.0005, 0.0014],
        [0.0002, 0.0005],
        [0.0003, 0.0010],
        [0.0005, 0.0011],
        [0.0002, 0.0007],
        [0.0004, 0.0010],
        [0.0004, 0.0010],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0611],
        [0.0601, 0.0646],
        [0.0559, 0.0694],
        [0.0761, 0.0510],
        [0.0682, 0.0570],
        [0.0707, 0.0549],
        [0.0635, 0.0612],
        [0.0577, 0.0673],
        [0.0601, 0.0646],
        [0.0636, 0.0611],
        [0.0589, 0.0659],
        [0.0624, 0.0622],
        [0.0584, 0.0665],
        [0.0594, 0.0653],
        [0.0598, 0.0649],
        [0.0617, 0.0629]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.432383
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0005, 0.0008],
        [0.0002, 0.0011],
        [0.0002, 0.0007],
        [0.0007, 0.0012],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0002, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0004, 0.0015],
        [0.0004, 0.0007],
        [0.0005, 0.0011],
        [0.0005, 0.0008],
        [0.0006, 0.0012],
        [0.0009, 0.0024]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0623, 0.0624],
        [0.0674, 0.0577],
        [0.0541, 0.0719],
        [0.0564, 0.0690],
        [0.0663, 0.0586],
        [0.0587, 0.0662],
        [0.0636, 0.0612],
        [0.0589, 0.0661],
        [0.0663, 0.0586],
        [0.0673, 0.0578],
        [0.0576, 0.0675],
        [0.0666, 0.0584],
        [0.0623, 0.0624],
        [0.0658, 0.0591],
        [0.0661, 0.0588],
        [0.0604, 0.0644]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.407994
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0003, 0.0007],
        [0.0009, 0.0025],
        [0.0002, 0.0003],
        [0.0004, 0.0013],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0006, 0.0017],
        [0.0007, 0.0025],
        [0.0004, 0.0009],
        [0.0003, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0621],
        [0.0632, 0.0617],
        [0.0608, 0.0640],
        [0.0712, 0.0547],
        [0.0592, 0.0658],
        [0.0686, 0.0568],
        [0.0616, 0.0633],
        [0.0661, 0.0589],
        [0.0595, 0.0654],
        [0.0613, 0.0635],
        [0.0618, 0.0631],
        [0.0585, 0.0665],
        [0.0647, 0.0602],
        [0.0608, 0.0640],
        [0.0610, 0.0638],
        [0.0590, 0.0660]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.459390
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0002, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0008],
        [0.0007, 0.0018],
        [0.0004, 0.0012],
        [0.0003, 0.0007],
        [0.0003, 0.0010],
        [0.0003, 0.0011],
        [0.0005, 0.0015],
        [0.0005, 0.0012],
        [0.0002, 0.0008],
        [0.0007, 0.0017],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0634],
        [0.0601, 0.0648],
        [0.0717, 0.0543],
        [0.0657, 0.0593],
        [0.0599, 0.0650],
        [0.0622, 0.0627],
        [0.0617, 0.0631],
        [0.0642, 0.0607],
        [0.0591, 0.0659],
        [0.0586, 0.0665],
        [0.0602, 0.0647],
        [0.0646, 0.0603],
        [0.0594, 0.0657],
        [0.0629, 0.0620],
        [0.0646, 0.0603],
        [0.0636, 0.0613]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.579724
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0013],
        [0.0003, 0.0011],
        [0.0003, 0.0006],
        [0.0005, 0.0016],
        [0.0003, 0.0010],
        [0.0006, 0.0014],
        [0.0004, 0.0013],
        [0.0002, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0016],
        [0.0001, 0.0005],
        [0.0004, 0.0008],
        [0.0007, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0621],
        [0.0578, 0.0673],
        [0.0653, 0.0596],
        [0.0593, 0.0656],
        [0.0587, 0.0663],
        [0.0632, 0.0616],
        [0.0593, 0.0656],
        [0.0581, 0.0670],
        [0.0694, 0.0561],
        [0.0680, 0.0572],
        [0.0625, 0.0622],
        [0.0645, 0.0603],
        [0.0596, 0.0653],
        [0.0595, 0.0654],
        [0.0636, 0.0613],
        [0.0683, 0.0570]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.452671
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0004, 0.0012],
        [0.0004, 0.0006],
        [0.0004, 0.0011],
        [0.0005, 0.0017],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0015],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0582, 0.0669],
        [0.0598, 0.0651],
        [0.0615, 0.0633],
        [0.0627, 0.0621],
        [0.0596, 0.0653],
        [0.0683, 0.0570],
        [0.0585, 0.0666],
        [0.0575, 0.0677],
        [0.0627, 0.0621],
        [0.0654, 0.0596],
        [0.0657, 0.0593],
        [0.0682, 0.0571],
        [0.0645, 0.0603],
        [0.0606, 0.0643],
        [0.0595, 0.0654],
        [0.0673, 0.0579]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.428694
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0012],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1249]], device='cuda:0')
tensor([[0.1110, 0.1400],
        [0.1310, 0.1186],
        [0.1255, 0.1238],
        [0.1186, 0.1309],
        [0.1266, 0.1228],
        [0.1277, 0.1217],
        [0.1157, 0.1343],
        [0.1439, 0.1080]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.253176
acc:  0.575
Time taken to execute the en SA task with prompt type rare_synonyms, variation 2 and batchsize 16: 0:00:05.353189
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([165, 2])
answers_probs just softmax dim 0: tensor([[0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061]], device='cuda:0')
tensor([[0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061],
        [0.0061, 0.0061]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.9993e-04, 3.0231e-04],
        [5.6410e-04, 5.8651e-04],
        [3.2425e-04, 3.5620e-04],
        [6.7174e-05, 4.8995e-05],
        [3.8409e-04, 6.0415e-04],
        [4.8423e-04, 5.7507e-04],
        [4.6229e-04, 4.6229e-04],
        [3.7885e-04, 6.2943e-04],
        [5.7364e-04, 9.7561e-04],
        [2.7728e-04, 3.0208e-04],
        [5.4789e-04, 1.1425e-03],
        [7.3338e-04, 1.2379e-03],
        [1.6713e-04, 2.0635e-04],
        [1.3626e-04, 2.0218e-04],
        [3.0136e-04, 5.0831e-04],
        [4.1628e-04, 7.1383e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0583],
        [0.0661, 0.0588],
        [0.0652, 0.0596],
        [0.0722, 0.0538],
        [0.0598, 0.0651],
        [0.0640, 0.0608],
        [0.0668, 0.0582],
        [0.0590, 0.0659],
        [0.0587, 0.0663],
        [0.0654, 0.0595],
        [0.0560, 0.0694],
        [0.0588, 0.0662],
        [0.0634, 0.0614],
        [0.0606, 0.0642],
        [0.0588, 0.0662],
        [0.0586, 0.0664]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.506399
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[4.7040e-04, 4.8923e-04],
        [6.7043e-04, 5.3883e-04],
        [4.9257e-04, 8.4448e-04],
        [3.4595e-04, 3.1257e-04],
        [2.2709e-04, 3.4904e-04],
        [6.2990e-04, 8.4734e-04],
        [3.3855e-04, 4.8137e-04],
        [3.0875e-04, 3.9029e-04],
        [5.0116e-04, 4.4584e-04],
        [5.6648e-04, 6.9952e-04],
        [7.0453e-05, 6.1452e-05],
        [4.7350e-04, 5.2023e-04],
        [5.7173e-04, 1.3294e-03],
        [4.2081e-04, 5.2786e-04],
        [4.0007e-04, 5.2977e-04],
        [3.6001e-04, 4.8423e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0649, 0.0599],
        [0.0692, 0.0562],
        [0.0575, 0.0677],
        [0.0672, 0.0578],
        [0.0590, 0.0660],
        [0.0609, 0.0639],
        [0.0601, 0.0647],
        [0.0618, 0.0629],
        [0.0675, 0.0576],
        [0.0622, 0.0625],
        [0.0678, 0.0573],
        [0.0640, 0.0607],
        [0.0537, 0.0724],
        [0.0620, 0.0628],
        [0.0611, 0.0636],
        [0.0609, 0.0639]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.342892
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0001, 0.0001],
        [0.0004, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0007, 0.0007],
        [0.0006, 0.0006],
        [0.0003, 0.0003],
        [0.0006, 0.0008],
        [0.0004, 0.0004],
        [0.0006, 0.0005],
        [0.0003, 0.0003],
        [0.0006, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0651],
        [0.0628, 0.0621],
        [0.0623, 0.0627],
        [0.0592, 0.0659],
        [0.0612, 0.0638],
        [0.0610, 0.0640],
        [0.0630, 0.0619],
        [0.0626, 0.0623],
        [0.0639, 0.0611],
        [0.0606, 0.0644],
        [0.0640, 0.0610],
        [0.0676, 0.0577],
        [0.0647, 0.0603],
        [0.0626, 0.0623],
        [0.0590, 0.0661],
        [0.0655, 0.0595]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.500598
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0003, 0.0004],
        [0.0006, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0005, 0.0007],
        [0.0003, 0.0002],
        [0.0008, 0.0013],
        [0.0003, 0.0003],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0009, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0581, 0.0670],
        [0.0618, 0.0631],
        [0.0654, 0.0596],
        [0.0619, 0.0629],
        [0.0625, 0.0623],
        [0.0593, 0.0657],
        [0.0607, 0.0643],
        [0.0576, 0.0676],
        [0.0609, 0.0640],
        [0.0619, 0.0629],
        [0.0674, 0.0578],
        [0.0604, 0.0645],
        [0.0642, 0.0607],
        [0.0653, 0.0597],
        [0.0665, 0.0586],
        [0.0659, 0.0592]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.603036
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0006, 0.0006],
        [0.0008, 0.0008],
        [0.0003, 0.0003],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0003, 0.0003],
        [0.0006, 0.0011],
        [0.0006, 0.0008],
        [0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0607],
        [0.0615, 0.0634],
        [0.0633, 0.0616],
        [0.0655, 0.0595],
        [0.0655, 0.0595],
        [0.0638, 0.0612],
        [0.0638, 0.0612],
        [0.0596, 0.0654],
        [0.0603, 0.0646],
        [0.0646, 0.0603],
        [0.0567, 0.0688],
        [0.0609, 0.0640],
        [0.0630, 0.0619],
        [0.0587, 0.0665],
        [0.0644, 0.0606],
        [0.0641, 0.0608]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.549499
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0005, 0.0006],
        [0.0006, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0005],
        [0.0005, 0.0004],
        [0.0009, 0.0012],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0006, 0.0007],
        [0.0002, 0.0001],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0623],
        [0.0606, 0.0643],
        [0.0677, 0.0575],
        [0.0650, 0.0599],
        [0.0578, 0.0673],
        [0.0639, 0.0610],
        [0.0656, 0.0593],
        [0.0599, 0.0650],
        [0.0628, 0.0621],
        [0.0573, 0.0680],
        [0.0629, 0.0619],
        [0.0692, 0.0563],
        [0.0633, 0.0616],
        [0.0599, 0.0650],
        [0.0582, 0.0670],
        [0.0633, 0.0616]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.435548
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0003],
        [0.0002, 0.0004],
        [0.0012, 0.0027],
        [0.0003, 0.0005],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0004, 0.0005],
        [0.0004, 0.0005],
        [0.0003, 0.0003],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0006, 0.0007],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0006, 0.0007],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0723, 0.0538],
        [0.0580, 0.0671],
        [0.0553, 0.0704],
        [0.0602, 0.0646],
        [0.0658, 0.0591],
        [0.0660, 0.0589],
        [0.0620, 0.0628],
        [0.0622, 0.0625],
        [0.0681, 0.0571],
        [0.0628, 0.0619],
        [0.0622, 0.0625],
        [0.0639, 0.0609],
        [0.0605, 0.0643],
        [0.0593, 0.0655],
        [0.0649, 0.0600],
        [0.0567, 0.0686]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.437428
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0003],
        [0.0004, 0.0005],
        [0.0007, 0.0009],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0003],
        [0.0005, 0.0006],
        [0.0003, 0.0007],
        [0.0001, 0.0001],
        [0.0004, 0.0005],
        [0.0007, 0.0012],
        [0.0002, 0.0003],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0620],
        [0.0646, 0.0604],
        [0.0644, 0.0605],
        [0.0612, 0.0637],
        [0.0642, 0.0607],
        [0.0620, 0.0629],
        [0.0614, 0.0635],
        [0.0570, 0.0684],
        [0.0636, 0.0613],
        [0.0644, 0.0605],
        [0.0571, 0.0682],
        [0.0680, 0.0573],
        [0.0648, 0.0602],
        [0.0590, 0.0661],
        [0.0642, 0.0607],
        [0.0613, 0.0636]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.461380
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0003],
        [0.0002, 0.0004],
        [0.0005, 0.0004],
        [0.0007, 0.0008],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0002],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0004, 0.0008],
        [0.0007, 0.0009],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0637],
        [0.0570, 0.0683],
        [0.0616, 0.0632],
        [0.0671, 0.0580],
        [0.0580, 0.0671],
        [0.0665, 0.0586],
        [0.0656, 0.0594],
        [0.0625, 0.0623],
        [0.0633, 0.0615],
        [0.0677, 0.0576],
        [0.0630, 0.0619],
        [0.0620, 0.0628],
        [0.0634, 0.0614],
        [0.0552, 0.0705],
        [0.0613, 0.0636],
        [0.0647, 0.0602]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.456499
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0003],
        [0.0001, 0.0001],
        [0.0003, 0.0004],
        [0.0003, 0.0003],
        [0.0002, 0.0001],
        [0.0006, 0.0010],
        [0.0001, 0.0002],
        [0.0007, 0.0008],
        [0.0010, 0.0011],
        [0.0005, 0.0007],
        [0.0002, 0.0002],
        [0.0003, 0.0003],
        [0.0005, 0.0008],
        [0.0005, 0.0004],
        [0.0003, 0.0003],
        [0.0007, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0677, 0.0575],
        [0.0656, 0.0594],
        [0.0578, 0.0674],
        [0.0646, 0.0603],
        [0.0695, 0.0560],
        [0.0581, 0.0670],
        [0.0589, 0.0661],
        [0.0622, 0.0626],
        [0.0638, 0.0610],
        [0.0589, 0.0661],
        [0.0612, 0.0637],
        [0.0628, 0.0620],
        [0.0577, 0.0675],
        [0.0649, 0.0601],
        [0.0636, 0.0612],
        [0.0627, 0.0621]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.428678
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[3.1543e-04, 5.1212e-04],
        [5.7650e-04, 4.3535e-04],
        [7.1049e-04, 1.0586e-03],
        [4.9734e-04, 5.8651e-04],
        [2.0206e-04, 1.7691e-04],
        [3.9148e-04, 4.6468e-04],
        [2.7990e-04, 2.9802e-04],
        [5.6171e-04, 6.2656e-04],
        [2.9016e-04, 3.2616e-04],
        [3.9005e-04, 6.1369e-04],
        [3.2496e-04, 4.2391e-04],
        [4.6873e-04, 6.2609e-04],
        [6.0320e-04, 6.0320e-04],
        [2.7728e-04, 4.6444e-04],
        [9.1672e-05, 9.6440e-05],
        [7.5340e-04, 7.1335e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0577, 0.0675],
        [0.0697, 0.0559],
        [0.0589, 0.0661],
        [0.0624, 0.0625],
        [0.0672, 0.0580],
        [0.0623, 0.0626],
        [0.0640, 0.0609],
        [0.0632, 0.0616],
        [0.0631, 0.0617],
        [0.0581, 0.0670],
        [0.0608, 0.0640],
        [0.0605, 0.0644],
        [0.0650, 0.0599],
        [0.0573, 0.0680],
        [0.0642, 0.0607],
        [0.0659, 0.0591]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.431819
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[4.8113e-04, 5.6267e-04],
        [3.4332e-04, 3.7694e-04],
        [7.0143e-04, 7.8869e-04],
        [4.1938e-04, 8.2111e-04],
        [6.7663e-04, 8.7595e-04],
        [1.1450e-04, 9.7573e-05],
        [1.3804e-04, 1.7250e-04],
        [8.1348e-04, 7.9489e-04],
        [3.6645e-04, 5.3310e-04],
        [4.0483e-04, 3.5715e-04],
        [2.9016e-04, 3.9959e-04],
        [3.9530e-04, 5.1165e-04],
        [3.8838e-04, 4.8709e-04],
        [2.6727e-04, 3.3522e-04],
        [8.6355e-04, 1.0262e-03],
        [1.0910e-03, 1.1253e-03]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0622],
        [0.0637, 0.0612],
        [0.0633, 0.0615],
        [0.0555, 0.0703],
        [0.0612, 0.0637],
        [0.0679, 0.0574],
        [0.0617, 0.0632],
        [0.0656, 0.0594],
        [0.0594, 0.0656],
        [0.0673, 0.0579],
        [0.0602, 0.0647],
        [0.0612, 0.0637],
        [0.0616, 0.0632],
        [0.0616, 0.0632],
        [0.0625, 0.0624],
        [0.0647, 0.0602]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.412008
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0002, 0.0002],
        [0.0003, 0.0004],
        [0.0006, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0003],
        [0.0008, 0.0011],
        [0.0001, 0.0001]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1274, 0.1222],
        [0.1315, 0.1184],
        [0.1175, 0.1325],
        [0.1235, 0.1261],
        [0.1141, 0.1365],
        [0.1383, 0.1126],
        [0.1193, 0.1305],
        [0.1284, 0.1213]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.160447
acc:  0.54
Time taken to execute the en SA task with prompt type rare_synonyms, variation 3 and batchsize 16: 0:00:05.747281
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([130, 2])
answers_probs just softmax dim 0: tensor([[0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077]], device='cuda:0')
tensor([[0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077],
        [0.0077, 0.0077]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0006, 0.0011],
        [0.0007, 0.0014],
        [0.0009, 0.0015],
        [0.0007, 0.0011],
        [0.0009, 0.0016],
        [0.0007, 0.0013],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0006, 0.0009],
        [0.0008, 0.0020],
        [0.0008, 0.0015],
        [0.0009, 0.0014],
        [0.0008, 0.0011],
        [0.0008, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0607, 0.0643],
        [0.0651, 0.0599],
        [0.0624, 0.0626],
        [0.0595, 0.0656],
        [0.0624, 0.0626],
        [0.0624, 0.0626],
        [0.0621, 0.0628],
        [0.0619, 0.0630],
        [0.0641, 0.0609],
        [0.0632, 0.0618],
        [0.0644, 0.0606],
        [0.0569, 0.0686],
        [0.0620, 0.0629],
        [0.0634, 0.0615],
        [0.0661, 0.0590],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.493496
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0011, 0.0014],
        [0.0005, 0.0006],
        [0.0009, 0.0016],
        [0.0006, 0.0010],
        [0.0010, 0.0015],
        [0.0006, 0.0013],
        [0.0007, 0.0010],
        [0.0011, 0.0018],
        [0.0014, 0.0024],
        [0.0009, 0.0019],
        [0.0012, 0.0021],
        [0.0007, 0.0015],
        [0.0008, 0.0016],
        [0.0005, 0.0009],
        [0.0010, 0.0017]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0630, 0.0619],
        [0.0661, 0.0590],
        [0.0673, 0.0579],
        [0.0611, 0.0639],
        [0.0640, 0.0610],
        [0.0640, 0.0610],
        [0.0598, 0.0652],
        [0.0648, 0.0602],
        [0.0629, 0.0620],
        [0.0624, 0.0625],
        [0.0592, 0.0659],
        [0.0621, 0.0628],
        [0.0596, 0.0654],
        [0.0599, 0.0651],
        [0.0620, 0.0629],
        [0.0618, 0.0632]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.429794
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0018],
        [0.0006, 0.0009],
        [0.0008, 0.0013],
        [0.0009, 0.0012],
        [0.0011, 0.0017],
        [0.0007, 0.0011],
        [0.0006, 0.0010],
        [0.0010, 0.0016],
        [0.0007, 0.0013],
        [0.0013, 0.0018],
        [0.0009, 0.0015],
        [0.0008, 0.0013],
        [0.0007, 0.0009],
        [0.0012, 0.0018],
        [0.0009, 0.0021],
        [0.0016, 0.0025]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0582, 0.0670],
        [0.0636, 0.0614],
        [0.0622, 0.0628],
        [0.0645, 0.0605],
        [0.0626, 0.0623],
        [0.0625, 0.0624],
        [0.0621, 0.0629],
        [0.0629, 0.0621],
        [0.0612, 0.0638],
        [0.0653, 0.0598],
        [0.0625, 0.0624],
        [0.0626, 0.0623],
        [0.0659, 0.0592],
        [0.0632, 0.0617],
        [0.0583, 0.0670],
        [0.0624, 0.0625]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.455161
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0014],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0010, 0.0014],
        [0.0010, 0.0017],
        [0.0008, 0.0013],
        [0.0012, 0.0019],
        [0.0006, 0.0009],
        [0.0007, 0.0015],
        [0.0008, 0.0011],
        [0.0007, 0.0012],
        [0.0010, 0.0016],
        [0.0009, 0.0019],
        [0.0007, 0.0012],
        [0.0008, 0.0018],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0611, 0.0638],
        [0.0645, 0.0605],
        [0.0663, 0.0588],
        [0.0651, 0.0600],
        [0.0629, 0.0620],
        [0.0620, 0.0629],
        [0.0630, 0.0619],
        [0.0641, 0.0609],
        [0.0590, 0.0662],
        [0.0654, 0.0596],
        [0.0615, 0.0635],
        [0.0636, 0.0613],
        [0.0599, 0.0652],
        [0.0640, 0.0610],
        [0.0588, 0.0664],
        [0.0589, 0.0663]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.582917
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0010, 0.0030],
        [0.0005, 0.0007],
        [0.0008, 0.0014],
        [0.0006, 0.0012],
        [0.0008, 0.0010],
        [0.0010, 0.0017],
        [0.0007, 0.0014],
        [0.0007, 0.0014],
        [0.0006, 0.0008],
        [0.0010, 0.0019],
        [0.0007, 0.0011],
        [0.0008, 0.0015],
        [0.0006, 0.0009],
        [0.0005, 0.0011],
        [0.0006, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0630],
        [0.0557, 0.0699],
        [0.0653, 0.0597],
        [0.0632, 0.0617],
        [0.0610, 0.0639],
        [0.0675, 0.0578],
        [0.0641, 0.0608],
        [0.0613, 0.0636],
        [0.0601, 0.0648],
        [0.0678, 0.0574],
        [0.0622, 0.0627],
        [0.0651, 0.0599],
        [0.0610, 0.0639],
        [0.0634, 0.0615],
        [0.0591, 0.0659],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.431850
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0014, 0.0018],
        [0.0009, 0.0016],
        [0.0007, 0.0014],
        [0.0002, 0.0004],
        [0.0008, 0.0018],
        [0.0006, 0.0013],
        [0.0008, 0.0013],
        [0.0005, 0.0008],
        [0.0005, 0.0012],
        [0.0010, 0.0014],
        [0.0008, 0.0016],
        [0.0009, 0.0013],
        [0.0006, 0.0013],
        [0.0009, 0.0011],
        [0.0009, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0645],
        [0.0670, 0.0582],
        [0.0618, 0.0630],
        [0.0602, 0.0647],
        [0.0604, 0.0645],
        [0.0583, 0.0668],
        [0.0601, 0.0648],
        [0.0634, 0.0615],
        [0.0632, 0.0617],
        [0.0596, 0.0654],
        [0.0655, 0.0595],
        [0.0617, 0.0632],
        [0.0657, 0.0593],
        [0.0603, 0.0646],
        [0.0667, 0.0584],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.493147
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0012, 0.0024],
        [0.0005, 0.0011],
        [0.0006, 0.0011],
        [0.0007, 0.0011],
        [0.0006, 0.0013],
        [0.0009, 0.0021],
        [0.0007, 0.0012],
        [0.0012, 0.0020],
        [0.0007, 0.0011],
        [0.0008, 0.0016],
        [0.0008, 0.0010],
        [0.0011, 0.0016],
        [0.0006, 0.0013],
        [0.0004, 0.0006],
        [0.0012, 0.0022],
        [0.0007, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0637],
        [0.0595, 0.0655],
        [0.0627, 0.0622],
        [0.0640, 0.0610],
        [0.0595, 0.0655],
        [0.0596, 0.0654],
        [0.0636, 0.0613],
        [0.0642, 0.0608],
        [0.0637, 0.0612],
        [0.0608, 0.0641],
        [0.0665, 0.0587],
        [0.0654, 0.0597],
        [0.0607, 0.0642],
        [0.0660, 0.0591],
        [0.0621, 0.0628],
        [0.0603, 0.0647]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.343836
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0016],
        [0.0007, 0.0012],
        [0.0005, 0.0009],
        [0.0008, 0.0011],
        [0.0009, 0.0013],
        [0.0008, 0.0015],
        [0.0005, 0.0008],
        [0.0008, 0.0017],
        [0.0007, 0.0013],
        [0.0008, 0.0013],
        [0.0003, 0.0005],
        [0.0007, 0.0010],
        [0.0007, 0.0014],
        [0.0007, 0.0013],
        [0.0006, 0.0014],
        [0.0007, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0590, 0.0661],
        [0.0633, 0.0616],
        [0.0627, 0.0622],
        [0.0657, 0.0594],
        [0.0655, 0.0596],
        [0.0615, 0.0634],
        [0.0623, 0.0626],
        [0.0609, 0.0641],
        [0.0618, 0.0631],
        [0.0628, 0.0621],
        [0.0632, 0.0617],
        [0.0658, 0.0593],
        [0.0618, 0.0631],
        [0.0626, 0.0623],
        [0.0588, 0.0664],
        [0.0621, 0.0629]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.427778
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0016],
        [0.0007, 0.0010],
        [0.0007, 0.0012],
        [0.0005, 0.0011],
        [0.0011, 0.0013],
        [0.0003, 0.0005],
        [0.0010, 0.0014],
        [0.0010, 0.0015],
        [0.0003, 0.0006],
        [0.0007, 0.0013],
        [0.0012, 0.0021],
        [0.0012, 0.0020],
        [0.0007, 0.0014],
        [0.0019, 0.0037],
        [0.0007, 0.0011],
        [0.0009, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0626, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0580, 0.0672],
        [0.0657, 0.0593],
        [0.0617, 0.0632],
        [0.0594, 0.0657],
        [0.0679, 0.0574],
        [0.0630, 0.0620],
        [0.0656, 0.0595],
        [0.0637, 0.0613],
        [0.0608, 0.0642],
        [0.0622, 0.0627],
        [0.0626, 0.0623],
        [0.0623, 0.0626],
        [0.0603, 0.0647],
        [0.0610, 0.0640],
        [0.0633, 0.0616],
        [0.0625, 0.0624]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.412475
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0009, 0.0020],
        [0.0005, 0.0009],
        [0.0007, 0.0010],
        [0.0005, 0.0007],
        [0.0008, 0.0025],
        [0.0008, 0.0011],
        [0.0004, 0.0006],
        [0.0009, 0.0016],
        [0.0006, 0.0011],
        [0.0006, 0.0011],
        [0.0011, 0.0017],
        [0.0008, 0.0012],
        [0.0008, 0.0013],
        [0.0008, 0.0014],
        [0.0008, 0.0013],
        [0.0007, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0627, 0.0622],
        [0.0654, 0.0596],
        [0.0655, 0.0595],
        [0.0553, 0.0704],
        [0.0663, 0.0588],
        [0.0633, 0.0616],
        [0.0624, 0.0625],
        [0.0610, 0.0639],
        [0.0615, 0.0634],
        [0.0634, 0.0615],
        [0.0641, 0.0608],
        [0.0634, 0.0615],
        [0.0634, 0.0615],
        [0.0630, 0.0618],
        [0.0596, 0.0654]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.430540
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0013],
        [0.0018, 0.0033],
        [0.0011, 0.0018],
        [0.0010, 0.0016],
        [0.0007, 0.0013],
        [0.0007, 0.0012],
        [0.0005, 0.0015],
        [0.0009, 0.0017],
        [0.0010, 0.0019],
        [0.0008, 0.0016],
        [0.0009, 0.0012],
        [0.0004, 0.0008],
        [0.0007, 0.0013],
        [0.0003, 0.0004],
        [0.0006, 0.0010],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0626, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0624],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0620, 0.0629],
        [0.0619, 0.0630],
        [0.0639, 0.0611],
        [0.0643, 0.0607],
        [0.0622, 0.0627],
        [0.0619, 0.0630],
        [0.0568, 0.0687],
        [0.0608, 0.0641],
        [0.0621, 0.0628],
        [0.0611, 0.0638],
        [0.0657, 0.0594],
        [0.0622, 0.0627],
        [0.0630, 0.0619],
        [0.0663, 0.0589],
        [0.0640, 0.0610],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.364549
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0007, 0.0015],
        [0.0006, 0.0009],
        [0.0005, 0.0006],
        [0.0009, 0.0015],
        [0.0010, 0.0018],
        [0.0012, 0.0023],
        [0.0011, 0.0016],
        [0.0006, 0.0009],
        [0.0007, 0.0011],
        [0.0008, 0.0012],
        [0.0007, 0.0011],
        [0.0008, 0.0015],
        [0.0009, 0.0014],
        [0.0009, 0.0013],
        [0.0015, 0.0027]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626]], device='cuda:0')
tensor([[0.0622, 0.0628],
        [0.0586, 0.0666],
        [0.0644, 0.0606],
        [0.0654, 0.0597],
        [0.0620, 0.0630],
        [0.0609, 0.0641],
        [0.0603, 0.0647],
        [0.0643, 0.0607],
        [0.0633, 0.0616],
        [0.0644, 0.0606],
        [0.0630, 0.0620],
        [0.0637, 0.0613],
        [0.0593, 0.0658],
        [0.0626, 0.0623],
        [0.0648, 0.0602],
        [0.0608, 0.0641]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.437532
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0014, 0.0024],
        [0.0006, 0.0007],
        [0.0006, 0.0011],
        [0.0007, 0.0012],
        [0.0008, 0.0013],
        [0.0010, 0.0018],
        [0.0011, 0.0018],
        [0.0010, 0.0017]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1251, 0.1251],
        [0.1250, 0.1249],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1236, 0.1264],
        [0.1322, 0.1181],
        [0.1233, 0.1266],
        [0.1256, 0.1243],
        [0.1247, 0.1252],
        [0.1209, 0.1291],
        [0.1252, 0.1248],
        [0.1245, 0.1255]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.212338
acc:  0.465
Time taken to execute the en SA task with prompt type rare_synonyms, variation 4 and batchsize 16: 0:00:05.536684
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([124, 2])
answers_probs just softmax dim 0: tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
tensor([[0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081],
        [0.0081, 0.0081]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0005, 0.0010],
        [0.0005, 0.0007],
        [0.0008, 0.0012],
        [0.0008, 0.0012],
        [0.0006, 0.0012],
        [0.0011, 0.0017],
        [0.0007, 0.0009],
        [0.0008, 0.0011],
        [0.0004, 0.0004],
        [0.0005, 0.0009],
        [0.0008, 0.0013],
        [0.0004, 0.0008],
        [0.0006, 0.0011],
        [0.0004, 0.0009],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0632],
        [0.0595, 0.0655],
        [0.0635, 0.0614],
        [0.0640, 0.0608],
        [0.0640, 0.0608],
        [0.0592, 0.0658],
        [0.0638, 0.0611],
        [0.0647, 0.0603],
        [0.0650, 0.0599],
        [0.0722, 0.0540],
        [0.0605, 0.0644],
        [0.0616, 0.0632],
        [0.0591, 0.0660],
        [0.0612, 0.0637],
        [0.0592, 0.0659],
        [0.0610, 0.0639]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.380153
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0011],
        [0.0009, 0.0014],
        [0.0006, 0.0007],
        [0.0008, 0.0012],
        [0.0003, 0.0009],
        [0.0005, 0.0010],
        [0.0006, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0007],
        [0.0006, 0.0010],
        [0.0008, 0.0019],
        [0.0005, 0.0010],
        [0.0005, 0.0012],
        [0.0005, 0.0009],
        [0.0006, 0.0012],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0621],
        [0.0636, 0.0612],
        [0.0681, 0.0572],
        [0.0662, 0.0588],
        [0.0553, 0.0704],
        [0.0604, 0.0644],
        [0.0666, 0.0585],
        [0.0667, 0.0584],
        [0.0625, 0.0623],
        [0.0627, 0.0621],
        [0.0580, 0.0671],
        [0.0610, 0.0638],
        [0.0568, 0.0686],
        [0.0626, 0.0622],
        [0.0597, 0.0652],
        [0.0672, 0.0579]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.429886
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0015],
        [0.0007, 0.0014],
        [0.0008, 0.0019],
        [0.0006, 0.0012],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0005, 0.0011],
        [0.0013, 0.0021],
        [0.0007, 0.0012],
        [0.0006, 0.0010],
        [0.0004, 0.0007],
        [0.0009, 0.0015],
        [0.0007, 0.0009],
        [0.0006, 0.0011],
        [0.0007, 0.0015],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0622, 0.0627],
        [0.0616, 0.0634],
        [0.0599, 0.0651],
        [0.0609, 0.0640],
        [0.0626, 0.0624],
        [0.0616, 0.0634],
        [0.0595, 0.0656],
        [0.0648, 0.0602],
        [0.0635, 0.0615],
        [0.0643, 0.0607],
        [0.0641, 0.0609],
        [0.0642, 0.0608],
        [0.0675, 0.0578],
        [0.0637, 0.0612],
        [0.0593, 0.0658],
        [0.0604, 0.0646]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.573703
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0014],
        [0.0005, 0.0009],
        [0.0009, 0.0014],
        [0.0007, 0.0010],
        [0.0004, 0.0007],
        [0.0006, 0.0008],
        [0.0007, 0.0015],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0005, 0.0008],
        [0.0010, 0.0017],
        [0.0004, 0.0008],
        [0.0007, 0.0011],
        [0.0007, 0.0015],
        [0.0006, 0.0009],
        [0.0010, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0652],
        [0.0620, 0.0629],
        [0.0637, 0.0613],
        [0.0653, 0.0597],
        [0.0639, 0.0611],
        [0.0675, 0.0578],
        [0.0595, 0.0656],
        [0.0623, 0.0627],
        [0.0582, 0.0670],
        [0.0642, 0.0607],
        [0.0629, 0.0620],
        [0.0597, 0.0653],
        [0.0632, 0.0617],
        [0.0603, 0.0647],
        [0.0635, 0.0614],
        [0.0639, 0.0611]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.494993
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0004, 0.0009],
        [0.0006, 0.0012],
        [0.0005, 0.0010],
        [0.0005, 0.0016],
        [0.0007, 0.0011],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0006, 0.0008],
        [0.0008, 0.0013],
        [0.0008, 0.0012],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0593],
        [0.0656, 0.0594],
        [0.0647, 0.0602],
        [0.0589, 0.0662],
        [0.0598, 0.0651],
        [0.0606, 0.0642],
        [0.0545, 0.0714],
        [0.0633, 0.0615],
        [0.0666, 0.0585],
        [0.0614, 0.0635],
        [0.0637, 0.0612],
        [0.0592, 0.0658],
        [0.0660, 0.0590],
        [0.0630, 0.0619],
        [0.0647, 0.0602],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.414737
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0012],
        [0.0006, 0.0010],
        [0.0006, 0.0009],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0005, 0.0007],
        [0.0004, 0.0010],
        [0.0006, 0.0011],
        [0.0006, 0.0007],
        [0.0008, 0.0013],
        [0.0009, 0.0018],
        [0.0008, 0.0014],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0009],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0610],
        [0.0630, 0.0619],
        [0.0636, 0.0613],
        [0.0610, 0.0640],
        [0.0640, 0.0610],
        [0.0631, 0.0618],
        [0.0568, 0.0686],
        [0.0611, 0.0639],
        [0.0663, 0.0588],
        [0.0632, 0.0617],
        [0.0591, 0.0660],
        [0.0603, 0.0647],
        [0.0653, 0.0597],
        [0.0640, 0.0610],
        [0.0621, 0.0628],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.318251
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0006, 0.0008],
        [0.0007, 0.0010],
        [0.0006, 0.0008],
        [0.0005, 0.0010],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0008, 0.0013],
        [0.0009, 0.0014],
        [0.0011, 0.0019],
        [0.0006, 0.0011],
        [0.0006, 0.0010],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0653, 0.0598],
        [0.0616, 0.0633],
        [0.0635, 0.0615],
        [0.0660, 0.0591],
        [0.0637, 0.0612],
        [0.0644, 0.0606],
        [0.0612, 0.0638],
        [0.0597, 0.0654],
        [0.0597, 0.0654],
        [0.0600, 0.0650],
        [0.0622, 0.0627],
        [0.0638, 0.0611],
        [0.0612, 0.0638],
        [0.0600, 0.0650],
        [0.0624, 0.0625],
        [0.0652, 0.0599]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.458351
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0025],
        [0.0006, 0.0010],
        [0.0003, 0.0005],
        [0.0006, 0.0008],
        [0.0006, 0.0011],
        [0.0004, 0.0005],
        [0.0006, 0.0008],
        [0.0006, 0.0009],
        [0.0007, 0.0012],
        [0.0008, 0.0015],
        [0.0008, 0.0017],
        [0.0009, 0.0013],
        [0.0007, 0.0011],
        [0.0005, 0.0007],
        [0.0008, 0.0013],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0549, 0.0710],
        [0.0627, 0.0621],
        [0.0638, 0.0611],
        [0.0649, 0.0601],
        [0.0610, 0.0638],
        [0.0687, 0.0567],
        [0.0645, 0.0604],
        [0.0628, 0.0620],
        [0.0609, 0.0640],
        [0.0595, 0.0654],
        [0.0587, 0.0663],
        [0.0644, 0.0605],
        [0.0628, 0.0620],
        [0.0649, 0.0601],
        [0.0628, 0.0620],
        [0.0624, 0.0625]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.410875
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0011, 0.0017],
        [0.0008, 0.0011],
        [0.0009, 0.0014],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0007, 0.0012],
        [0.0007, 0.0015],
        [0.0007, 0.0013],
        [0.0007, 0.0013],
        [0.0004, 0.0006],
        [0.0008, 0.0009],
        [0.0008, 0.0011],
        [0.0010, 0.0017],
        [0.0006, 0.0009],
        [0.0004, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0645],
        [0.0633, 0.0616],
        [0.0660, 0.0590],
        [0.0634, 0.0614],
        [0.0630, 0.0619],
        [0.0631, 0.0618],
        [0.0617, 0.0632],
        [0.0591, 0.0660],
        [0.0607, 0.0642],
        [0.0599, 0.0651],
        [0.0655, 0.0595],
        [0.0681, 0.0572],
        [0.0645, 0.0604],
        [0.0614, 0.0635],
        [0.0644, 0.0605],
        [0.0555, 0.0702]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.407704
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0009, 0.0013],
        [0.0006, 0.0009],
        [0.0006, 0.0014],
        [0.0003, 0.0004],
        [0.0006, 0.0008],
        [0.0007, 0.0010],
        [0.0005, 0.0007],
        [0.0008, 0.0012],
        [0.0006, 0.0008],
        [0.0007, 0.0010],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0006, 0.0010],
        [0.0006, 0.0014],
        [0.0008, 0.0015],
        [0.0007, 0.0014]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0647, 0.0603],
        [0.0648, 0.0602],
        [0.0584, 0.0668],
        [0.0654, 0.0596],
        [0.0652, 0.0598],
        [0.0642, 0.0608],
        [0.0629, 0.0620],
        [0.0643, 0.0606],
        [0.0659, 0.0591],
        [0.0635, 0.0614],
        [0.0620, 0.0629],
        [0.0600, 0.0650],
        [0.0608, 0.0641],
        [0.0579, 0.0674],
        [0.0608, 0.0641],
        [0.0593, 0.0658]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.319505
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0011],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0007, 0.0015],
        [0.0008, 0.0012],
        [0.0004, 0.0006],
        [0.0006, 0.0011],
        [0.0006, 0.0012],
        [0.0005, 0.0008],
        [0.0009, 0.0012],
        [0.0006, 0.0010],
        [0.0005, 0.0007],
        [0.0013, 0.0019],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0008, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0637],
        [0.0638, 0.0612],
        [0.0640, 0.0609],
        [0.0577, 0.0676],
        [0.0633, 0.0616],
        [0.0653, 0.0598],
        [0.0606, 0.0644],
        [0.0592, 0.0659],
        [0.0629, 0.0620],
        [0.0664, 0.0588],
        [0.0625, 0.0624],
        [0.0639, 0.0611],
        [0.0640, 0.0609],
        [0.0597, 0.0653],
        [0.0619, 0.0630],
        [0.0635, 0.0614]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.338895
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0006, 0.0012],
        [0.0004, 0.0008],
        [0.0006, 0.0013],
        [0.0005, 0.0010],
        [0.0009, 0.0015],
        [0.0008, 0.0014],
        [0.0005, 0.0007],
        [0.0007, 0.0010],
        [0.0011, 0.0015],
        [0.0006, 0.0009],
        [0.0005, 0.0009],
        [0.0007, 0.0013],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0627, 0.0623],
        [0.0613, 0.0636],
        [0.0599, 0.0651],
        [0.0597, 0.0653],
        [0.0595, 0.0656],
        [0.0632, 0.0617],
        [0.0614, 0.0635],
        [0.0640, 0.0610],
        [0.0653, 0.0598],
        [0.0655, 0.0595],
        [0.0653, 0.0598],
        [0.0614, 0.0635],
        [0.0615, 0.0634],
        [0.0609, 0.0641],
        [0.0659, 0.0592],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.360530
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0008, 0.0012],
        [0.0010, 0.0012],
        [0.0005, 0.0009],
        [0.0005, 0.0010],
        [0.0008, 0.0011],
        [0.0005, 0.0008],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1181, 0.1321],
        [0.1270, 0.1228],
        [0.1332, 0.1171],
        [0.1189, 0.1312],
        [0.1217, 0.1282],
        [0.1292, 0.1207],
        [0.1228, 0.1270],
        [0.1290, 0.1210]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.162555
acc:  0.385
Time taken to execute the en SA task with prompt type rare_synonyms, variation 5 and batchsize 16: 0:00:05.092201
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([112, 2])
answers_probs just softmax dim 0: tensor([[0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089]], device='cuda:0')
tensor([[0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089],
        [0.0089, 0.0089]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA rare_synonyms 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0006, 0.0009],
        [0.0002, 0.0003],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0006, 0.0007],
        [0.0007, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0611, 0.0639],
        [0.0607, 0.0643],
        [0.0620, 0.0629],
        [0.0626, 0.0623],
        [0.0618, 0.0632],
        [0.0616, 0.0634],
        [0.0635, 0.0615],
        [0.0609, 0.0641],
        [0.0642, 0.0608],
        [0.0601, 0.0649],
        [0.0638, 0.0612],
        [0.0631, 0.0619],
        [0.0661, 0.0591],
        [0.0642, 0.0608],
        [0.0606, 0.0645],
        [0.0637, 0.0613]], device='cuda:0')
 Batch: 0 of rare_synonyms classification Duration: 0:00:00.416413
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0004, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0012, 0.0012],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0003],
        [0.0005, 0.0008],
        [0.0004, 0.0004],
        [0.0007, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0594, 0.0655],
        [0.0583, 0.0668],
        [0.0587, 0.0663],
        [0.0573, 0.0680],
        [0.0670, 0.0581],
        [0.0637, 0.0611],
        [0.0641, 0.0607],
        [0.0614, 0.0634],
        [0.0682, 0.0571],
        [0.0631, 0.0617],
        [0.0585, 0.0666],
        [0.0596, 0.0653],
        [0.0645, 0.0604],
        [0.0622, 0.0626],
        [0.0685, 0.0569],
        [0.0654, 0.0596]], device='cuda:0')
 Batch: 1 of rare_synonyms classification Duration: 0:00:00.485319
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0007, 0.0019],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0005, 0.0006],
        [0.0006, 0.0010],
        [0.0006, 0.0008],
        [0.0010, 0.0011],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0005, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0617],
        [0.0613, 0.0635],
        [0.0543, 0.0718],
        [0.0609, 0.0639],
        [0.0594, 0.0656],
        [0.0629, 0.0619],
        [0.0604, 0.0645],
        [0.0613, 0.0636],
        [0.0648, 0.0601],
        [0.0639, 0.0610],
        [0.0600, 0.0648],
        [0.0641, 0.0607],
        [0.0669, 0.0582],
        [0.0638, 0.0611],
        [0.0620, 0.0628],
        [0.0709, 0.0549]], device='cuda:0')
 Batch: 2 of rare_synonyms classification Duration: 0:00:00.336648
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0008, 0.0019],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0004],
        [0.0007, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0009],
        [0.0008, 0.0009],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0585, 0.0667],
        [0.0566, 0.0688],
        [0.0652, 0.0598],
        [0.0626, 0.0622],
        [0.0635, 0.0614],
        [0.0615, 0.0634],
        [0.0626, 0.0622],
        [0.0602, 0.0647],
        [0.0633, 0.0615],
        [0.0618, 0.0631],
        [0.0680, 0.0573],
        [0.0610, 0.0639],
        [0.0672, 0.0580],
        [0.0616, 0.0633],
        [0.0661, 0.0590],
        [0.0602, 0.0647]], device='cuda:0')
 Batch: 3 of rare_synonyms classification Duration: 0:00:00.413789
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0006, 0.0015],
        [0.0004, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0011, 0.0023],
        [0.0006, 0.0010],
        [0.0005, 0.0007],
        [0.0006, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0667, 0.0583],
        [0.0561, 0.0694],
        [0.0682, 0.0571],
        [0.0635, 0.0614],
        [0.0651, 0.0598],
        [0.0630, 0.0618],
        [0.0575, 0.0677],
        [0.0600, 0.0649],
        [0.0642, 0.0606],
        [0.0653, 0.0596],
        [0.0610, 0.0638],
        [0.0671, 0.0580],
        [0.0599, 0.0650],
        [0.0628, 0.0621],
        [0.0608, 0.0641],
        [0.0587, 0.0664]], device='cuda:0')
 Batch: 4 of rare_synonyms classification Duration: 0:00:00.415271
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0007, 0.0011],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0009, 0.0014],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0010, 0.0020],
        [0.0004, 0.0006],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0621, 0.0628],
        [0.0600, 0.0650],
        [0.0624, 0.0625],
        [0.0633, 0.0616],
        [0.0599, 0.0651],
        [0.0640, 0.0609],
        [0.0621, 0.0628],
        [0.0644, 0.0606],
        [0.0568, 0.0687],
        [0.0623, 0.0626],
        [0.0624, 0.0625],
        [0.0634, 0.0615],
        [0.0658, 0.0593],
        [0.0595, 0.0655],
        [0.0638, 0.0611],
        [0.0677, 0.0576]], device='cuda:0')
 Batch: 5 of rare_synonyms classification Duration: 0:00:00.433668
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0012],
        [0.0004, 0.0007],
        [0.0006, 0.0007],
        [0.0005, 0.0006],
        [0.0007, 0.0012],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0008, 0.0013],
        [0.0008, 0.0014],
        [0.0007, 0.0011],
        [0.0005, 0.0007],
        [0.0009, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0609],
        [0.0579, 0.0674],
        [0.0638, 0.0611],
        [0.0602, 0.0648],
        [0.0587, 0.0665],
        [0.0601, 0.0649],
        [0.0669, 0.0583],
        [0.0668, 0.0584],
        [0.0608, 0.0641],
        [0.0626, 0.0623],
        [0.0618, 0.0631],
        [0.0623, 0.0626],
        [0.0612, 0.0638],
        [0.0643, 0.0607],
        [0.0665, 0.0586],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 6 of rare_synonyms classification Duration: 0:00:00.571061
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0011, 0.0013],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0007, 0.0012],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0007, 0.0012],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0679, 0.0574],
        [0.0607, 0.0642],
        [0.0591, 0.0660],
        [0.0641, 0.0608],
        [0.0636, 0.0613],
        [0.0614, 0.0635],
        [0.0649, 0.0600],
        [0.0667, 0.0584],
        [0.0598, 0.0652],
        [0.0600, 0.0649],
        [0.0611, 0.0638],
        [0.0680, 0.0573],
        [0.0633, 0.0615],
        [0.0607, 0.0642],
        [0.0593, 0.0657],
        [0.0594, 0.0656]], device='cuda:0')
 Batch: 7 of rare_synonyms classification Duration: 0:00:00.371435
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0013, 0.0024],
        [0.0009, 0.0011],
        [0.0005, 0.0007],
        [0.0006, 0.0016],
        [0.0004, 0.0010],
        [0.0009, 0.0014],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0006, 0.0007],
        [0.0003, 0.0004],
        [0.0005, 0.0007],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0581, 0.0671],
        [0.0659, 0.0591],
        [0.0640, 0.0608],
        [0.0617, 0.0631],
        [0.0614, 0.0635],
        [0.0660, 0.0590],
        [0.0648, 0.0602],
        [0.0561, 0.0694],
        [0.0583, 0.0669],
        [0.0633, 0.0615],
        [0.0609, 0.0639],
        [0.0609, 0.0639],
        [0.0687, 0.0567],
        [0.0655, 0.0595],
        [0.0630, 0.0619],
        [0.0615, 0.0634]], device='cuda:0')
 Batch: 8 of rare_synonyms classification Duration: 0:00:00.453412
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0008],
        [0.0004, 0.0006],
        [0.0007, 0.0017],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0006, 0.0011],
        [0.0006, 0.0014],
        [0.0004, 0.0007],
        [0.0006, 0.0009],
        [0.0008, 0.0010],
        [0.0003, 0.0004],
        [0.0004, 0.0009],
        [0.0007, 0.0012],
        [0.0005, 0.0007],
        [0.0005, 0.0016],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0597],
        [0.0660, 0.0590],
        [0.0583, 0.0668],
        [0.0611, 0.0637],
        [0.0641, 0.0607],
        [0.0623, 0.0625],
        [0.0583, 0.0668],
        [0.0605, 0.0644],
        [0.0633, 0.0615],
        [0.0671, 0.0580],
        [0.0640, 0.0608],
        [0.0600, 0.0649],
        [0.0615, 0.0633],
        [0.0674, 0.0578],
        [0.0552, 0.0706],
        [0.0657, 0.0593]], device='cuda:0')
 Batch: 9 of rare_synonyms classification Duration: 0:00:00.409592
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0007, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0004],
        [0.0010, 0.0012],
        [0.0008, 0.0015],
        [0.0004, 0.0004],
        [0.0003, 0.0005],
        [0.0008, 0.0025],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0006, 0.0014],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0563, 0.0689],
        [0.0630, 0.0616],
        [0.0624, 0.0622],
        [0.0675, 0.0575],
        [0.0644, 0.0602],
        [0.0591, 0.0657],
        [0.0675, 0.0575],
        [0.0599, 0.0647],
        [0.0534, 0.0726],
        [0.0580, 0.0668],
        [0.0632, 0.0614],
        [0.0560, 0.0692],
        [0.0629, 0.0617],
        [0.0642, 0.0604],
        [0.0663, 0.0585],
        [0.0758, 0.0512]], device='cuda:0')
 Batch: 10 of rare_synonyms classification Duration: 0:00:00.434507
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0005, 0.0006],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0004],
        [0.0005, 0.0012],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0010, 0.0018],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0632],
        [0.0598, 0.0652],
        [0.0677, 0.0576],
        [0.0624, 0.0624],
        [0.0625, 0.0623],
        [0.0695, 0.0560],
        [0.0580, 0.0671],
        [0.0634, 0.0614],
        [0.0632, 0.0616],
        [0.0558, 0.0698],
        [0.0647, 0.0602],
        [0.0650, 0.0599],
        [0.0622, 0.0627],
        [0.0600, 0.0649],
        [0.0618, 0.0630],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 11 of rare_synonyms classification Duration: 0:00:00.428193
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0006],
        [0.0011, 0.0015],
        [0.0004, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1251, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1230, 0.1268],
        [0.1251, 0.1246],
        [0.1182, 0.1319],
        [0.1178, 0.1324],
        [0.1369, 0.1139],
        [0.1277, 0.1221],
        [0.1235, 0.1263],
        [0.1277, 0.1221]], device='cuda:0')
 Batch: 12 of rare_synonyms classification Duration: 0:00:00.179291
acc:  0.485
Time taken to execute the en SA task with prompt type rare_synonyms, variation 6 and batchsize 16: 0:00:05.370381
path ['42', 'en', 'bloom-big', 'SA', 'rare_synonyms', 'prompt_id_6']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

prompt_type identical_modal has 10 prompts in it
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([102, 2])
answers_probs just softmax dim 0: tensor([[0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098]], device='cuda:0')
tensor([[0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 0 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0008, 0.0014],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0002],
        [0.0003, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0604, 0.0645],
        [0.0629, 0.0619],
        [0.0604, 0.0645],
        [0.0591, 0.0659],
        [0.0629, 0.0619],
        [0.0580, 0.0671],
        [0.0653, 0.0597],
        [0.0610, 0.0638],
        [0.0656, 0.0593],
        [0.0624, 0.0624],
        [0.0606, 0.0643],
        [0.0651, 0.0598],
        [0.0623, 0.0625],
        [0.0727, 0.0536],
        [0.0589, 0.0662],
        [0.0622, 0.0626]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.557176
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0007, 0.0014],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0002, 0.0005],
        [0.0007, 0.0011],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0005],
        [0.0001, 0.0004],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0653],
        [0.0608, 0.0640],
        [0.0673, 0.0578],
        [0.0606, 0.0643],
        [0.0651, 0.0598],
        [0.0651, 0.0598],
        [0.0658, 0.0592],
        [0.0616, 0.0633],
        [0.0641, 0.0607],
        [0.0588, 0.0662],
        [0.0637, 0.0612],
        [0.0630, 0.0618],
        [0.0542, 0.0719],
        [0.0597, 0.0652],
        [0.0633, 0.0615],
        [0.0672, 0.0580]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.326200
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0011],
        [0.0002, 0.0003],
        [0.0008, 0.0016],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0005, 0.0013],
        [0.0003, 0.0009],
        [0.0007, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0008, 0.0015],
        [0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0580, 0.0672],
        [0.0670, 0.0582],
        [0.0624, 0.0625],
        [0.0590, 0.0661],
        [0.0626, 0.0623],
        [0.0626, 0.0623],
        [0.0596, 0.0654],
        [0.0582, 0.0670],
        [0.0692, 0.0563],
        [0.0608, 0.0641],
        [0.0641, 0.0608],
        [0.0634, 0.0615],
        [0.0627, 0.0622],
        [0.0640, 0.0609],
        [0.0645, 0.0604],
        [0.0621, 0.0628]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.431445
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0005, 0.0008],
        [0.0003, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0008, 0.0015],
        [0.0008, 0.0011],
        [0.0002, 0.0004],
        [0.0007, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0651, 0.0599],
        [0.0569, 0.0685],
        [0.0633, 0.0616],
        [0.0633, 0.0616],
        [0.0604, 0.0645],
        [0.0622, 0.0627],
        [0.0659, 0.0591],
        [0.0627, 0.0621],
        [0.0663, 0.0588],
        [0.0673, 0.0579],
        [0.0616, 0.0632],
        [0.0607, 0.0642],
        [0.0598, 0.0652],
        [0.0645, 0.0604],
        [0.0558, 0.0699]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.318867
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0011],
        [0.0006, 0.0012],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0011],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0562, 0.0694],
        [0.0605, 0.0645],
        [0.0620, 0.0628],
        [0.0628, 0.0621],
        [0.0652, 0.0597],
        [0.0604, 0.0646],
        [0.0649, 0.0601],
        [0.0623, 0.0626],
        [0.0593, 0.0658],
        [0.0653, 0.0597],
        [0.0633, 0.0616],
        [0.0587, 0.0664],
        [0.0646, 0.0603],
        [0.0685, 0.0569],
        [0.0635, 0.0614],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.457570
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0007, 0.0011],
        [0.0005, 0.0010],
        [0.0004, 0.0004],
        [0.0006, 0.0013],
        [0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0004, 0.0005],
        [0.0006, 0.0012],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0611, 0.0638],
        [0.0655, 0.0595],
        [0.0647, 0.0603],
        [0.0619, 0.0629],
        [0.0706, 0.0552],
        [0.0610, 0.0639],
        [0.0616, 0.0633],
        [0.0607, 0.0642],
        [0.0658, 0.0593],
        [0.0617, 0.0632],
        [0.0631, 0.0618],
        [0.0589, 0.0662],
        [0.0598, 0.0652],
        [0.0644, 0.0605],
        [0.0598, 0.0652],
        [0.0595, 0.0656]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.455218
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0013],
        [0.0001, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0006, 0.0007],
        [0.0006, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0611, 0.0637],
        [0.0628, 0.0620],
        [0.0620, 0.0628],
        [0.0597, 0.0653],
        [0.0542, 0.0719],
        [0.0641, 0.0608],
        [0.0629, 0.0619],
        [0.0597, 0.0653],
        [0.0697, 0.0559],
        [0.0645, 0.0604],
        [0.0668, 0.0583],
        [0.0608, 0.0640],
        [0.0633, 0.0616],
        [0.0639, 0.0609],
        [0.0626, 0.0622]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.367741
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0014],
        [0.0005, 0.0011],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0005, 0.0009],
        [0.0007, 0.0013],
        [0.0005, 0.0014],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0630],
        [0.0624, 0.0625],
        [0.0642, 0.0607],
        [0.0565, 0.0690],
        [0.0606, 0.0643],
        [0.0600, 0.0649],
        [0.0635, 0.0614],
        [0.0696, 0.0560],
        [0.0622, 0.0627],
        [0.0662, 0.0588],
        [0.0640, 0.0609],
        [0.0625, 0.0624],
        [0.0583, 0.0669],
        [0.0617, 0.0632],
        [0.0635, 0.0614],
        [0.0629, 0.0619]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.409976
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0004, 0.0008],
        [0.0002, 0.0008],
        [0.0005, 0.0007],
        [0.0007, 0.0022],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0647],
        [0.0655, 0.0594],
        [0.0702, 0.0555],
        [0.0620, 0.0627],
        [0.0547, 0.0712],
        [0.0678, 0.0574],
        [0.0568, 0.0685],
        [0.0619, 0.0628],
        [0.0621, 0.0626],
        [0.0669, 0.0582],
        [0.0619, 0.0628],
        [0.0651, 0.0597],
        [0.0605, 0.0644],
        [0.0644, 0.0604],
        [0.0597, 0.0652],
        [0.0604, 0.0645]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.411350
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0012],
        [0.0003, 0.0004],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0611],
        [0.0606, 0.0643],
        [0.0600, 0.0649],
        [0.0576, 0.0676],
        [0.0608, 0.0641],
        [0.0600, 0.0649],
        [0.0684, 0.0570],
        [0.0593, 0.0658],
        [0.0622, 0.0627],
        [0.0652, 0.0598],
        [0.0610, 0.0639],
        [0.0620, 0.0629],
        [0.0609, 0.0640],
        [0.0659, 0.0591],
        [0.0642, 0.0607],
        [0.0680, 0.0573]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.364703
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0013],
        [0.0003, 0.0006],
        [0.0008, 0.0014],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0007, 0.0014],
        [0.0004, 0.0009],
        [0.0006, 0.0009],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0609],
        [0.0651, 0.0599],
        [0.0648, 0.0601],
        [0.0672, 0.0580],
        [0.0617, 0.0632],
        [0.0615, 0.0634],
        [0.0661, 0.0590],
        [0.0555, 0.0702],
        [0.0602, 0.0647],
        [0.0631, 0.0617],
        [0.0630, 0.0618],
        [0.0584, 0.0668],
        [0.0628, 0.0621],
        [0.0600, 0.0650],
        [0.0672, 0.0580],
        [0.0596, 0.0654]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.432871
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0012],
        [0.0006, 0.0010],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0010, 0.0014],
        [0.0003, 0.0010],
        [0.0004, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0002, 0.0006],
        [0.0005, 0.0013],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0631],
        [0.0596, 0.0654],
        [0.0646, 0.0603],
        [0.0637, 0.0612],
        [0.0645, 0.0605],
        [0.0647, 0.0602],
        [0.0612, 0.0637],
        [0.0630, 0.0619],
        [0.0694, 0.0561],
        [0.0575, 0.0677],
        [0.0588, 0.0662],
        [0.0661, 0.0589],
        [0.0608, 0.0641],
        [0.0607, 0.0642],
        [0.0591, 0.0660],
        [0.0646, 0.0604]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.367688
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0005, 0.0011],
        [0.0004, 0.0007],
        [0.0006, 0.0007],
        [0.0005, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1213, 0.1286],
        [0.1275, 0.1223],
        [0.1319, 0.1182],
        [0.1258, 0.1240],
        [0.1172, 0.1331],
        [0.1183, 0.1318],
        [0.1327, 0.1175],
        [0.1253, 0.1244]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.189108
acc:  0.5
Time taken to execute the en SA task with prompt type identical_modal, variation 0 and batchsize 16: 0:00:05.110985
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_0']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([104, 2])
answers_probs just softmax dim 0: tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 1 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0005, 0.0012],
        [0.0006, 0.0011],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0004, 0.0010],
        [0.0009, 0.0014],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0622, 0.0627],
        [0.0574, 0.0680],
        [0.0649, 0.0601],
        [0.0674, 0.0578],
        [0.0647, 0.0603],
        [0.0619, 0.0630],
        [0.0628, 0.0621],
        [0.0592, 0.0659],
        [0.0613, 0.0636],
        [0.0599, 0.0651],
        [0.0614, 0.0634],
        [0.0577, 0.0675],
        [0.0641, 0.0608],
        [0.0635, 0.0614],
        [0.0668, 0.0584],
        [0.0650, 0.0599]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.411664
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0009, 0.0011],
        [0.0003, 0.0005],
        [0.0007, 0.0011],
        [0.0004, 0.0009],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0650, 0.0600],
        [0.0655, 0.0595],
        [0.0594, 0.0657],
        [0.0623, 0.0626],
        [0.0609, 0.0640],
        [0.0630, 0.0619],
        [0.0644, 0.0605],
        [0.0602, 0.0648],
        [0.0687, 0.0567],
        [0.0635, 0.0614],
        [0.0639, 0.0610],
        [0.0590, 0.0661],
        [0.0576, 0.0677],
        [0.0612, 0.0637],
        [0.0613, 0.0636]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.341341
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0005, 0.0008],
        [0.0003, 0.0003],
        [0.0004, 0.0006],
        [0.0004, 0.0008],
        [0.0008, 0.0014],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0011],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0006, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0576, 0.0677],
        [0.0629, 0.0619],
        [0.0676, 0.0576],
        [0.0648, 0.0601],
        [0.0629, 0.0619],
        [0.0630, 0.0618],
        [0.0629, 0.0619],
        [0.0583, 0.0668],
        [0.0574, 0.0679],
        [0.0574, 0.0679],
        [0.0622, 0.0627],
        [0.0683, 0.0570],
        [0.0628, 0.0620],
        [0.0613, 0.0636],
        [0.0646, 0.0603],
        [0.0660, 0.0590]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.410060
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0008, 0.0014],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0007, 0.0010],
        [0.0005, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0007, 0.0011],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0642],
        [0.0618, 0.0631],
        [0.0594, 0.0656],
        [0.0613, 0.0636],
        [0.0618, 0.0631],
        [0.0599, 0.0651],
        [0.0631, 0.0618],
        [0.0677, 0.0576],
        [0.0673, 0.0580],
        [0.0643, 0.0607],
        [0.0608, 0.0642],
        [0.0623, 0.0626],
        [0.0591, 0.0659],
        [0.0610, 0.0639],
        [0.0634, 0.0616],
        [0.0660, 0.0591]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.432156
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0006, 0.0010],
        [0.0003, 0.0004],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0005, 0.0009],
        [0.0003, 0.0007],
        [0.0005, 0.0008],
        [0.0006, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0644, 0.0605],
        [0.0644, 0.0605],
        [0.0643, 0.0607],
        [0.0585, 0.0667],
        [0.0619, 0.0630],
        [0.0602, 0.0648],
        [0.0641, 0.0609],
        [0.0659, 0.0592],
        [0.0634, 0.0615],
        [0.0602, 0.0648],
        [0.0619, 0.0630],
        [0.0597, 0.0654],
        [0.0642, 0.0608],
        [0.0658, 0.0593],
        [0.0617, 0.0632],
        [0.0594, 0.0657]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.326374
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0012],
        [0.0006, 0.0014],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0006, 0.0009],
        [0.0006, 0.0010],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0006, 0.0010],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0636],
        [0.0586, 0.0665],
        [0.0625, 0.0624],
        [0.0603, 0.0646],
        [0.0604, 0.0645],
        [0.0654, 0.0595],
        [0.0619, 0.0629],
        [0.0594, 0.0656],
        [0.0612, 0.0636],
        [0.0693, 0.0562],
        [0.0659, 0.0591],
        [0.0698, 0.0558],
        [0.0589, 0.0662],
        [0.0631, 0.0617],
        [0.0627, 0.0621],
        [0.0594, 0.0656]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.363845
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0003],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0007, 0.0012],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0007, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0630],
        [0.0634, 0.0614],
        [0.0623, 0.0626],
        [0.0677, 0.0576],
        [0.0625, 0.0623],
        [0.0661, 0.0589],
        [0.0542, 0.0719],
        [0.0618, 0.0630],
        [0.0611, 0.0638],
        [0.0591, 0.0659],
        [0.0661, 0.0589],
        [0.0619, 0.0629],
        [0.0624, 0.0624],
        [0.0627, 0.0621],
        [0.0660, 0.0590],
        [0.0607, 0.0641]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.416747
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0001, 0.0005],
        [0.0003, 0.0008],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0005, 0.0011],
        [0.0003, 0.0007],
        [0.0003, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0005],
        [0.0005, 0.0006],
        [0.0007, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0580, 0.0671],
        [0.0629, 0.0619],
        [0.0565, 0.0689],
        [0.0602, 0.0646],
        [0.0623, 0.0625],
        [0.0648, 0.0600],
        [0.0576, 0.0675],
        [0.0630, 0.0618],
        [0.0602, 0.0646],
        [0.0588, 0.0662],
        [0.0645, 0.0603],
        [0.0674, 0.0577],
        [0.0686, 0.0568],
        [0.0707, 0.0550],
        [0.0631, 0.0616],
        [0.0613, 0.0635]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.458588
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0006, 0.0010],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0007, 0.0012],
        [0.0004, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0614, 0.0635],
        [0.0648, 0.0602],
        [0.0632, 0.0617],
        [0.0631, 0.0618],
        [0.0638, 0.0611],
        [0.0611, 0.0638],
        [0.0573, 0.0680],
        [0.0632, 0.0617],
        [0.0570, 0.0684],
        [0.0597, 0.0653],
        [0.0632, 0.0617],
        [0.0639, 0.0610],
        [0.0630, 0.0619],
        [0.0647, 0.0603],
        [0.0616, 0.0632],
        [0.0689, 0.0566]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.560182
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0007],
        [0.0007, 0.0020],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0003],
        [0.0006, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0615],
        [0.0563, 0.0693],
        [0.0622, 0.0627],
        [0.0605, 0.0645],
        [0.0591, 0.0659],
        [0.0634, 0.0615],
        [0.0668, 0.0584],
        [0.0620, 0.0629],
        [0.0662, 0.0589],
        [0.0626, 0.0623],
        [0.0626, 0.0623],
        [0.0642, 0.0607],
        [0.0611, 0.0638],
        [0.0602, 0.0648],
        [0.0622, 0.0627],
        [0.0675, 0.0578]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.345271
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0006, 0.0007],
        [0.0006, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0003],
        [0.0003, 0.0003],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0652],
        [0.0625, 0.0623],
        [0.0586, 0.0663],
        [0.0664, 0.0586],
        [0.0660, 0.0590],
        [0.0628, 0.0619],
        [0.0618, 0.0629],
        [0.0536, 0.0725],
        [0.0628, 0.0619],
        [0.0624, 0.0624],
        [0.0596, 0.0652],
        [0.0585, 0.0665],
        [0.0631, 0.0617],
        [0.0727, 0.0535],
        [0.0660, 0.0590],
        [0.0636, 0.0611]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.364273
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0010],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0005, 0.0010],
        [0.0008, 0.0014],
        [0.0003, 0.0011],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0006, 0.0011],
        [0.0004, 0.0008],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0634, 0.0615],
        [0.0666, 0.0585],
        [0.0633, 0.0616],
        [0.0626, 0.0623],
        [0.0548, 0.0712],
        [0.0659, 0.0592],
        [0.0641, 0.0608],
        [0.0665, 0.0586],
        [0.0626, 0.0623],
        [0.0601, 0.0648],
        [0.0630, 0.0618],
        [0.0624, 0.0625],
        [0.0625, 0.0624],
        [0.0601, 0.0648],
        [0.0610, 0.0639]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.368881
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0008, 0.0012],
        [0.0005, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0007, 0.0011],
        [0.0003, 0.0007],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1251],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1202, 0.1297],
        [0.1293, 0.1206],
        [0.1366, 0.1141],
        [0.1168, 0.1334],
        [0.1276, 0.1222],
        [0.1262, 0.1236],
        [0.1194, 0.1306],
        [0.1239, 0.1258]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.180977
acc:  0.505
Time taken to execute the en SA task with prompt type identical_modal, variation 1 and batchsize 16: 0:00:05.001325
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_1']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([102, 2])
answers_probs just softmax dim 0: tensor([[0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098]], device='cuda:0')
tensor([[0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098],
        [0.0098, 0.0098]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 2 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0007, 0.0009],
        [0.0007, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0007, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0010],
        [0.0010, 0.0017],
        [0.0003, 0.0005],
        [0.0003, 0.0002],
        [0.0009, 0.0016]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0600, 0.0648],
        [0.0676, 0.0575],
        [0.0669, 0.0581],
        [0.0606, 0.0641],
        [0.0593, 0.0656],
        [0.0583, 0.0667],
        [0.0684, 0.0569],
        [0.0647, 0.0601],
        [0.0601, 0.0647],
        [0.0596, 0.0653],
        [0.0605, 0.0642],
        [0.0552, 0.0705],
        [0.0618, 0.0629],
        [0.0630, 0.0617],
        [0.0725, 0.0536],
        [0.0616, 0.0631]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.437976
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0003],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0006, 0.0013],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0007, 0.0008],
        [0.0002, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0006, 0.0013]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0657],
        [0.0696, 0.0558],
        [0.0569, 0.0683],
        [0.0611, 0.0636],
        [0.0621, 0.0626],
        [0.0601, 0.0647],
        [0.0599, 0.0649],
        [0.0647, 0.0601],
        [0.0664, 0.0585],
        [0.0604, 0.0643],
        [0.0707, 0.0549],
        [0.0559, 0.0695],
        [0.0621, 0.0626],
        [0.0589, 0.0659],
        [0.0713, 0.0545],
        [0.0608, 0.0639]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.450438
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0005, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0006, 0.0008],
        [0.0004, 0.0009],
        [0.0006, 0.0010],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0008, 0.0010],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0671, 0.0580],
        [0.0654, 0.0595],
        [0.0598, 0.0651],
        [0.0612, 0.0636],
        [0.0579, 0.0672],
        [0.0638, 0.0610],
        [0.0600, 0.0649],
        [0.0588, 0.0662],
        [0.0587, 0.0663],
        [0.0646, 0.0603],
        [0.0590, 0.0660],
        [0.0617, 0.0630],
        [0.0613, 0.0635],
        [0.0609, 0.0639],
        [0.0671, 0.0580],
        [0.0728, 0.0535]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.366796
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0013, 0.0020],
        [0.0004, 0.0005],
        [0.0007, 0.0010],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0010],
        [0.0005, 0.0010],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0004, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0626, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0676, 0.0577],
        [0.0616, 0.0633],
        [0.0651, 0.0599],
        [0.0672, 0.0580],
        [0.0653, 0.0597],
        [0.0653, 0.0597],
        [0.0612, 0.0637],
        [0.0608, 0.0641],
        [0.0630, 0.0619],
        [0.0612, 0.0637],
        [0.0610, 0.0639],
        [0.0613, 0.0636],
        [0.0565, 0.0690],
        [0.0589, 0.0662],
        [0.0619, 0.0629],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.406861
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0007, 0.0011],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0006, 0.0009],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0591],
        [0.0683, 0.0570],
        [0.0650, 0.0600],
        [0.0591, 0.0659],
        [0.0624, 0.0624],
        [0.0642, 0.0607],
        [0.0606, 0.0644],
        [0.0648, 0.0602],
        [0.0641, 0.0609],
        [0.0591, 0.0659],
        [0.0636, 0.0613],
        [0.0595, 0.0655],
        [0.0607, 0.0643],
        [0.0594, 0.0656],
        [0.0632, 0.0617],
        [0.0598, 0.0651]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.410441
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0003],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0001, 0.0005],
        [0.0004, 0.0007],
        [0.0008, 0.0010],
        [0.0007, 0.0013],
        [0.0005, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0683, 0.0570],
        [0.0598, 0.0651],
        [0.0598, 0.0651],
        [0.0643, 0.0605],
        [0.0623, 0.0624],
        [0.0594, 0.0656],
        [0.0628, 0.0620],
        [0.0636, 0.0612],
        [0.0625, 0.0622],
        [0.0605, 0.0644],
        [0.0612, 0.0636],
        [0.0539, 0.0722],
        [0.0630, 0.0618],
        [0.0665, 0.0585],
        [0.0618, 0.0630],
        [0.0704, 0.0553]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.432535
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0007, 0.0009],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0006, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0010],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0671, 0.0580],
        [0.0671, 0.0580],
        [0.0614, 0.0634],
        [0.0627, 0.0622],
        [0.0635, 0.0614],
        [0.0601, 0.0649],
        [0.0641, 0.0608],
        [0.0643, 0.0606],
        [0.0630, 0.0618],
        [0.0627, 0.0622],
        [0.0565, 0.0689],
        [0.0635, 0.0614],
        [0.0557, 0.0699],
        [0.0625, 0.0623],
        [0.0654, 0.0596],
        [0.0605, 0.0644]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.317620
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0013],
        [0.0004, 0.0006],
        [0.0002, 0.0006],
        [0.0005, 0.0009],
        [0.0011, 0.0015],
        [0.0006, 0.0009],
        [0.0004, 0.0010],
        [0.0004, 0.0007],
        [0.0010, 0.0013],
        [0.0005, 0.0011],
        [0.0004, 0.0011],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0005, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0655, 0.0595],
        [0.0664, 0.0587],
        [0.0558, 0.0698],
        [0.0626, 0.0622],
        [0.0675, 0.0577],
        [0.0656, 0.0593],
        [0.0599, 0.0650],
        [0.0613, 0.0636],
        [0.0672, 0.0579],
        [0.0606, 0.0642],
        [0.0582, 0.0669],
        [0.0646, 0.0602],
        [0.0659, 0.0591],
        [0.0586, 0.0665],
        [0.0592, 0.0657],
        [0.0611, 0.0638]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.324700
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.7251e-04, 7.2336e-04],
        [2.3973e-04, 6.9380e-04],
        [5.4884e-04, 7.4434e-04],
        [4.1866e-04, 7.2336e-04],
        [4.0078e-04, 7.6675e-04],
        [5.8746e-04, 7.6628e-04],
        [4.7112e-04, 7.0715e-04],
        [4.5848e-04, 1.2856e-03],
        [3.3283e-04, 6.3658e-04],
        [4.8280e-04, 8.2111e-04],
        [4.2200e-04, 7.5245e-04],
        [7.1228e-05, 1.9443e-04],
        [3.0446e-04, 6.4945e-04],
        [5.1689e-04, 9.5797e-04],
        [3.3450e-04, 6.5994e-04],
        [4.3774e-04, 9.3412e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0585, 0.0666],
        [0.0575, 0.0678],
        [0.0680, 0.0573],
        [0.0641, 0.0607],
        [0.0627, 0.0622],
        [0.0686, 0.0568],
        [0.0663, 0.0587],
        [0.0578, 0.0674],
        [0.0627, 0.0622],
        [0.0644, 0.0605],
        [0.0637, 0.0612],
        [0.0581, 0.0670],
        [0.0612, 0.0637],
        [0.0631, 0.0617],
        [0.0622, 0.0626],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.554676
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0006, 0.0012],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0012],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0643, 0.0606],
        [0.0607, 0.0643],
        [0.0647, 0.0603],
        [0.0588, 0.0663],
        [0.0631, 0.0619],
        [0.0600, 0.0650],
        [0.0624, 0.0625],
        [0.0639, 0.0611],
        [0.0634, 0.0615],
        [0.0582, 0.0670],
        [0.0639, 0.0611],
        [0.0659, 0.0592],
        [0.0599, 0.0651],
        [0.0662, 0.0590],
        [0.0626, 0.0623],
        [0.0621, 0.0628]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.409023
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0008],
        [0.0006, 0.0010],
        [0.0002, 0.0004],
        [0.0004, 0.0010],
        [0.0006, 0.0008],
        [0.0008, 0.0019],
        [0.0004, 0.0010],
        [0.0006, 0.0008],
        [0.0006, 0.0010],
        [0.0006, 0.0011],
        [0.0008, 0.0011],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0576, 0.0676],
        [0.0636, 0.0612],
        [0.0646, 0.0603],
        [0.0602, 0.0647],
        [0.0591, 0.0659],
        [0.0686, 0.0568],
        [0.0585, 0.0666],
        [0.0588, 0.0663],
        [0.0668, 0.0583],
        [0.0651, 0.0599],
        [0.0629, 0.0619],
        [0.0667, 0.0584],
        [0.0633, 0.0616],
        [0.0616, 0.0632],
        [0.0608, 0.0641],
        [0.0616, 0.0632]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.366282
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0013],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0005, 0.0014],
        [0.0006, 0.0009],
        [0.0007, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0006, 0.0012],
        [0.0003, 0.0004],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0008, 0.0016],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0565, 0.0688],
        [0.0639, 0.0609],
        [0.0675, 0.0576],
        [0.0569, 0.0684],
        [0.0660, 0.0590],
        [0.0678, 0.0574],
        [0.0622, 0.0625],
        [0.0627, 0.0621],
        [0.0608, 0.0640],
        [0.0681, 0.0572],
        [0.0595, 0.0654],
        [0.0660, 0.0590],
        [0.0614, 0.0634],
        [0.0568, 0.0685],
        [0.0618, 0.0630],
        [0.0620, 0.0628]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.365621
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1207, 0.1294],
        [0.1220, 0.1280],
        [0.1284, 0.1217],
        [0.1231, 0.1269],
        [0.1226, 0.1273],
        [0.1291, 0.1210],
        [0.1281, 0.1219],
        [0.1260, 0.1239]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.238942
acc:  0.485
Time taken to execute the en SA task with prompt type identical_modal, variation 2 and batchsize 16: 0:00:05.103072
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_2']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([104, 2])
answers_probs just softmax dim 0: tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 3 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0005, 0.0008],
        [0.0002, 0.0006],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0611, 0.0637],
        [0.0599, 0.0650],
        [0.0643, 0.0605],
        [0.0667, 0.0584],
        [0.0609, 0.0639],
        [0.0676, 0.0576],
        [0.0609, 0.0639],
        [0.0584, 0.0667],
        [0.0637, 0.0611],
        [0.0569, 0.0684],
        [0.0627, 0.0621],
        [0.0581, 0.0670],
        [0.0675, 0.0577],
        [0.0610, 0.0638],
        [0.0618, 0.0630],
        [0.0682, 0.0571]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.297026
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0002, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0001, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0636],
        [0.0604, 0.0644],
        [0.0607, 0.0641],
        [0.0638, 0.0610],
        [0.0630, 0.0618],
        [0.0664, 0.0586],
        [0.0569, 0.0685],
        [0.0643, 0.0606],
        [0.0627, 0.0621],
        [0.0619, 0.0629],
        [0.0669, 0.0582],
        [0.0611, 0.0637],
        [0.0620, 0.0628],
        [0.0549, 0.0709],
        [0.0639, 0.0609],
        [0.0697, 0.0558]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.546711
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[7.4506e-05, 2.6417e-04],
        [2.9731e-04, 4.0960e-04],
        [3.0518e-04, 5.4407e-04],
        [3.2425e-04, 5.2214e-04],
        [3.4618e-04, 7.4434e-04],
        [2.9898e-04, 4.2510e-04],
        [3.8505e-04, 6.4468e-04],
        [5.9795e-04, 9.6321e-04],
        [2.5249e-04, 4.6468e-04],
        [2.9802e-04, 5.1498e-04],
        [2.5511e-04, 4.8780e-04],
        [2.7657e-04, 5.6791e-04],
        [2.9349e-04, 7.5531e-04],
        [3.1424e-04, 4.6420e-04],
        [4.5538e-04, 6.5231e-04],
        [6.5231e-04, 1.1091e-03]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0544, 0.0716],
        [0.0665, 0.0586],
        [0.0625, 0.0623],
        [0.0640, 0.0609],
        [0.0600, 0.0650],
        [0.0660, 0.0591],
        [0.0634, 0.0614],
        [0.0640, 0.0609],
        [0.0621, 0.0628],
        [0.0630, 0.0619],
        [0.0615, 0.0633],
        [0.0606, 0.0643],
        [0.0577, 0.0675],
        [0.0654, 0.0596],
        [0.0658, 0.0592],
        [0.0632, 0.0616]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.437999
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0010],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0002, 0.0006],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0601, 0.0649],
        [0.0599, 0.0650],
        [0.0602, 0.0647],
        [0.0643, 0.0606],
        [0.0634, 0.0615],
        [0.0664, 0.0587],
        [0.0600, 0.0649],
        [0.0646, 0.0604],
        [0.0633, 0.0616],
        [0.0580, 0.0673],
        [0.0588, 0.0663],
        [0.0640, 0.0610],
        [0.0648, 0.0602],
        [0.0674, 0.0578],
        [0.0597, 0.0652],
        [0.0652, 0.0598]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.410138
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0641, 0.0609],
        [0.0605, 0.0645],
        [0.0678, 0.0575],
        [0.0601, 0.0649],
        [0.0607, 0.0642],
        [0.0651, 0.0599],
        [0.0623, 0.0626],
        [0.0611, 0.0638],
        [0.0610, 0.0639],
        [0.0621, 0.0628],
        [0.0593, 0.0658],
        [0.0661, 0.0590],
        [0.0639, 0.0610],
        [0.0607, 0.0642],
        [0.0617, 0.0633],
        [0.0632, 0.0617]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.372403
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0656, 0.0594],
        [0.0655, 0.0596],
        [0.0621, 0.0628],
        [0.0601, 0.0649],
        [0.0618, 0.0631],
        [0.0618, 0.0631],
        [0.0602, 0.0647],
        [0.0619, 0.0630],
        [0.0569, 0.0685],
        [0.0626, 0.0623],
        [0.0600, 0.0649],
        [0.0625, 0.0624],
        [0.0672, 0.0580],
        [0.0656, 0.0594],
        [0.0638, 0.0611],
        [0.0622, 0.0627]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.451748
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0003],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0624, 0.0625],
        [0.0641, 0.0608],
        [0.0593, 0.0657],
        [0.0620, 0.0628],
        [0.0671, 0.0581],
        [0.0616, 0.0633],
        [0.0616, 0.0633],
        [0.0640, 0.0609],
        [0.0617, 0.0632],
        [0.0585, 0.0667],
        [0.0600, 0.0649],
        [0.0632, 0.0617],
        [0.0692, 0.0564],
        [0.0658, 0.0592],
        [0.0607, 0.0643],
        [0.0588, 0.0663]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.343361
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0008, 0.0010],
        [0.0002, 0.0003],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0009],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0002, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0635, 0.0613],
        [0.0679, 0.0574],
        [0.0661, 0.0589],
        [0.0613, 0.0635],
        [0.0630, 0.0619],
        [0.0656, 0.0594],
        [0.0644, 0.0605],
        [0.0637, 0.0612],
        [0.0658, 0.0592],
        [0.0617, 0.0631],
        [0.0589, 0.0661],
        [0.0599, 0.0651],
        [0.0598, 0.0652],
        [0.0630, 0.0619],
        [0.0621, 0.0627],
        [0.0535, 0.0728]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.290418
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0006, 0.0012],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0002, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0604],
        [0.0614, 0.0635],
        [0.0699, 0.0557],
        [0.0630, 0.0618],
        [0.0664, 0.0587],
        [0.0600, 0.0649],
        [0.0605, 0.0644],
        [0.0588, 0.0663],
        [0.0580, 0.0672],
        [0.0631, 0.0617],
        [0.0646, 0.0603],
        [0.0609, 0.0639],
        [0.0648, 0.0601],
        [0.0605, 0.0644],
        [0.0572, 0.0681],
        [0.0664, 0.0587]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.486179
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0010, 0.0017],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0006, 0.0018],
        [0.0002, 0.0005],
        [0.0005, 0.0012],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0010],
        [0.0007, 0.0011],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0652, 0.0598],
        [0.0616, 0.0633],
        [0.0561, 0.0695],
        [0.0617, 0.0631],
        [0.0593, 0.0657],
        [0.0635, 0.0614],
        [0.0655, 0.0595],
        [0.0647, 0.0602],
        [0.0583, 0.0669],
        [0.0623, 0.0626],
        [0.0609, 0.0640],
        [0.0602, 0.0647],
        [0.0651, 0.0599],
        [0.0657, 0.0593],
        [0.0657, 0.0594],
        [0.0643, 0.0607]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.412631
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0004],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0004, 0.0009],
        [0.0002, 0.0003],
        [0.0006, 0.0009],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0603, 0.0646],
        [0.0640, 0.0609],
        [0.0613, 0.0636],
        [0.0698, 0.0559],
        [0.0587, 0.0664],
        [0.0623, 0.0626],
        [0.0604, 0.0645],
        [0.0608, 0.0641],
        [0.0621, 0.0627],
        [0.0581, 0.0671],
        [0.0664, 0.0587],
        [0.0660, 0.0591],
        [0.0627, 0.0622],
        [0.0615, 0.0634],
        [0.0609, 0.0640],
        [0.0647, 0.0602]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.369992
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0645, 0.0605],
        [0.0595, 0.0656],
        [0.0612, 0.0637],
        [0.0619, 0.0631],
        [0.0638, 0.0611],
        [0.0668, 0.0584],
        [0.0624, 0.0625],
        [0.0603, 0.0647],
        [0.0651, 0.0599],
        [0.0636, 0.0613],
        [0.0634, 0.0616],
        [0.0603, 0.0647],
        [0.0636, 0.0613],
        [0.0597, 0.0654],
        [0.0638, 0.0611],
        [0.0599, 0.0651]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.406887
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0001],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1206, 0.1291],
        [0.1413, 0.1102],
        [0.1146, 0.1359],
        [0.1210, 0.1287],
        [0.1230, 0.1265],
        [0.1223, 0.1272],
        [0.1237, 0.1258],
        [0.1335, 0.1166]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.214979
acc:  0.45
Time taken to execute the en SA task with prompt type identical_modal, variation 3 and batchsize 16: 0:00:05.061391
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_3']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([104, 2])
answers_probs just softmax dim 0: tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 4 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0006, 0.0009],
        [0.0005, 0.0007],
        [0.0003, 0.0009],
        [0.0004, 0.0010],
        [0.0004, 0.0012],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0006, 0.0012],
        [0.0005, 0.0010],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0602, 0.0646],
        [0.0614, 0.0634],
        [0.0571, 0.0682],
        [0.0663, 0.0587],
        [0.0655, 0.0594],
        [0.0687, 0.0567],
        [0.0711, 0.0547],
        [0.0579, 0.0672],
        [0.0607, 0.0641],
        [0.0595, 0.0655],
        [0.0635, 0.0613],
        [0.0640, 0.0608],
        [0.0589, 0.0661],
        [0.0618, 0.0630],
        [0.0623, 0.0625],
        [0.0610, 0.0638]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.424297
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0008],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0007, 0.0011],
        [0.0003, 0.0006],
        [0.0007, 0.0011],
        [0.0005, 0.0009],
        [0.0003, 0.0009],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0002, 0.0007],
        [0.0006, 0.0008],
        [0.0005, 0.0011],
        [0.0005, 0.0005],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0660, 0.0589],
        [0.0664, 0.0586],
        [0.0679, 0.0573],
        [0.0656, 0.0593],
        [0.0596, 0.0653],
        [0.0656, 0.0593],
        [0.0625, 0.0622],
        [0.0549, 0.0709],
        [0.0617, 0.0631],
        [0.0604, 0.0644],
        [0.0571, 0.0681],
        [0.0565, 0.0689],
        [0.0651, 0.0597],
        [0.0604, 0.0644],
        [0.0694, 0.0561],
        [0.0611, 0.0636]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.369403
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0007, 0.0009],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0003, 0.0008],
        [0.0005, 0.0016],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0011],
        [0.0008, 0.0017],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0571, 0.0682],
        [0.0593, 0.0657],
        [0.0700, 0.0556],
        [0.0634, 0.0614],
        [0.0607, 0.0642],
        [0.0648, 0.0601],
        [0.0662, 0.0588],
        [0.0614, 0.0634],
        [0.0576, 0.0676],
        [0.0585, 0.0665],
        [0.0631, 0.0617],
        [0.0591, 0.0659],
        [0.0635, 0.0613],
        [0.0661, 0.0589],
        [0.0648, 0.0601],
        [0.0643, 0.0606]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.364066
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0005, 0.0011],
        [0.0003, 0.0004],
        [0.0005, 0.0011],
        [0.0007, 0.0017],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0626],
        [0.0579, 0.0673],
        [0.0601, 0.0649],
        [0.0634, 0.0615],
        [0.0652, 0.0598],
        [0.0647, 0.0603],
        [0.0598, 0.0652],
        [0.0615, 0.0633],
        [0.0613, 0.0636],
        [0.0646, 0.0604],
        [0.0615, 0.0634],
        [0.0595, 0.0655],
        [0.0614, 0.0635],
        [0.0695, 0.0561],
        [0.0621, 0.0628],
        [0.0649, 0.0600]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.432094
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0002, 0.0006],
        [0.0008, 0.0023],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0007, 0.0010],
        [0.0005, 0.0015],
        [0.0005, 0.0013],
        [0.0003, 0.0006],
        [0.0008, 0.0014],
        [0.0005, 0.0010],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0653],
        [0.0638, 0.0612],
        [0.0668, 0.0584],
        [0.0618, 0.0631],
        [0.0603, 0.0646],
        [0.0590, 0.0660],
        [0.0654, 0.0597],
        [0.0621, 0.0628],
        [0.0631, 0.0618],
        [0.0679, 0.0574],
        [0.0594, 0.0656],
        [0.0595, 0.0655],
        [0.0605, 0.0644],
        [0.0653, 0.0597],
        [0.0628, 0.0621],
        [0.0626, 0.0623]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.406868
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0006],
        [0.0005, 0.0008],
        [0.0006, 0.0014],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0004, 0.0013],
        [0.0006, 0.0012],
        [0.0002, 0.0005],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0590, 0.0660],
        [0.0595, 0.0654],
        [0.0641, 0.0608],
        [0.0622, 0.0626],
        [0.0630, 0.0618],
        [0.0651, 0.0598],
        [0.0589, 0.0661],
        [0.0619, 0.0629],
        [0.0719, 0.0542],
        [0.0635, 0.0613],
        [0.0658, 0.0592],
        [0.0664, 0.0586],
        [0.0547, 0.0711],
        [0.0609, 0.0639],
        [0.0607, 0.0641],
        [0.0625, 0.0622]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.410969
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0010],
        [0.0007, 0.0010],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0002, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0011],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0642, 0.0607],
        [0.0692, 0.0563],
        [0.0590, 0.0661],
        [0.0596, 0.0654],
        [0.0570, 0.0683],
        [0.0646, 0.0603],
        [0.0661, 0.0589],
        [0.0607, 0.0643],
        [0.0627, 0.0622],
        [0.0609, 0.0640],
        [0.0631, 0.0617],
        [0.0655, 0.0595],
        [0.0637, 0.0612],
        [0.0629, 0.0619],
        [0.0585, 0.0666],
        [0.0623, 0.0626]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.450623
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0006, 0.0009],
        [0.0004, 0.0007],
        [0.0007, 0.0011],
        [0.0001, 0.0005],
        [0.0004, 0.0011],
        [0.0012, 0.0015],
        [0.0006, 0.0008],
        [0.0007, 0.0013],
        [0.0004, 0.0009],
        [0.0005, 0.0008],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0615, 0.0633],
        [0.0622, 0.0625],
        [0.0603, 0.0645],
        [0.0642, 0.0606],
        [0.0625, 0.0623],
        [0.0660, 0.0590],
        [0.0638, 0.0610],
        [0.0645, 0.0603],
        [0.0537, 0.0724],
        [0.0563, 0.0691],
        [0.0690, 0.0564],
        [0.0675, 0.0576],
        [0.0635, 0.0613],
        [0.0595, 0.0654],
        [0.0650, 0.0599],
        [0.0605, 0.0643]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.553037
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0006, 0.0014],
        [0.0003, 0.0006],
        [0.0006, 0.0015],
        [0.0009, 0.0018],
        [0.0006, 0.0010],
        [0.0005, 0.0011],
        [0.0003, 0.0010],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0012],
        [0.0005, 0.0012],
        [0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0608],
        [0.0601, 0.0647],
        [0.0619, 0.0628],
        [0.0596, 0.0652],
        [0.0628, 0.0619],
        [0.0658, 0.0591],
        [0.0629, 0.0618],
        [0.0556, 0.0699],
        [0.0616, 0.0631],
        [0.0630, 0.0617],
        [0.0609, 0.0639],
        [0.0566, 0.0687],
        [0.0604, 0.0644],
        [0.0640, 0.0608],
        [0.0648, 0.0600],
        [0.0760, 0.0512]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.370457
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0009, 0.0016],
        [0.0004, 0.0009],
        [0.0005, 0.0012],
        [0.0002, 0.0003],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0007, 0.0010],
        [0.0005, 0.0015],
        [0.0003, 0.0010],
        [0.0005, 0.0011],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0631, 0.0618],
        [0.0631, 0.0618],
        [0.0609, 0.0641],
        [0.0639, 0.0611],
        [0.0609, 0.0640],
        [0.0662, 0.0589],
        [0.0631, 0.0618],
        [0.0622, 0.0627],
        [0.0632, 0.0617],
        [0.0612, 0.0637],
        [0.0648, 0.0602],
        [0.0675, 0.0577],
        [0.0594, 0.0657],
        [0.0562, 0.0694],
        [0.0617, 0.0632],
        [0.0627, 0.0622]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.486502
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0006, 0.0009],
        [0.0005, 0.0012],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0009],
        [0.0003, 0.0007],
        [0.0005, 0.0011],
        [0.0005, 0.0008],
        [0.0004, 0.0011]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0609, 0.0640],
        [0.0604, 0.0645],
        [0.0661, 0.0590],
        [0.0617, 0.0631],
        [0.0657, 0.0593],
        [0.0590, 0.0661],
        [0.0672, 0.0580],
        [0.0645, 0.0604],
        [0.0642, 0.0608],
        [0.0657, 0.0593],
        [0.0577, 0.0675],
        [0.0615, 0.0634],
        [0.0607, 0.0642],
        [0.0635, 0.0614],
        [0.0597, 0.0653]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.407043
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0006, 0.0010],
        [0.0006, 0.0014],
        [0.0005, 0.0009],
        [0.0007, 0.0013],
        [0.0006, 0.0011],
        [0.0002, 0.0005],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0008],
        [0.0006, 0.0012],
        [0.0009, 0.0014],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0632],
        [0.0614, 0.0635],
        [0.0673, 0.0580],
        [0.0660, 0.0591],
        [0.0638, 0.0611],
        [0.0610, 0.0640],
        [0.0661, 0.0589],
        [0.0634, 0.0615],
        [0.0623, 0.0626],
        [0.0598, 0.0652],
        [0.0581, 0.0671],
        [0.0584, 0.0668],
        [0.0624, 0.0625],
        [0.0618, 0.0631],
        [0.0659, 0.0592],
        [0.0606, 0.0644]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.341852
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0006, 0.0011],
        [0.0003, 0.0010],
        [0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0005, 0.0009],
        [0.0005, 0.0010],
        [0.0003, 0.0008],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1289, 0.1210],
        [0.1138, 0.1370],
        [0.1246, 0.1251],
        [0.1234, 0.1264],
        [0.1344, 0.1161],
        [0.1287, 0.1212],
        [0.1234, 0.1264],
        [0.1228, 0.1270]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.117950
acc:  0.51
Time taken to execute the en SA task with prompt type identical_modal, variation 4 and batchsize 16: 0:00:05.155961
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_4']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([105, 2])
answers_probs just softmax dim 0: tensor([[0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095]], device='cuda:0')
tensor([[0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095],
        [0.0095, 0.0095]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 5 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0004, 0.0014],
        [0.0003, 0.0007],
        [0.0006, 0.0010],
        [0.0002, 0.0004],
        [0.0001, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0001, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0649, 0.0600],
        [0.0621, 0.0628],
        [0.0597, 0.0653],
        [0.0578, 0.0674],
        [0.0620, 0.0629],
        [0.0655, 0.0595],
        [0.0616, 0.0633],
        [0.0581, 0.0671],
        [0.0608, 0.0641],
        [0.0664, 0.0587],
        [0.0665, 0.0586],
        [0.0580, 0.0672],
        [0.0646, 0.0603],
        [0.0667, 0.0584],
        [0.0630, 0.0618],
        [0.0624, 0.0625]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.438395
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0007],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0011],
        [0.0003, 0.0004],
        [0.0005, 0.0013],
        [0.0001, 0.0006],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0629],
        [0.0642, 0.0606],
        [0.0600, 0.0648],
        [0.0600, 0.0648],
        [0.0653, 0.0596],
        [0.0610, 0.0637],
        [0.0569, 0.0683],
        [0.0698, 0.0557],
        [0.0606, 0.0642],
        [0.0550, 0.0707],
        [0.0626, 0.0621],
        [0.0695, 0.0559],
        [0.0631, 0.0616],
        [0.0579, 0.0672],
        [0.0672, 0.0579],
        [0.0650, 0.0598]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.430990
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[2.8062e-04, 5.2834e-04],
        [3.1734e-04, 8.0395e-04],
        [1.9658e-04, 2.8396e-04],
        [4.4203e-04, 1.0118e-03],
        [2.7347e-04, 6.6090e-04],
        [7.4565e-05, 3.5572e-04],
        [3.5501e-04, 8.3828e-04],
        [4.2439e-04, 8.3113e-04],
        [2.1553e-04, 5.2500e-04],
        [1.9002e-04, 5.2071e-04],
        [4.1938e-04, 8.6737e-04],
        [4.1270e-04, 6.6471e-04],
        [2.3401e-04, 8.1015e-04],
        [3.0470e-04, 5.2261e-04],
        [3.4142e-04, 5.4550e-04],
        [2.3282e-04, 7.0572e-04]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0648, 0.0600],
        [0.0608, 0.0640],
        [0.0690, 0.0564],
        [0.0621, 0.0627],
        [0.0614, 0.0634],
        [0.0545, 0.0714],
        [0.0617, 0.0631],
        [0.0642, 0.0606],
        [0.0613, 0.0635],
        [0.0599, 0.0650],
        [0.0635, 0.0613],
        [0.0672, 0.0579],
        [0.0573, 0.0679],
        [0.0662, 0.0588],
        [0.0673, 0.0578],
        [0.0587, 0.0663]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.361923
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0006],
        [0.0007, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0005, 0.0009],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0591, 0.0660],
        [0.0673, 0.0579],
        [0.0628, 0.0621],
        [0.0558, 0.0698],
        [0.0636, 0.0614],
        [0.0632, 0.0617],
        [0.0614, 0.0635],
        [0.0625, 0.0624],
        [0.0591, 0.0660],
        [0.0646, 0.0604],
        [0.0632, 0.0617],
        [0.0627, 0.0622],
        [0.0645, 0.0605],
        [0.0639, 0.0610],
        [0.0627, 0.0622],
        [0.0638, 0.0611]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.409931
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0008],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0010],
        [0.0002, 0.0004],
        [0.0002, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0634, 0.0615],
        [0.0609, 0.0641],
        [0.0624, 0.0625],
        [0.0627, 0.0622],
        [0.0606, 0.0644],
        [0.0620, 0.0629],
        [0.0602, 0.0648],
        [0.0656, 0.0594],
        [0.0667, 0.0584],
        [0.0588, 0.0663],
        [0.0649, 0.0600],
        [0.0671, 0.0581],
        [0.0618, 0.0631],
        [0.0587, 0.0664],
        [0.0655, 0.0595],
        [0.0587, 0.0664]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.452875
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0004, 0.0010],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0007, 0.0014],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0006],
        [0.0002, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0595, 0.0654],
        [0.0601, 0.0648],
        [0.0615, 0.0633],
        [0.0627, 0.0621],
        [0.0633, 0.0615],
        [0.0671, 0.0580],
        [0.0615, 0.0633],
        [0.0660, 0.0590],
        [0.0623, 0.0625],
        [0.0604, 0.0644],
        [0.0580, 0.0671],
        [0.0641, 0.0608],
        [0.0696, 0.0560],
        [0.0620, 0.0628],
        [0.0672, 0.0579],
        [0.0547, 0.0712]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.363100
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0001, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0650, 0.0600],
        [0.0613, 0.0637],
        [0.0602, 0.0648],
        [0.0607, 0.0643],
        [0.0616, 0.0634],
        [0.0633, 0.0616],
        [0.0604, 0.0646],
        [0.0692, 0.0564],
        [0.0628, 0.0621],
        [0.0641, 0.0608],
        [0.0646, 0.0604],
        [0.0600, 0.0650],
        [0.0648, 0.0602],
        [0.0610, 0.0640],
        [0.0608, 0.0642],
        [0.0603, 0.0647]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.409844
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0001, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0005],
        [0.0002, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0613],
        [0.0581, 0.0671],
        [0.0601, 0.0649],
        [0.0623, 0.0626],
        [0.0634, 0.0614],
        [0.0694, 0.0562],
        [0.0604, 0.0646],
        [0.0643, 0.0606],
        [0.0617, 0.0631],
        [0.0655, 0.0595],
        [0.0616, 0.0632],
        [0.0610, 0.0639],
        [0.0634, 0.0614],
        [0.0572, 0.0681],
        [0.0626, 0.0623],
        [0.0653, 0.0597]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.554279
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0002, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0608, 0.0641],
        [0.0623, 0.0625],
        [0.0643, 0.0606],
        [0.0572, 0.0681],
        [0.0652, 0.0597],
        [0.0571, 0.0683],
        [0.0625, 0.0623],
        [0.0626, 0.0622],
        [0.0661, 0.0589],
        [0.0577, 0.0675],
        [0.0646, 0.0603],
        [0.0661, 0.0590],
        [0.0694, 0.0561],
        [0.0611, 0.0638],
        [0.0619, 0.0630],
        [0.0612, 0.0637]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.459615
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0001, 0.0004],
        [0.0004, 0.0010],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0001, 0.0004],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0605, 0.0644],
        [0.0702, 0.0555],
        [0.0646, 0.0602],
        [0.0680, 0.0572],
        [0.0588, 0.0662],
        [0.0599, 0.0650],
        [0.0683, 0.0570],
        [0.0611, 0.0637],
        [0.0602, 0.0647],
        [0.0627, 0.0621],
        [0.0664, 0.0586],
        [0.0597, 0.0652],
        [0.0605, 0.0643],
        [0.0619, 0.0629],
        [0.0576, 0.0676],
        [0.0597, 0.0652]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.407424
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0003],
        [0.0003, 0.0006],
        [0.0001, 0.0003],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0003],
        [0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0008],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0638, 0.0609],
        [0.0619, 0.0629],
        [0.0708, 0.0550],
        [0.0644, 0.0604],
        [0.0614, 0.0634],
        [0.0647, 0.0602],
        [0.0618, 0.0630],
        [0.0619, 0.0629],
        [0.0690, 0.0564],
        [0.0585, 0.0665],
        [0.0647, 0.0602],
        [0.0598, 0.0651],
        [0.0554, 0.0703],
        [0.0581, 0.0669],
        [0.0649, 0.0600],
        [0.0591, 0.0658]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.363061
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0002, 0.0005],
        [0.0005, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0657, 0.0593],
        [0.0651, 0.0599],
        [0.0638, 0.0611],
        [0.0628, 0.0621],
        [0.0619, 0.0630],
        [0.0619, 0.0630],
        [0.0642, 0.0608],
        [0.0614, 0.0635],
        [0.0597, 0.0653],
        [0.0582, 0.0670],
        [0.0632, 0.0617],
        [0.0581, 0.0671],
        [0.0676, 0.0577],
        [0.0628, 0.0621],
        [0.0604, 0.0645],
        [0.0631, 0.0618]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.405531
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0008],
        [0.0003, 0.0004],
        [0.0003, 0.0008],
        [0.0002, 0.0002],
        [0.0001, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1222, 0.1270],
        [0.1132, 0.1371],
        [0.1330, 0.1166],
        [0.1212, 0.1281],
        [0.1508, 0.1029],
        [0.1187, 0.1308],
        [0.1187, 0.1308],
        [0.1224, 0.1268]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.213817
acc:  0.425
Time taken to execute the en SA task with prompt type identical_modal, variation 5 and batchsize 16: 0:00:05.291928
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_5']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([103, 2])
answers_probs just softmax dim 0: tensor([[0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097]], device='cuda:0')
tensor([[0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 6 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0014],
        [0.0003, 0.0006],
        [0.0006, 0.0009],
        [0.0007, 0.0014],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0011, 0.0013],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0007, 0.0014],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0006, 0.0013],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0632],
        [0.0603, 0.0646],
        [0.0659, 0.0591],
        [0.0603, 0.0646],
        [0.0639, 0.0610],
        [0.0663, 0.0588],
        [0.0696, 0.0560],
        [0.0623, 0.0626],
        [0.0580, 0.0672],
        [0.0612, 0.0637],
        [0.0648, 0.0601],
        [0.0601, 0.0648],
        [0.0619, 0.0629],
        [0.0618, 0.0631],
        [0.0586, 0.0665],
        [0.0633, 0.0616]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.437529
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0010, 0.0018],
        [0.0003, 0.0011],
        [0.0006, 0.0012],
        [0.0006, 0.0009],
        [0.0005, 0.0008],
        [0.0004, 0.0011],
        [0.0006, 0.0013],
        [0.0004, 0.0011],
        [0.0003, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0006, 0.0008],
        [0.0006, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0640, 0.0609],
        [0.0636, 0.0612],
        [0.0563, 0.0692],
        [0.0616, 0.0632],
        [0.0666, 0.0584],
        [0.0654, 0.0596],
        [0.0575, 0.0677],
        [0.0601, 0.0648],
        [0.0594, 0.0655],
        [0.0600, 0.0649],
        [0.0659, 0.0591],
        [0.0614, 0.0634],
        [0.0609, 0.0639],
        [0.0625, 0.0623],
        [0.0666, 0.0585],
        [0.0679, 0.0574]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.450527
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0006, 0.0011],
        [0.0008, 0.0012],
        [0.0004, 0.0009],
        [0.0004, 0.0005],
        [0.0007, 0.0008],
        [0.0003, 0.0003],
        [0.0004, 0.0011],
        [0.0007, 0.0010],
        [0.0006, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0009],
        [0.0006, 0.0008],
        [0.0006, 0.0013],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0577, 0.0674],
        [0.0603, 0.0645],
        [0.0623, 0.0624],
        [0.0628, 0.0620],
        [0.0591, 0.0659],
        [0.0658, 0.0591],
        [0.0680, 0.0572],
        [0.0734, 0.0530],
        [0.0553, 0.0704],
        [0.0639, 0.0608],
        [0.0641, 0.0607],
        [0.0615, 0.0632],
        [0.0600, 0.0648],
        [0.0647, 0.0601],
        [0.0585, 0.0665],
        [0.0629, 0.0619]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.365071
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0005, 0.0008],
        [0.0007, 0.0014],
        [0.0004, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0006, 0.0010],
        [0.0005, 0.0010],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0002, 0.0003],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0663, 0.0588],
        [0.0640, 0.0610],
        [0.0605, 0.0644],
        [0.0649, 0.0601],
        [0.0672, 0.0580],
        [0.0599, 0.0651],
        [0.0620, 0.0629],
        [0.0626, 0.0623],
        [0.0586, 0.0665],
        [0.0606, 0.0643],
        [0.0610, 0.0639],
        [0.0683, 0.0570],
        [0.0614, 0.0635],
        [0.0602, 0.0647],
        [0.0616, 0.0633],
        [0.0607, 0.0642]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.434192
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0004, 0.0006],
        [0.0006, 0.0010],
        [0.0006, 0.0011],
        [0.0003, 0.0006],
        [0.0006, 0.0016],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0691, 0.0564],
        [0.0625, 0.0623],
        [0.0627, 0.0621],
        [0.0591, 0.0659],
        [0.0581, 0.0671],
        [0.0653, 0.0596],
        [0.0620, 0.0629],
        [0.0625, 0.0623],
        [0.0582, 0.0669],
        [0.0572, 0.0681],
        [0.0605, 0.0643],
        [0.0661, 0.0589],
        [0.0669, 0.0583],
        [0.0609, 0.0640],
        [0.0624, 0.0624],
        [0.0665, 0.0586]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.363566
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0009],
        [0.0006, 0.0011],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0006, 0.0013],
        [0.0011, 0.0021],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0009],
        [0.0002, 0.0005],
        [0.0004, 0.0008],
        [0.0007, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0588],
        [0.0627, 0.0623],
        [0.0644, 0.0606],
        [0.0617, 0.0632],
        [0.0654, 0.0597],
        [0.0623, 0.0626],
        [0.0593, 0.0658],
        [0.0621, 0.0628],
        [0.0616, 0.0634],
        [0.0630, 0.0619],
        [0.0652, 0.0598],
        [0.0602, 0.0648],
        [0.0584, 0.0668],
        [0.0602, 0.0648],
        [0.0620, 0.0629],
        [0.0651, 0.0599]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.410027
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0009, 0.0015],
        [0.0006, 0.0012],
        [0.0005, 0.0015],
        [0.0004, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0009],
        [0.0005, 0.0008],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0011],
        [0.0003, 0.0006],
        [0.0005, 0.0014],
        [0.0004, 0.0006],
        [0.0006, 0.0011],
        [0.0008, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0637, 0.0611],
        [0.0610, 0.0638],
        [0.0555, 0.0701],
        [0.0675, 0.0576],
        [0.0632, 0.0615],
        [0.0611, 0.0637],
        [0.0647, 0.0602],
        [0.0656, 0.0593],
        [0.0642, 0.0606],
        [0.0665, 0.0585],
        [0.0574, 0.0678],
        [0.0603, 0.0645],
        [0.0558, 0.0697],
        [0.0627, 0.0621],
        [0.0620, 0.0628],
        [0.0686, 0.0567]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.405024
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0008],
        [0.0004, 0.0009],
        [0.0007, 0.0012],
        [0.0005, 0.0005],
        [0.0002, 0.0005],
        [0.0008, 0.0014],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0006, 0.0014],
        [0.0005, 0.0006],
        [0.0006, 0.0011],
        [0.0004, 0.0011],
        [0.0006, 0.0011],
        [0.0006, 0.0011],
        [0.0007, 0.0012],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0619, 0.0630],
        [0.0589, 0.0662],
        [0.0631, 0.0618],
        [0.0703, 0.0554],
        [0.0611, 0.0638],
        [0.0626, 0.0622],
        [0.0623, 0.0625],
        [0.0649, 0.0601],
        [0.0585, 0.0666],
        [0.0675, 0.0577],
        [0.0635, 0.0614],
        [0.0566, 0.0688],
        [0.0628, 0.0621],
        [0.0608, 0.0641],
        [0.0633, 0.0615],
        [0.0620, 0.0629]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.460208
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0007, 0.0013],
        [0.0004, 0.0008],
        [0.0006, 0.0011],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0009, 0.0011],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0006, 0.0011],
        [0.0006, 0.0011],
        [0.0004, 0.0008],
        [0.0003, 0.0005],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0633],
        [0.0616, 0.0634],
        [0.0622, 0.0627],
        [0.0624, 0.0625],
        [0.0636, 0.0614],
        [0.0609, 0.0640],
        [0.0615, 0.0635],
        [0.0604, 0.0646],
        [0.0690, 0.0565],
        [0.0600, 0.0650],
        [0.0643, 0.0607],
        [0.0632, 0.0617],
        [0.0627, 0.0623],
        [0.0615, 0.0635],
        [0.0632, 0.0617],
        [0.0618, 0.0632]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.560546
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0008, 0.0012],
        [0.0003, 0.0009],
        [0.0002, 0.0004],
        [0.0005, 0.0012],
        [0.0006, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0004, 0.0010],
        [0.0006, 0.0006],
        [0.0007, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0648, 0.0601],
        [0.0580, 0.0671],
        [0.0599, 0.0650],
        [0.0592, 0.0657],
        [0.0694, 0.0561],
        [0.0654, 0.0595],
        [0.0632, 0.0615],
        [0.0611, 0.0637],
        [0.0589, 0.0661],
        [0.0580, 0.0671],
        [0.0661, 0.0588],
        [0.0602, 0.0646],
        [0.0613, 0.0634],
        [0.0584, 0.0666],
        [0.0702, 0.0554],
        [0.0659, 0.0591]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.409932
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0006, 0.0015],
        [0.0005, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0006, 0.0012],
        [0.0006, 0.0009],
        [0.0002, 0.0005],
        [0.0007, 0.0010],
        [0.0003, 0.0006],
        [0.0009, 0.0026],
        [0.0005, 0.0007],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0005, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0643],
        [0.0600, 0.0649],
        [0.0675, 0.0577],
        [0.0637, 0.0611],
        [0.0635, 0.0613],
        [0.0643, 0.0606],
        [0.0622, 0.0627],
        [0.0652, 0.0598],
        [0.0603, 0.0646],
        [0.0673, 0.0579],
        [0.0642, 0.0607],
        [0.0575, 0.0677],
        [0.0663, 0.0588],
        [0.0577, 0.0675],
        [0.0591, 0.0659],
        [0.0605, 0.0644]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.415508
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0006, 0.0007],
        [0.0002, 0.0004],
        [0.0005, 0.0011],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0007],
        [0.0006, 0.0009],
        [0.0004, 0.0007],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0637],
        [0.0655, 0.0594],
        [0.0680, 0.0573],
        [0.0625, 0.0624],
        [0.0669, 0.0582],
        [0.0620, 0.0628],
        [0.0594, 0.0656],
        [0.0651, 0.0599],
        [0.0616, 0.0632],
        [0.0644, 0.0604],
        [0.0605, 0.0644],
        [0.0625, 0.0624],
        [0.0552, 0.0706],
        [0.0646, 0.0603],
        [0.0634, 0.0615],
        [0.0573, 0.0679]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.325554
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0001, 0.0006],
        [0.0005, 0.0008],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1233, 0.1263],
        [0.1270, 0.1225],
        [0.1376, 0.1131],
        [0.1263, 0.1232],
        [0.1206, 0.1291],
        [0.1088, 0.1430],
        [0.1275, 0.1221],
        [0.1289, 0.1208]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.157400
acc:  0.435
Time taken to execute the en SA task with prompt type identical_modal, variation 6 and batchsize 16: 0:00:05.215903
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_6']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([104, 2])
answers_probs just softmax dim 0: tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 7 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0008],
        [0.0003, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0587],
        [0.0674, 0.0578],
        [0.0619, 0.0629],
        [0.0591, 0.0659],
        [0.0586, 0.0665],
        [0.0652, 0.0598],
        [0.0666, 0.0585],
        [0.0564, 0.0690],
        [0.0616, 0.0633],
        [0.0603, 0.0646],
        [0.0635, 0.0614],
        [0.0651, 0.0598],
        [0.0605, 0.0644],
        [0.0621, 0.0627],
        [0.0643, 0.0606],
        [0.0609, 0.0640]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.414763
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0009],
        [0.0006, 0.0013],
        [0.0006, 0.0011],
        [0.0005, 0.0008],
        [0.0004, 0.0004],
        [0.0003, 0.0002],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0005, 0.0012],
        [0.0009, 0.0015],
        [0.0005, 0.0009],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0564, 0.0688],
        [0.0600, 0.0647],
        [0.0628, 0.0618],
        [0.0636, 0.0610],
        [0.0708, 0.0549],
        [0.0765, 0.0508],
        [0.0647, 0.0600],
        [0.0591, 0.0657],
        [0.0599, 0.0649],
        [0.0590, 0.0658],
        [0.0635, 0.0611],
        [0.0629, 0.0618],
        [0.0630, 0.0617],
        [0.0563, 0.0689],
        [0.0632, 0.0615],
        [0.0583, 0.0667]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.429805
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0006, 0.0011],
        [0.0004, 0.0007],
        [0.0004, 0.0011],
        [0.0002, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0005, 0.0005],
        [0.0002, 0.0004],
        [0.0006, 0.0010],
        [0.0007, 0.0011],
        [0.0005, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0002, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0663, 0.0587],
        [0.0616, 0.0632],
        [0.0627, 0.0621],
        [0.0571, 0.0682],
        [0.0579, 0.0673],
        [0.0611, 0.0637],
        [0.0611, 0.0638],
        [0.0599, 0.0651],
        [0.0716, 0.0544],
        [0.0633, 0.0615],
        [0.0629, 0.0620],
        [0.0641, 0.0607],
        [0.0640, 0.0609],
        [0.0653, 0.0596],
        [0.0623, 0.0625],
        [0.0588, 0.0663]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.460195
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0005, 0.0007],
        [0.0003, 0.0004],
        [0.0004, 0.0007],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0004, 0.0006],
        [0.0001, 0.0005],
        [0.0004, 0.0006],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0005, 0.0006],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0626, 0.0622],
        [0.0605, 0.0643],
        [0.0607, 0.0641],
        [0.0583, 0.0668],
        [0.0666, 0.0584],
        [0.0655, 0.0594],
        [0.0641, 0.0607],
        [0.0591, 0.0659],
        [0.0657, 0.0592],
        [0.0642, 0.0606],
        [0.0520, 0.0748],
        [0.0619, 0.0628],
        [0.0653, 0.0595],
        [0.0665, 0.0585],
        [0.0660, 0.0590],
        [0.0609, 0.0639]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.239954
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0007],
        [0.0002, 0.0003],
        [0.0007, 0.0011],
        [0.0003, 0.0004],
        [0.0005, 0.0011],
        [0.0005, 0.0008],
        [0.0004, 0.0013],
        [0.0005, 0.0009],
        [0.0007, 0.0011],
        [0.0003, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0004, 0.0009],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0609, 0.0640],
        [0.0608, 0.0641],
        [0.0691, 0.0564],
        [0.0657, 0.0593],
        [0.0648, 0.0602],
        [0.0618, 0.0630],
        [0.0648, 0.0602],
        [0.0562, 0.0693],
        [0.0624, 0.0625],
        [0.0658, 0.0592],
        [0.0599, 0.0651],
        [0.0611, 0.0638],
        [0.0600, 0.0650],
        [0.0651, 0.0598],
        [0.0603, 0.0647],
        [0.0614, 0.0635]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.411737
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0010],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0002, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0618, 0.0631],
        [0.0630, 0.0619],
        [0.0610, 0.0639],
        [0.0575, 0.0679],
        [0.0644, 0.0606],
        [0.0635, 0.0614],
        [0.0618, 0.0631],
        [0.0667, 0.0585],
        [0.0641, 0.0608],
        [0.0648, 0.0602],
        [0.0589, 0.0662],
        [0.0653, 0.0597],
        [0.0596, 0.0655],
        [0.0641, 0.0608],
        [0.0639, 0.0610],
        [0.0596, 0.0654]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.555497
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0007, 0.0012],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0007],
        [0.0007, 0.0022],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0628, 0.0621],
        [0.0603, 0.0647],
        [0.0634, 0.0615],
        [0.0651, 0.0599],
        [0.0630, 0.0619],
        [0.0584, 0.0667],
        [0.0592, 0.0659],
        [0.0629, 0.0620],
        [0.0574, 0.0679],
        [0.0626, 0.0623],
        [0.0653, 0.0597],
        [0.0658, 0.0592],
        [0.0658, 0.0592],
        [0.0638, 0.0611],
        [0.0637, 0.0612],
        [0.0603, 0.0646]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.434204
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0005, 0.0006],
        [0.0005, 0.0011],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0002, 0.0005],
        [0.0006, 0.0009],
        [0.0003, 0.0010],
        [0.0005, 0.0011],
        [0.0003, 0.0010],
        [0.0005, 0.0009],
        [0.0005, 0.0009],
        [0.0004, 0.0012],
        [0.0003, 0.0004],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0616, 0.0632],
        [0.0688, 0.0566],
        [0.0629, 0.0619],
        [0.0638, 0.0611],
        [0.0624, 0.0624],
        [0.0594, 0.0656],
        [0.0600, 0.0649],
        [0.0669, 0.0582],
        [0.0575, 0.0677],
        [0.0615, 0.0633],
        [0.0575, 0.0677],
        [0.0643, 0.0605],
        [0.0653, 0.0597],
        [0.0579, 0.0672],
        [0.0682, 0.0571],
        [0.0620, 0.0628]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.365437
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0004],
        [0.0004, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0009],
        [0.0007, 0.0012],
        [0.0006, 0.0007],
        [0.0003, 0.0007],
        [0.0009, 0.0010],
        [0.0009, 0.0017],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0650],
        [0.0606, 0.0642],
        [0.0666, 0.0585],
        [0.0612, 0.0637],
        [0.0599, 0.0650],
        [0.0626, 0.0622],
        [0.0627, 0.0621],
        [0.0661, 0.0589],
        [0.0582, 0.0669],
        [0.0597, 0.0653],
        [0.0639, 0.0610],
        [0.0692, 0.0563],
        [0.0579, 0.0672],
        [0.0689, 0.0565],
        [0.0608, 0.0640],
        [0.0617, 0.0631]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.408367
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0008],
        [0.0004, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0002, 0.0008],
        [0.0004, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0664, 0.0586],
        [0.0644, 0.0605],
        [0.0604, 0.0645],
        [0.0625, 0.0623],
        [0.0632, 0.0616],
        [0.0650, 0.0599],
        [0.0605, 0.0644],
        [0.0620, 0.0628],
        [0.0653, 0.0596],
        [0.0622, 0.0626],
        [0.0560, 0.0696],
        [0.0651, 0.0598],
        [0.0630, 0.0618],
        [0.0628, 0.0620],
        [0.0541, 0.0720],
        [0.0672, 0.0579]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.367394
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0003, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0005, 0.0009],
        [0.0005, 0.0007],
        [0.0003, 0.0007],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0676, 0.0576],
        [0.0615, 0.0633],
        [0.0580, 0.0671],
        [0.0615, 0.0633],
        [0.0623, 0.0625],
        [0.0587, 0.0664],
        [0.0663, 0.0587],
        [0.0590, 0.0660],
        [0.0670, 0.0582],
        [0.0688, 0.0566],
        [0.0647, 0.0602],
        [0.0578, 0.0673],
        [0.0610, 0.0639],
        [0.0651, 0.0598],
        [0.0590, 0.0660],
        [0.0617, 0.0631]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.342731
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0006, 0.0010],
        [0.0003, 0.0008],
        [0.0004, 0.0005],
        [0.0004, 0.0010],
        [0.0005, 0.0008],
        [0.0005, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0006],
        [0.0003, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0567, 0.0686],
        [0.0641, 0.0607],
        [0.0605, 0.0643],
        [0.0628, 0.0620],
        [0.0630, 0.0618],
        [0.0616, 0.0632],
        [0.0628, 0.0620],
        [0.0584, 0.0666],
        [0.0703, 0.0553],
        [0.0590, 0.0660],
        [0.0659, 0.0591],
        [0.0675, 0.0576],
        [0.0627, 0.0621],
        [0.0610, 0.0638],
        [0.0559, 0.0697],
        [0.0679, 0.0573]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.362742
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0005, 0.0006],
        [0.0007, 0.0009],
        [0.0004, 0.0011],
        [0.0003, 0.0005],
        [0.0008, 0.0012],
        [0.0004, 0.0012],
        [0.0008, 0.0013]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1189, 0.1308],
        [0.1356, 0.1147],
        [0.1358, 0.1145],
        [0.1145, 0.1359],
        [0.1217, 0.1278],
        [0.1303, 0.1194],
        [0.1145, 0.1359],
        [0.1286, 0.1209]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.180468
acc:  0.395
Time taken to execute the en SA task with prompt type identical_modal, variation 7 and batchsize 16: 0:00:04.995271
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_7']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([103, 2])
answers_probs just softmax dim 0: tensor([[0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097]], device='cuda:0')
tensor([[0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097],
        [0.0097, 0.0097]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 8 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0003, 0.0006],
        [0.0006, 0.0011],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0011, 0.0017],
        [0.0004, 0.0007],
        [0.0005, 0.0008],
        [0.0005, 0.0009],
        [0.0006, 0.0009],
        [0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0006, 0.0010],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0570, 0.0685],
        [0.0585, 0.0667],
        [0.0602, 0.0648],
        [0.0649, 0.0601],
        [0.0635, 0.0614],
        [0.0641, 0.0609],
        [0.0646, 0.0604],
        [0.0621, 0.0628],
        [0.0644, 0.0605],
        [0.0631, 0.0618],
        [0.0624, 0.0625],
        [0.0652, 0.0599],
        [0.0597, 0.0653],
        [0.0635, 0.0614],
        [0.0641, 0.0609],
        [0.0628, 0.0621]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.411280
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0002, 0.0004],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0006, 0.0012],
        [0.0004, 0.0009],
        [0.0006, 0.0008],
        [0.0005, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0658],
        [0.0616, 0.0634],
        [0.0613, 0.0637],
        [0.0638, 0.0612],
        [0.0630, 0.0620],
        [0.0610, 0.0639],
        [0.0631, 0.0618],
        [0.0645, 0.0605],
        [0.0598, 0.0652],
        [0.0619, 0.0631],
        [0.0611, 0.0638],
        [0.0632, 0.0617],
        [0.0621, 0.0628],
        [0.0617, 0.0633],
        [0.0670, 0.0583],
        [0.0656, 0.0595]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.334044
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0009],
        [0.0007, 0.0013],
        [0.0004, 0.0016],
        [0.0004, 0.0007],
        [0.0006, 0.0008],
        [0.0004, 0.0012],
        [0.0009, 0.0017],
        [0.0005, 0.0010],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0007, 0.0009],
        [0.0004, 0.0008],
        [0.0005, 0.0009],
        [0.0008, 0.0012],
        [0.0004, 0.0009],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0625],
        [0.0628, 0.0620],
        [0.0550, 0.0709],
        [0.0622, 0.0627],
        [0.0676, 0.0576],
        [0.0574, 0.0678],
        [0.0624, 0.0624],
        [0.0609, 0.0640],
        [0.0623, 0.0625],
        [0.0617, 0.0631],
        [0.0697, 0.0558],
        [0.0611, 0.0637],
        [0.0626, 0.0622],
        [0.0661, 0.0589],
        [0.0612, 0.0636],
        [0.0648, 0.0601]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.368686
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0003],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0004, 0.0007],
        [0.0005, 0.0010],
        [0.0004, 0.0010],
        [0.0003, 0.0005],
        [0.0006, 0.0010],
        [0.0002, 0.0004],
        [0.0007, 0.0011],
        [0.0004, 0.0010],
        [0.0003, 0.0007],
        [0.0006, 0.0012]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0642, 0.0606],
        [0.0663, 0.0587],
        [0.0608, 0.0640],
        [0.0740, 0.0526],
        [0.0602, 0.0647],
        [0.0629, 0.0619],
        [0.0639, 0.0609],
        [0.0608, 0.0640],
        [0.0576, 0.0675],
        [0.0654, 0.0595],
        [0.0623, 0.0624],
        [0.0589, 0.0661],
        [0.0652, 0.0597],
        [0.0582, 0.0669],
        [0.0582, 0.0669],
        [0.0611, 0.0637]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.411586
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0006],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0006, 0.0012],
        [0.0005, 0.0007],
        [0.0003, 0.0010],
        [0.0005, 0.0010],
        [0.0005, 0.0008],
        [0.0004, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0010],
        [0.0005, 0.0012],
        [0.0003, 0.0008],
        [0.0009, 0.0012],
        [0.0006, 0.0015]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0684, 0.0569],
        [0.0640, 0.0609],
        [0.0602, 0.0647],
        [0.0655, 0.0594],
        [0.0623, 0.0625],
        [0.0653, 0.0597],
        [0.0566, 0.0688],
        [0.0621, 0.0627],
        [0.0652, 0.0598],
        [0.0640, 0.0609],
        [0.0593, 0.0656],
        [0.0609, 0.0639],
        [0.0593, 0.0656],
        [0.0590, 0.0661],
        [0.0686, 0.0568],
        [0.0593, 0.0657]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.325580
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0010, 0.0018],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0001, 0.0005],
        [0.0005, 0.0011],
        [0.0005, 0.0009],
        [0.0006, 0.0014],
        [0.0005, 0.0010],
        [0.0009, 0.0024],
        [0.0004, 0.0008],
        [0.0006, 0.0010],
        [0.0002, 0.0005],
        [0.0003, 0.0007],
        [0.0007, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0625, 0.0624],
        [0.0612, 0.0636],
        [0.0653, 0.0597],
        [0.0591, 0.0659],
        [0.0664, 0.0587],
        [0.0558, 0.0698],
        [0.0622, 0.0627],
        [0.0651, 0.0599],
        [0.0619, 0.0630],
        [0.0643, 0.0606],
        [0.0588, 0.0663],
        [0.0623, 0.0626],
        [0.0658, 0.0592],
        [0.0615, 0.0633],
        [0.0599, 0.0651],
        [0.0680, 0.0573]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.315679
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0008, 0.0013],
        [0.0005, 0.0009],
        [0.0008, 0.0011],
        [0.0002, 0.0008],
        [0.0006, 0.0010],
        [0.0004, 0.0006],
        [0.0005, 0.0010],
        [0.0004, 0.0011],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0646, 0.0603],
        [0.0638, 0.0611],
        [0.0616, 0.0632],
        [0.0659, 0.0591],
        [0.0544, 0.0716],
        [0.0625, 0.0623],
        [0.0622, 0.0626],
        [0.0609, 0.0640],
        [0.0561, 0.0695],
        [0.0656, 0.0594],
        [0.0629, 0.0620],
        [0.0611, 0.0638],
        [0.0657, 0.0592],
        [0.0673, 0.0579],
        [0.0632, 0.0616],
        [0.0624, 0.0624]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.431574
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0006, 0.0012],
        [0.0003, 0.0005],
        [0.0006, 0.0008],
        [0.0006, 0.0011],
        [0.0005, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0003],
        [0.0005, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0006, 0.0008],
        [0.0003, 0.0005],
        [0.0004, 0.0008],
        [0.0004, 0.0008],
        [0.0003, 0.0004],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0593, 0.0657],
        [0.0610, 0.0639],
        [0.0655, 0.0595],
        [0.0602, 0.0647],
        [0.0673, 0.0579],
        [0.0598, 0.0652],
        [0.0705, 0.0552],
        [0.0655, 0.0595],
        [0.0618, 0.0630],
        [0.0619, 0.0629],
        [0.0646, 0.0603],
        [0.0593, 0.0657],
        [0.0601, 0.0648],
        [0.0597, 0.0653],
        [0.0638, 0.0611],
        [0.0596, 0.0654]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.261072
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0007],
        [0.0008, 0.0009],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0007, 0.0010],
        [0.0005, 0.0008],
        [0.0002, 0.0005],
        [0.0003, 0.0005],
        [0.0008, 0.0016],
        [0.0004, 0.0012],
        [0.0006, 0.0012],
        [0.0006, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0006],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0596, 0.0654],
        [0.0689, 0.0566],
        [0.0600, 0.0650],
        [0.0641, 0.0608],
        [0.0627, 0.0622],
        [0.0655, 0.0594],
        [0.0649, 0.0600],
        [0.0586, 0.0665],
        [0.0627, 0.0622],
        [0.0614, 0.0635],
        [0.0566, 0.0689],
        [0.0605, 0.0644],
        [0.0628, 0.0620],
        [0.0607, 0.0642],
        [0.0672, 0.0580],
        [0.0639, 0.0610]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.427820
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0005, 0.0006],
        [0.0002, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0009],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0005, 0.0008],
        [0.0006, 0.0011],
        [0.0007, 0.0012],
        [0.0006, 0.0011],
        [0.0005, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0654],
        [0.0615, 0.0635],
        [0.0625, 0.0625],
        [0.0679, 0.0575],
        [0.0594, 0.0658],
        [0.0623, 0.0626],
        [0.0642, 0.0608],
        [0.0637, 0.0612],
        [0.0641, 0.0609],
        [0.0619, 0.0631],
        [0.0613, 0.0636],
        [0.0638, 0.0611],
        [0.0617, 0.0633],
        [0.0627, 0.0623],
        [0.0620, 0.0629],
        [0.0615, 0.0635]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.461536
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0005, 0.0007],
        [0.0004, 0.0008],
        [0.0006, 0.0007],
        [0.0010, 0.0017],
        [0.0004, 0.0007],
        [0.0006, 0.0010],
        [0.0005, 0.0010],
        [0.0004, 0.0008],
        [0.0006, 0.0008],
        [0.0004, 0.0008]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0617, 0.0632],
        [0.0576, 0.0677],
        [0.0644, 0.0605],
        [0.0618, 0.0631],
        [0.0661, 0.0589],
        [0.0615, 0.0633],
        [0.0658, 0.0593],
        [0.0599, 0.0651],
        [0.0684, 0.0570],
        [0.0627, 0.0622],
        [0.0634, 0.0615],
        [0.0629, 0.0620],
        [0.0593, 0.0657],
        [0.0604, 0.0646],
        [0.0657, 0.0594],
        [0.0586, 0.0666]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.560224
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0006],
        [0.0004, 0.0008],
        [0.0004, 0.0010],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0006, 0.0011],
        [0.0006, 0.0008],
        [0.0004, 0.0005],
        [0.0006, 0.0013],
        [0.0005, 0.0009],
        [0.0004, 0.0004],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0003, 0.0006]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0598, 0.0653],
        [0.0622, 0.0627],
        [0.0587, 0.0665],
        [0.0635, 0.0614],
        [0.0618, 0.0631],
        [0.0602, 0.0648],
        [0.0638, 0.0611],
        [0.0614, 0.0635],
        [0.0678, 0.0575],
        [0.0655, 0.0595],
        [0.0599, 0.0651],
        [0.0624, 0.0624],
        [0.0676, 0.0577],
        [0.0629, 0.0620],
        [0.0611, 0.0638],
        [0.0613, 0.0636]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.419278
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[0.0004, 0.0010],
        [0.0002, 0.0002],
        [0.0005, 0.0006],
        [0.0006, 0.0008],
        [0.0004, 0.0010],
        [0.0005, 0.0011],
        [0.0004, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1249],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1166, 0.1335],
        [0.1356, 0.1148],
        [0.1337, 0.1164],
        [0.1292, 0.1204],
        [0.1156, 0.1346],
        [0.1156, 0.1346],
        [0.1317, 0.1182],
        [0.1221, 0.1275]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.157931
acc:  0.455
Time taken to execute the en SA task with prompt type identical_modal, variation 8 and batchsize 16: 0:00:04.908405
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_8']
probs_ shape 2 torch.Size([1, 1])
probs_ shape 2 torch.Size([1, 1])
answers_probs before norm: tensor([[0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001],
        [0.0001, 0.0001]], device='cuda:0') torch.Size([104, 2])
answers_probs just softmax dim 0: tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
tensor([[0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096],
        [0.0096, 0.0096]], device='cuda:0')
----------- 42 en bigscience/bloom-7b1 SA identical_modal 9 200 16 --------------
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0006, 0.0008],
        [0.0007, 0.0013],
        [0.0004, 0.0009],
        [0.0004, 0.0008],
        [0.0002, 0.0005],
        [0.0002, 0.0003],
        [0.0005, 0.0008],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0003],
        [0.0003, 0.0008],
        [0.0002, 0.0004],
        [0.0005, 0.0009],
        [0.0002, 0.0005],
        [0.0006, 0.0010]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0597, 0.0653],
        [0.0674, 0.0578],
        [0.0626, 0.0622],
        [0.0597, 0.0653],
        [0.0612, 0.0637],
        [0.0593, 0.0657],
        [0.0646, 0.0603],
        [0.0660, 0.0590],
        [0.0602, 0.0647],
        [0.0599, 0.0651],
        [0.0710, 0.0549],
        [0.0593, 0.0657],
        [0.0608, 0.0641],
        [0.0628, 0.0620],
        [0.0602, 0.0647],
        [0.0654, 0.0596]], device='cuda:0')
 Batch: 0 of identical_modal classification Duration: 0:00:00.351580
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0002, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0008],
        [0.0003, 0.0004],
        [0.0002, 0.0006],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0007],
        [0.0003, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0004]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0612, 0.0635],
        [0.0585, 0.0665],
        [0.0647, 0.0601],
        [0.0556, 0.0699],
        [0.0656, 0.0592],
        [0.0648, 0.0600],
        [0.0590, 0.0659],
        [0.0641, 0.0607],
        [0.0586, 0.0664],
        [0.0674, 0.0577],
        [0.0662, 0.0587],
        [0.0647, 0.0601],
        [0.0551, 0.0706],
        [0.0599, 0.0649],
        [0.0649, 0.0599],
        [0.0697, 0.0558]], device='cuda:0')
 Batch: 1 of identical_modal classification Duration: 0:00:00.487397
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0003, 0.0007],
        [0.0004, 0.0008],
        [0.0003, 0.0006],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0695, 0.0560],
        [0.0616, 0.0632],
        [0.0687, 0.0567],
        [0.0619, 0.0630],
        [0.0611, 0.0638],
        [0.0597, 0.0653],
        [0.0604, 0.0645],
        [0.0616, 0.0632],
        [0.0623, 0.0626],
        [0.0645, 0.0605],
        [0.0599, 0.0651],
        [0.0606, 0.0643],
        [0.0587, 0.0664],
        [0.0606, 0.0643],
        [0.0625, 0.0623],
        [0.0663, 0.0588]], device='cuda:0')
 Batch: 2 of identical_modal classification Duration: 0:00:00.327500
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0006],
        [0.0005, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0007],
        [0.0004, 0.0007],
        [0.0008, 0.0012],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0003, 0.0004],
        [0.0002, 0.0004],
        [0.0002, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0006, 0.0010],
        [0.0005, 0.0009],
        [0.0003, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0627, 0.0621],
        [0.0623, 0.0626],
        [0.0573, 0.0680],
        [0.0600, 0.0649],
        [0.0649, 0.0601],
        [0.0686, 0.0568],
        [0.0645, 0.0604],
        [0.0661, 0.0590],
        [0.0618, 0.0630],
        [0.0597, 0.0653],
        [0.0592, 0.0658],
        [0.0654, 0.0596],
        [0.0619, 0.0629],
        [0.0624, 0.0625],
        [0.0591, 0.0659]], device='cuda:0')
 Batch: 3 of identical_modal classification Duration: 0:00:00.550361
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0010],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0006, 0.0010],
        [0.0005, 0.0009],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0002, 0.0002],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0006, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0639, 0.0610],
        [0.0618, 0.0631],
        [0.0572, 0.0681],
        [0.0606, 0.0643],
        [0.0618, 0.0631],
        [0.0615, 0.0634],
        [0.0616, 0.0633],
        [0.0604, 0.0646],
        [0.0627, 0.0622],
        [0.0627, 0.0622],
        [0.0639, 0.0610],
        [0.0620, 0.0629],
        [0.0702, 0.0555],
        [0.0603, 0.0647],
        [0.0644, 0.0605],
        [0.0650, 0.0600]], device='cuda:0')
 Batch: 4 of identical_modal classification Duration: 0:00:00.343651
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0004],
        [0.0001, 0.0004],
        [0.0004, 0.0007],
        [0.0005, 0.0009],
        [0.0004, 0.0006],
        [0.0005, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0006, 0.0016],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0003]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0626],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0651, 0.0598],
        [0.0581, 0.0670],
        [0.0624, 0.0624],
        [0.0612, 0.0636],
        [0.0664, 0.0586],
        [0.0647, 0.0602],
        [0.0657, 0.0593],
        [0.0618, 0.0630],
        [0.0610, 0.0638],
        [0.0598, 0.0652],
        [0.0693, 0.0562],
        [0.0561, 0.0694],
        [0.0587, 0.0664],
        [0.0607, 0.0642],
        [0.0618, 0.0630],
        [0.0673, 0.0579]], device='cuda:0')
 Batch: 5 of identical_modal classification Duration: 0:00:00.451550
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0003, 0.0005],
        [0.0005, 0.0011],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0004, 0.0007],
        [0.0005, 0.0013],
        [0.0002, 0.0004],
        [0.0003, 0.0006],
        [0.0004, 0.0006],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0623, 0.0626],
        [0.0597, 0.0654],
        [0.0606, 0.0644],
        [0.0647, 0.0603],
        [0.0636, 0.0613],
        [0.0652, 0.0599],
        [0.0580, 0.0673],
        [0.0621, 0.0628],
        [0.0598, 0.0653],
        [0.0643, 0.0607],
        [0.0611, 0.0638],
        [0.0640, 0.0610],
        [0.0620, 0.0629],
        [0.0673, 0.0580],
        [0.0616, 0.0634],
        [0.0638, 0.0611]], device='cuda:0')
 Batch: 6 of identical_modal classification Duration: 0:00:00.417206
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0004, 0.0007],
        [0.0004, 0.0009],
        [0.0003, 0.0006],
        [0.0003, 0.0007],
        [0.0003, 0.0007],
        [0.0005, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0005],
        [0.0002, 0.0004],
        [0.0002, 0.0004],
        [0.0004, 0.0005],
        [0.0004, 0.0007],
        [0.0001, 0.0003],
        [0.0002, 0.0002],
        [0.0002, 0.0005],
        [0.0004, 0.0009]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0613, 0.0636],
        [0.0584, 0.0667],
        [0.0611, 0.0638],
        [0.0610, 0.0639],
        [0.0594, 0.0655],
        [0.0665, 0.0586],
        [0.0647, 0.0603],
        [0.0601, 0.0648],
        [0.0650, 0.0599],
        [0.0643, 0.0606],
        [0.0690, 0.0565],
        [0.0638, 0.0610],
        [0.0572, 0.0682],
        [0.0668, 0.0584],
        [0.0599, 0.0650],
        [0.0616, 0.0633]], device='cuda:0')
 Batch: 7 of identical_modal classification Duration: 0:00:00.366005
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0004],
        [0.0004, 0.0008],
        [0.0005, 0.0008],
        [0.0004, 0.0008],
        [0.0004, 0.0006],
        [0.0003, 0.0009],
        [0.0003, 0.0004],
        [0.0007, 0.0010],
        [0.0003, 0.0006],
        [0.0004, 0.0005],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0004, 0.0006],
        [0.0005, 0.0006],
        [0.0003, 0.0005],
        [0.0004, 0.0007]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0589, 0.0662],
        [0.0609, 0.0640],
        [0.0630, 0.0618],
        [0.0599, 0.0650],
        [0.0631, 0.0617],
        [0.0541, 0.0720],
        [0.0648, 0.0601],
        [0.0632, 0.0616],
        [0.0607, 0.0642],
        [0.0663, 0.0588],
        [0.0652, 0.0598],
        [0.0650, 0.0599],
        [0.0631, 0.0617],
        [0.0659, 0.0591],
        [0.0644, 0.0605],
        [0.0614, 0.0634]], device='cuda:0')
 Batch: 8 of identical_modal classification Duration: 0:00:00.322625
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0005],
        [0.0003, 0.0004],
        [0.0003, 0.0005],
        [0.0005, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0004, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0006],
        [0.0004, 0.0007],
        [0.0004, 0.0005],
        [0.0003, 0.0005],
        [0.0003, 0.0005],
        [0.0006, 0.0007],
        [0.0003, 0.0006],
        [0.0002, 0.0002]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0599, 0.0650],
        [0.0668, 0.0583],
        [0.0601, 0.0648],
        [0.0647, 0.0602],
        [0.0606, 0.0643],
        [0.0618, 0.0630],
        [0.0591, 0.0659],
        [0.0629, 0.0619],
        [0.0596, 0.0653],
        [0.0609, 0.0640],
        [0.0662, 0.0588],
        [0.0595, 0.0654],
        [0.0614, 0.0634],
        [0.0665, 0.0585],
        [0.0580, 0.0672],
        [0.0720, 0.0541]], device='cuda:0')
 Batch: 9 of identical_modal classification Duration: 0:00:00.319758
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0005, 0.0011],
        [0.0002, 0.0005],
        [0.0007, 0.0013],
        [0.0002, 0.0003],
        [0.0003, 0.0004],
        [0.0002, 0.0002],
        [0.0003, 0.0006],
        [0.0003, 0.0005],
        [0.0002, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0006],
        [0.0003, 0.0006],
        [0.0002, 0.0003],
        [0.0004, 0.0005],
        [0.0002, 0.0005],
        [0.0002, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0606, 0.0642],
        [0.0611, 0.0637],
        [0.0606, 0.0643],
        [0.0658, 0.0592],
        [0.0640, 0.0609],
        [0.0728, 0.0535],
        [0.0579, 0.0672],
        [0.0611, 0.0637],
        [0.0642, 0.0607],
        [0.0598, 0.0652],
        [0.0596, 0.0654],
        [0.0605, 0.0644],
        [0.0649, 0.0600],
        [0.0671, 0.0581],
        [0.0594, 0.0656],
        [0.0607, 0.0641]], device='cuda:0')
 Batch: 10 of identical_modal classification Duration: 0:00:00.434557
probs_ shape 2 torch.Size([1, 16])
probs_ shape 2 torch.Size([1, 16])
answers_probs before norm: tensor([[0.0002, 0.0003],
        [0.0003, 0.0007],
        [0.0004, 0.0006],
        [0.0004, 0.0007],
        [0.0005, 0.0006],
        [0.0002, 0.0003],
        [0.0003, 0.0005],
        [0.0002, 0.0007],
        [0.0002, 0.0005],
        [0.0005, 0.0007],
        [0.0005, 0.0006],
        [0.0004, 0.0009],
        [0.0003, 0.0004],
        [0.0003, 0.0007],
        [0.0003, 0.0005],
        [0.0003, 0.0005]], device='cuda:0') torch.Size([16, 2])
answers_probs just softmax dim 0: tensor([[0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625],
        [0.0625, 0.0625]], device='cuda:0')
tensor([[0.0636, 0.0612],
        [0.0607, 0.0642],
        [0.0639, 0.0609],
        [0.0638, 0.0610],
        [0.0683, 0.0570],
        [0.0618, 0.0630],
        [0.0633, 0.0615],
        [0.0544, 0.0716],
        [0.0585, 0.0666],
        [0.0653, 0.0596],
        [0.0683, 0.0570],
        [0.0602, 0.0647],
        [0.0635, 0.0613],
        [0.0571, 0.0682],
        [0.0638, 0.0610],
        [0.0636, 0.0612]], device='cuda:0')
 Batch: 11 of identical_modal classification Duration: 0:00:00.410262
probs_ shape 2 torch.Size([1, 8])
probs_ shape 2 torch.Size([1, 8])
answers_probs before norm: tensor([[3.0375e-04, 6.3276e-04],
        [4.4274e-04, 7.4148e-04],
        [4.0960e-04, 5.8651e-04],
        [2.4140e-04, 4.5824e-04],
        [8.3983e-05, 3.3998e-04],
        [2.3043e-04, 5.3167e-04],
        [2.6584e-04, 5.1260e-04],
        [1.5378e-04, 2.9874e-04]], device='cuda:0') torch.Size([8, 2])
answers_probs just softmax dim 0: tensor([[0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250],
        [0.1250, 0.1250]], device='cuda:0')
tensor([[0.1241, 0.1254],
        [0.1304, 0.1194],
        [0.1354, 0.1150],
        [0.1267, 0.1229],
        [0.1094, 0.1423],
        [0.1214, 0.1282],
        [0.1263, 0.1233],
        [0.1261, 0.1235]], device='cuda:0')
 Batch: 12 of identical_modal classification Duration: 0:00:00.124183
acc:  0.445
Time taken to execute the en SA task with prompt type identical_modal, variation 9 and batchsize 16: 0:00:04.928031
path ['42', 'en', 'bloom-big', 'SA', 'identical_modal', 'prompt_id_9']
Dictionary saved to './ATCS_group3/saved_outputs/logits_dict_seed_42_lang_en_v74.pickle' as a pickle file.

Loading model bigscience/bloomz-7b1-mt
Model bigscience/bloomz-7b1-mt loaded
Available device is cuda
Traceback (most recent call last):
  File "/home/lcur1101/ATCS_group3/src/main.py", line 197, in <module>
    pipeline(seed, lang, models, tasks, prompt_types, prompt_templates,
  File "/home/lcur1101/ATCS_group3/src/main.py", line 125, in pipeline
    LM = Model(LM_model, train_dataloader.possible_answers)
  File "/home/lcur1101/ATCS_group3/src/models/model.py", line 49, in __init__
    self.model = self.model.cuda()
  File "/home/lcur1101/.conda/envs/dl2022/lib/python3.10/site-packages/torch/nn/modules/module.py", line 905, in cuda
    return self._apply(lambda t: t.cuda(device))
  File "/home/lcur1101/.conda/envs/dl2022/lib/python3.10/site-packages/torch/nn/modules/module.py", line 797, in _apply
    module._apply(fn)
  File "/home/lcur1101/.conda/envs/dl2022/lib/python3.10/site-packages/torch/nn/modules/module.py", line 797, in _apply
    module._apply(fn)
  File "/home/lcur1101/.conda/envs/dl2022/lib/python3.10/site-packages/torch/nn/modules/module.py", line 797, in _apply
    module._apply(fn)
  [Previous line repeated 2 more times]
  File "/home/lcur1101/.conda/envs/dl2022/lib/python3.10/site-packages/torch/nn/modules/module.py", line 820, in _apply
    param_applied = fn(param)
  File "/home/lcur1101/.conda/envs/dl2022/lib/python3.10/site-packages/torch/nn/modules/module.py", line 905, in <lambda>
    return self._apply(lambda t: t.cuda(device))
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 128.00 MiB (GPU 0; 23.65 GiB total capacity; 22.72 GiB already allocated; 77.56 MiB free; 22.83 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
srun: error: r28n5: task 0: Exited with exit code 1
